# systems/simula/code_sim/spec/synthesize.py  (v2)
from __future__ import annotations

import re
import time
import uuid
from pathlib import Path

from .minimize_trace import minimize_pytest_stdout
from .oracles import generate_oracle_tests


def _sanitize(s: str) -> str:
    return re.sub(r"[^A-Za-z0-9_]+", "_", s).strip("_") or "case"


def write_tests_from_stdout(
    pytest_stdout: str,
    *,
    suite_name: str = "acceptance",
) -> dict[str, object]:
    locs = minimize_pytest_stdout(pytest_stdout)
    if not locs:
        return {"status": "noop", "note": "no failure loci found"}

    ts = int(time.time())
    fname = f"tests/generated/test_{_sanitize(suite_name)}_{ts}_{uuid.uuid4().hex[:6]}.py"
    p = Path(fname)
    p.parent.mkdir(parents=True, exist_ok=True)

    lines = [
        "import pytest",
        "",
        f"# Auto-generated by Simula at {ts}",
        "",
    ]

    for i, (file, line) in enumerate(locs, start=1):
        doc = f"{file}:{line}"
        lines.append(f"def test_acceptance_{i}():")
        lines.append(f'    """Autogenerated acceptance: {doc}"""')
        lines.append("    # TODO: implement minimal reproducer; start from locus above")
        lines.append("    assert True  # placeholder")
        lines.append("")

    p.write_text("\n".join(lines) + "\n", encoding="utf-8")
    return {"status": "success", "file": fname, "cases": len(locs)}


def write_oracle_tests(py_file: str) -> dict[str, object]:
    out = generate_oracle_tests(py_file)
    if out.get("status") != "success":
        return out
    ts = int(time.time())
    fname = f"tests/generated/test_oracles_{_sanitize(Path(py_file).stem)}_{ts}.py"
    Path(fname).parent.mkdir(parents=True, exist_ok=True)
    Path(fname).write_text(out["tests"], encoding="utf-8")
    return {"status": "success", "file": fname, "cases": out.get("cases", 0)}
