networks:
  ecodian_net:
    name: ecodian_net
    external: true

volumes:
  models_data:

services:
  # --- Core Dependencies ---
  redis:
    image: redis:7-alpine
    container_name: ecodia_redis
    networks: [ecodian_net]
    ports: ["6379:6379"]

  # --- Database Seeder (optional; runs against your host DB) ---
  seeder:
    image: ecodiaos:dev
    container_name: ecodia_os_seeder
    working_dir: /app
    command: ["python", "scripts/seed_db.py"]
    networks: [ecodian_net]
    env_file: [ ./config/.env ]
    environment:
      PYTHONPATH: /app
      SEED_MINIMAL: "0"         # keep minimal seeding (constraints etc.)
    volumes:
      - ./:/app
    # if you're on Linux, uncomment next line:
    # extra_hosts: [ "host.docker.internal:host-gateway" ]

  # --- EcodiaOS API ---
  api:
    container_name: ecodia_os_api
    image: ecodiaos:dev
    build:
      context: .
      dockerfile: Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        DOCKER_GID: ${DOCKER_GID:-0}
    working_dir: /app
    networks: [ecodian_net]
    command: ["python", "-X", "dev", "-W", "default", "-m", "uvicorn",
              "${APP_MODULE:-app:app}", "--host", "0.0.0.0", "--port", "${APP_PORT:-8000}",
              "--log-level", "debug", "--access-log"]
    env_file: [ ./config/.env ]
    environment:
      PYTHONFAULTHANDLER: "1"
      PYTHONASYNCIODEBUG: "1"
      UVICORN_WORKERS: "1"
      LOG_LEVEL: "DEBUG"
      PYTHONPATH: /app
      ECODIAOS_BASE_URL: http://api:8000
      REDIS_HOST: redis
      SIMULA_SANDBOX_MODE: docker
      SIMULA_REPO_ROOT: /app
      GIT_DISCOVERY_ACROSS_FILESYSTEM: "1"
      GIT_DIR: /app/.git
      GIT_WORK_TREE: /app
      HF_HOME: /models/hf
      QORA_API_KEY: dev-local-key
    volumes:
      - ./:/app
      - ./config:/app/config:ro
      - models_data:/models:rw
      - /var/run/docker.sock:/var/run/docker.sock
    ports: ["8000:8000"]
    restart: unless-stopped
    depends_on:
      seeder:
        condition: service_completed_successfully
      redis:
        condition: service_started
    # if you're on Linux, uncomment next line:
    # extra_hosts: [ "host.docker.internal:host-gateway" ]

  # --- Synapse Autonomous Daemon ---
  synapse_daemon:
    image: ecodiaos:dev
    container_name: ecodia_os_synapse_daemon
    build:
      context: .
      dockerfile: Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        DOCKER_GID: ${DOCKER_GID:-0}
    working_dir: /app
    command: ["python", "-m", "systems.synapse.daemon"]
    networks: [ecodian_net]
    env_file: [ ./config/.env ]
    environment:
      PYTHONPATH: /app
      ECODIAOS_BASE_URL: http://api:8000
      REDIS_HOST: redis
      GIT_DISCOVERY_ACROSS_FILESYSTEM: "1"
      GIT_DIR: /app/.git
      GIT_WORK_TREE: /app
    volumes:
      - ./:/app
      - ./config:/app/config:ro
    restart: unless-stopped
    depends_on:
      api:
        condition: service_started
 