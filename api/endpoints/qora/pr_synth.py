from __future__ import annotations

import re
from typing import Any

from fastapi import APIRouter
from pydantic import BaseModel, Field

router = APIRouter()

_FILE_RE = re.compile(r"^\+\+\+ b/(.+)$", re.M)


class PRSynthRequest(BaseModel):
    diff: str = Field(..., description="Unified diff")
    policy_ok: bool | None = None
    mutation_summary: dict[str, Any] | None = None
    impact_plan: dict[str, Any] | None = None
    title_hint: str | None = None


class PRSynthResponse(BaseModel):
    title: str
    body_markdown: str


def _changed_files(diff: str) -> list[str]:
    return sorted(set(_FILE_RE.findall(diff or "")))


@router.post("/synth", response_model=PRSynthResponse)
async def pr_synth(req: PRSynthRequest) -> PRSynthResponse:
    files = _changed_files(req.diff or "")
    ok = req.policy_ok
    badge = "✅" if ok else ("⚠️" if ok is False else "ℹ️")
    title_hint = req.title_hint or (files[0] if files else "Code evolution")
    title = f"{badge} {title_hint} — {len(files)} file(s)"

    body: list[str] = []
    body.append(f"## {badge} Overview\n")
    body.append(f"- Changed files: **{len(files)}**\n")
    if files:
        for p in files[:25]:
            body.append(f"  - `{p}`\n")
        if len(files) > 25:
            body.append(f"  - … +{len(files) - 25} more\n")

    if req.impact_plan:
        plan = req.impact_plan
        body.append("\n## Impact\n")
        k = plan.get("k_expr") or ""
        if k:
            body.append(f'- Focused tests: `pytest -k "{k}"`\n')
        cand = plan.get("candidate_tests") or []
        if cand:
            body.append(f"- Candidate tests: {min(len(cand), 20)} shown\n")
            for t in cand[:20]:
                body.append(f"  - `{t}`\n")
        cov = plan.get("coverage_delta") or {}
        if cov:
            pct = cov.get("pct_changed_covered")
            if pct is not None:
                body.append(f"- ΔCoverage on changed lines: **{pct:.2f}%**\n")

    if req.mutation_summary:
        m = req.mutation_summary
        body.append("\n## Mutation (heuristic)\n")
        if "estimated_mutation_score" in m:
            body.append(f"- Estimated mutation score: **{m['estimated_mutation_score']}**\n")
        if "mutant_sites" in m:
            body.append(f"- Mutant sites detected (new code): **{m['mutant_sites']}**\n")

    if ok is not None:
        body.append("\n## Policy\n")
        body.append(
            "- **OK** — no violations detected.\n"
            if ok
            else "- **Issues detected** — see policy report.\n",
        )

    body.append("\n---\n<sub>Generated by Qora · Simula</sub>\n")
    return PRSynthResponse(title=title, body_markdown="".join(body))
