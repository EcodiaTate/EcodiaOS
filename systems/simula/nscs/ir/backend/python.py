from __future__ import annotations

import os

from ..model import SIMIR, FuncDecl, ModuleIR

HEADER = "# Auto-generated by NSCS Python backend\nfrom __future__ import annotations\n"


def render_function(fd: FuncDecl) -> str:
    params = ", ".join(fd.params.keys())
    name = fd.fqname.split("::")[-1]
    sig = f"def {name}({params}) -> {fd.returns}:"
    body = [
        '"""Generated function. Fill logic via Simula if needed."""',
        "result = 0",
    ]
    post = fd.contracts.get("post")
    if post:
        body.append(f"assert {post}")
    body.append("return result")
    return sig + "\n    " + "\n    ".join(body) + "\n\n"


def render_module(module_ir: ModuleIR) -> str:
    out = [HEADER]
    for imp in module_ir.imports:
        out.append(f"import {imp}\n")
    for fd in module_ir.funcs:
        out.append(render_function(fd))
    return "".join(out)


def emit_files_from_ir(ir: SIMIR, root_dir: str) -> dict[str, str]:
    out: dict[str, str] = {}
    for path, mod in ir.modules.items():
        content = render_module(mod)
        out[path] = content
        os.makedirs(os.path.dirname(os.path.join(root_dir, path)), exist_ok=True)
        with open(os.path.join(root_dir, path), "w", encoding="utf-8") as f:
            f.write(content)
    return out
