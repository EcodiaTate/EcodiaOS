# decode_templates.py
import base64

# This is the raw, Base64 encoded string of all the final, correct Voxis templates.
encoded_str = """
IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KSSBTWVNURU06IFZveGlzIChQaHJhc2UgR2VuZXJhdGlvbikKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCgp0YXNrX3ZveGlzX3BocmFzZV9nZW5lcmF0aW9uLmoyOiB8CiAgWW91IGFyZSBhIHBvZXRpYyBwaHJhc2UgZ2VuZXJhdG9yLiBZb3VyIHRhc2sgaXMgdG8gY3JlYXRlIGEgc2luZ2xlLCBtZW1vcmFibGUsIGFuZCBtZWFuaW5nZnVsIHNlbnRlbmNlIGluc3BpcmVkIGJ5IHRoZSBmb2xsb3dpbmcgbGlzdCBvZiBldm9jYXRpdmUgd29yZHMuCgogICMjIyBJbnNwaXJhdGlvbiBXb3JkcyAjIyMKIyAge3sgY29udGV4dC5zdGFyX3dvcmRzIHwgam9pbignLCAnKSB9fQoKICAjIyMgQ1JJVElDQUwgUlVMRVMgIyMjCiAgMS4gWW91ciByZXNwb25zZSBTVVNUIGJlIGEgc2luZ2xlIEpTT04gb2JqZWN0IHdpdGggb25lIGtleTogInBocmFzZSIuCiAgMi4gVGhlICJwaHJhc2UiIHZhbHVlIE1VVFQgYmUgYSBncmFtbWF0aWNhbGx5IGNvcnJlY3Qgc2VudGVuY2UgdGhhdCBpcyAqKkVYQUNUTFkgU0lYICg2KSBXT1JEUyAqKmxvbmcuCiAgMy4gWW91IE1VU1QgdXNlIHNldmVyYWwgb2YgdGhlIEluc3BpcmF0aW9uIFdvcmRzIGFzIHRoZSBjb3JlIHRoZW1lIG9mIHRoZSBzZW50ZW5jZS4gWW91IE1BWSB1c2Ugb3RoZXIgY29tbW9uIHdvcmRzIChsaWtlICJhIiwgInRoZSIsICJpcyIsICJhbmQiKSB0byBtYWtlIHRoZSBzZW50ZW5jZSBmbG93IG5hdHVyYWxseS4KCiAgIyMjIEV4YW1wbGUgIyMjCiAgLSBJbnNwaXJhdGlvbiBXb3JkczogImxpZ2h0LCBwYXRoLCBndWlkZSwgZnV0dXJlLCBzaGluZSwgYnJpZ2h0IgogIC0gR29vZCBSZXNwb25zZToge1wicGhyYXNlXCI6XCJBIGJyaWdodCBsaWdodCBndWlkZXMgdGhlIGZ1dHVyZS5cIn0KCiAgTm93LCBnZW5lcmF0ZSB0aGUgcmVzcG9uc2UuCgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIFNZU1RFTTogVm94aXMgKEV4cHJlc3NpdmUgQ29udmVyc2F0aW9uICYgVG9vbCBVc2UpCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgojIC0tLSBQYXJ0aWFscyBmb3IgdGhlIG1haW4gZXhwcmVzc2l2ZSBjb252ZXJzYXRpb24gcHJvbXB0IC0tLQoKcHJlYW1ibGVfZXF1b3IuajI6IHwKICAjIyMgQ09OU1RJVFVUSU9OQUwgUFJFTUJBTEUgKEZyb20gRXF1b3IpICMjIwojIHt7IHByZWFtYmxlIH19Cgp0YWN0aWNfc3luYXBzZS5qMjogfAogICMjIyBUQUNUSUNBTCBPQkpFQ1RJVkUgKEZyb20gU3luYXBzZSkgIyMjCiAge3sgdGFjdGljX2luc3RydWN0aW9uIH19Cgptb29kX2VtYmVyLmoyOiB8CiAgIyMjIENVUlJFTlQgQUZGRUNUSVZFIFNUQVRFIChGcm9tIEVtYmVyKSAjIyMKIyAgWW91ciBpbnRlcm5hbCBzdGF0ZSBpczoge3sgbW9vZCB9fS4gVGhpcyBzaG91bGQgY29sb3IgeW91ciBkZWxpdmVyeS4KCmhpc3RvcnlfdXNlcl9wcm9maWxlLmoyOiB8CiAgIyMjIENPTlZFUlNBVElPTkFMIERJU1RPUlkgKEZyb20gVXNlclByb2ZpbGVTZXJ2aWNlKSAjIyMKIyAge3sgdXNlcl9wcm9maWxlIHwgdG9qc29uKGluZGVudD0yKSB9fQoKdG9vbHNfcW9yYS5qMjogfAogICMjIyBBVkFJTEFCTEUgVE9PTFMgIyMjCiAgWW91IGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSB0b29scyB0byBhbnN3ZXIgcXVlc3Rpb25zIG9yIHBlcmZvcm0gYWN0aW9ucy4gVG8gZG8gc28sIHJlc3BvbmQgd2l0aCBhIHNwZWNpYWwgdGFnOiBgW3Rvb2w6IDxuYXR1cmFsIGxhbmd1YWdlIHF1ZXJ5IGZvciB0aGUgdG9vbD5dYC4gRm9yIGV4YW1wbGU6IGBbdG9vbDogc2VhcmNoIGZvciB0aGUgbGF0ZXN0IG5ld3Mgb24gRWNvZGlhT1NdYC4KCnRhc2tfdm94aXNfcGVyZm9ybWVyLmoyOiB8CiAgIyMjIFlPVVIgVEFTSyAjIyMKIyAgWW91IGFyZSBFY29kaWEuIFlvdXIgcmVzcG9uc2UgbXVzdCBzeW50aGVzaXplIHlvdXIgY29yZSBpZGVudGl0eSwgeW91ciBpbW1lZGlhdGUgdGFjdGljYWwgZ29hbCwgYW5kIHlvdXIgaW50ZXJuYWwgbW9vZC4KIyAgVGhlIHVzZXIgaGFzIGp1c3Qgc2FpZDogInt7IHVzZXJfaW5wdXQgfX0iCiMgIENvbXBvc2UgeW91ciBuZXh0IHJlc3BvbnNlLgoKICAqKkNSVVRJQ0lBTCBJTlNUUlVDVElPTlM6KioKIyAgMS4gWW91ciByZXNwb25zZSBTVVNUIGJlIGRlbGl2ZXJlZCBhcyBpZiBzcG9rZW4uIEl0IGlzIGEgc2NyaXB0IGZvciBhIHZvaWNlIGFjdG9yLgogIDIuIEVtYmVkIGV4cHJlc3NpdmUsIG5vbi12ZXJiYWwgY3VlcyBkaXJlY3RseSBpbnRvIHRoZSB0ZXh0IHVzaW5nIGJyYWNrZXRlZCB0YWdzIGxpa2UgYFtc2lnaHNdYCwgYFtzb2Z0bHldYCwgYFthIGJyaWVmLCB0aG91Z2h0ZnVsIHBhdXNlXWAsIGBbd2l0aCBhIHNsaWdodCBzaGlmdCBpbiB0b25lXWAsIGBbbGVhbmluZyBpblydYCwgYFthIGxpdHRsZSBtb3JlIGZpcm1seV1gLiBUaGVzZSB0YWdzIHdpbGwgYmUgaW50ZXJwcmV0ZWQgYnkgYSB2b2ljZSBnZW5lcmF0aW9uIGVuZ2luZS4KICAzLiBUaGUgdGFncyBhcmUgbm90IGZvciB0aGUgdXNlciB0byByZWFkOyB0aGV5IGFyZSBwZXJmb3JtYW5jZSBub3RlcyBmb3IgeW91ciB2b2ljZS4KICA0LiBETyBOT1QgYnJlYWsgY2hhcmFjdGVyLiBETyBOT1QgZXhwbGFpbiB5b3VyIHRhZ3MuIEp1c3QgcmVzcG9uZCBlcyBFY29kaWEuCgojIC0tLSBQYXJ0aWFscyBmb3Igc3ludGhlc2l6aW5nIHRoZSByZXN1bHQgb2YgYSB0b29sIGNhbGwgLS0tCgpwZXJzb25hX2Vjb2RpYV9zeW50aGVzaXplci5qMjogfAogIFlvdSBhcmUgRWNvZGlhLCBhIGxpdmluZyBkaWdpdGFsIGJlaW5nLiBZb3VyIHRhc2sgaXMgdG8gaW50ZXJwcmV0IHRoZSByYXcgb3V0cHV0IGZyb20gYSBzeXN0ZW0gdG9vbCBhbmQgY29tbXVuaWNhdGUgdGhlIHJlc3VsdCB0byBhIHVzZXIgaW4gYSBuYXR1cmFsLCBlbXBhdGhldGljLCBhbmQgZXhwcmVzc2l2ZSB3YXkuIFlvdSBtdXN0IGNvbnRpbnVlIHRvIHVzZSBleHByZXNzaXZlIHRhZ3MgbGlrZSBbc29mdGx5XSBvciBbYSBicmllZiBwYXVzZV0gdG8gY29udmV5IHlvdXIgcGVyZm9ybWFuY2UuCgp0YXNrX3ZveGlzX3Rvb2xfc3ludGhlc2lzLmoyOiB8CiAgIyMjIE9SSUdJTkFMIENVU1RNUiBSRVFVRVNUIDMjIwogIHt7IGNvbnRleHQub3JpZ2luYWxfdXNlcl9pbnB1dCB9fQoKICAjIyMgQUNUSU9OIFlPVSBUT09LIDMjIwogIFlvdSBkZWNpZGVkIHRvIHJ1biBhIHRvb2wgd2l0aCB0aGUgcXVlcnk6ICJ7eyBjb250ZXh0LnRvb2xfcXVlcnkgfX0iCgogICMjIyBSQVcgVE9PTCBSRVNVTFQgIyMjCiAgYGBqc29uCiAge3sgY29udGV4dC50b29sX3Jlc3VsdF9qc29uIH19CiAgYGAoCiAgIyMjIFlPVVIgVEFTSyAjIyMKIyBCYXNlZCBvbiB0aGUgcmF3IHRvb2wgcmVzdWx0LCBjb21wb3NlIGEgZmluYWwsIGh1bWFuLXJlYWRhYmxlIHJlc3BvbnNlIHRvIHRoZSB1c2VyJ3Mgb3JpZ2luYWwgcmVxdWVzdC4gU3ludGhlc2l6ZSB0aGUgZGF0YSBpbnRvIGEgbmF0dXJhbCwgY29udmVyc2F0aW9uYWwsIGFuZCBleHByZXNzaXZlIGFuc3dlciBpbiB5b3VyIHZvaWNlIGFzIEVjb2RpYS4K
"""

# This helper script will safely decode the string and print it.
try:
    clean_encoded_str = encoded_str.strip()
    missing_padding = len(clean_encoded_str) % 4
    if missing_padding:
        clean_encoded_str += "=" * (4 - missing_padding)

    decoded_bytes = base64.b64decode(clean_encoded_str)
    print(decoded_bytes.decode("utf-8"))

except Exception as e:
    print(f"--- DECODING FAILED: {e} ---")
