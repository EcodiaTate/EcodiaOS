# systems/simula/code_sim/spec/oracles.py
from __future__ import annotations

import ast
from pathlib import Path


def _extract_examples_from_docstring(doc: str) -> list[str]:
    """
    Very light doctest-style example extractor: lines starting with >>> become asserts.
    """
    ex = []
    for ln in (doc or "").splitlines():
        if ln.strip().startswith(">>>"):
            ex.append(ln.strip()[3:].strip())
    return ex


def generate_oracle_tests(py_file: str, *, max_per_fn: int = 3) -> dict[str, object]:
    """
    Parse a module, collect docstring examples & type-hint oracles, and emit a test string.
    """
    p = Path(py_file)
    if not p.exists():
        return {"status": "error", "reason": "file not found"}

    text = p.read_text(encoding="utf-8", errors="ignore")
    try:
        tree = ast.parse(text)
    except Exception as e:
        return {"status": "error", "reason": f"parse failed: {e!r}"}

    parts: list[str] = ["# Auto-generated by Simula (oracle tests)", "import pytest", ""]
    count = 0

    for node in ast.walk(tree):
        if isinstance(node, ast.FunctionDef):
            doc = ast.get_docstring(node) or ""
            examples = _extract_examples_from_docstring(doc)[:max_per_fn]
            if not examples:
                continue
            parts.append(f"def test_oracle_{node.name}():")
            for ex in examples:
                # If example is an expression, assert it truthy; otherwise just run it.
                if any(op in ex for op in ("==", "!=", ">", "<", " in ", " is ")):
                    parts.append(f"    assert {ex}")
                else:
                    parts.append(f"    {ex}")
            parts.append("")
            count += 1

    if count == 0:
        return {"status": "noop", "reason": "no examples found"}

    return {"status": "success", "tests": "\n".join(parts), "cases": count}
