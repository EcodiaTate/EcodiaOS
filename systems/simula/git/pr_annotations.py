# systems/simula/integrations/github/pr_annotations.py
from __future__ import annotations

import os
from typing import Any

import httpx

GITHUB_API = "https://api.github.com"


def _auth_headers() -> dict[str, str]:
    token = os.getenv("GITHUB_TOKEN") or os.getenv("GH_TOKEN") or os.getenv("GITHUB_PAT") or ""
    if not token:
        raise RuntimeError("Missing GITHUB_TOKEN/GH_TOKEN in env")
    return {"Authorization": f"Bearer {token}", "Accept": "application/vnd.github+json"}


def format_proposal_comment(proposal: dict[str, Any]) -> str:
    ev = proposal.get("evidence") or {}
    cov = ev.get("coverage_delta") or {}
    hyg = ev.get("hygiene") or {}
    risk = ev.get("risk") or {}  # if you attach risk estimate later
    lines = []
    lines.append(f"### ðŸ¤– Simula Proposal `{proposal.get('proposal_id', '?')}`")
    lines.append("")
    lines.append("**Hygiene**")
    lines.append(f"- static: `{hyg.get('static', '?')}`")
    lines.append(f"- tests: `{hyg.get('tests', '?')}`")
    if "pct_changed_covered" in cov:
        lines.append(f"- Î”coverage (changed lines): **{cov.get('pct_changed_covered', 0):.2f}%**")
    if risk:
        lines.append(f"- Risk: **{risk.get('grade', '?')}** ({risk.get('risk', '?')})")
    # Impact summary
    imp = ev.get("impact") or {}
    if imp:
        k = imp.get("k_expr") or ""
        files = imp.get("changed") or []
        lines.append("")
        lines.append("**Impact**")
        if k:
            lines.append(f"- focus: `{k}`")
        if files:
            sample = ", ".join(files[:8])
            more = "" if len(files) <= 8 else f" (+{len(files) - 8} more)"
            lines.append(f"- files: {sample}{more}")
    lines.append("")
    lines.append("<sub>Generated by Simula/Qora</sub>")
    return "\n".join(lines)


async def post_pr_comment(repo: str, pr_number: int, body: str) -> dict[str, Any]:
    headers = _auth_headers()
    url = f"{GITHUB_API}/repos/{repo}/issues/{pr_number}/comments"
    async with httpx.AsyncClient(timeout=30.0) as http:
        r = await http.post(url, headers=headers, json={"body": body})
        r.raise_for_status()
        return r.json()


async def set_commit_status(
    repo: str,
    sha: str,
    state: str,
    *,
    context: str = "simula/hygiene",
    description: str = "",
    target_url: str | None = None,
) -> dict[str, Any]:
    """
    state: 'error'|'failure'|'pending'|'success'
    """
    headers = _auth_headers()
    url = f"{GITHUB_API}/repos/{repo}/statuses/{sha}"
    payload = {"state": state, "context": context}
    if description:
        payload["description"] = description[:140]
    if target_url:
        payload["target_url"] = target_url
    async with httpx.AsyncClient(timeout=30.0) as http:
        r = await http.post(url, headers=headers, json=payload)
        r.raise_for_status()
        return r.json()
