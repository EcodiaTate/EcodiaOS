# api/endpoints/simula/artifacts.py
# --- PROJECT SENTINEL UPGRADE (FINAL) ---
from __future__ import annotations

from typing import Any

from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel, Field

# This now points to the centralized, robust artifact management service.
from systems.simula.artifacts.index import delete_artifacts, list_artifacts, read_artifact

artifacts_router = APIRouter(tags=["simula", "artifacts"])


class ArtifactListResponse(BaseModel):
    status: str = "success"
    result: dict[str, Any]


class ArtifactReadResponse(BaseModel):
    status: str = "success"
    result: dict[str, Any]


class DeleteRequest(BaseModel):
    paths: list[str] = Field(
        ...,
        min_length=1,
        description="A list of artifact paths to delete, relative to the artifacts root.",
    )


class DeleteResponse(BaseModel):
    status: str = "success"
    result: dict[str, Any]


@artifacts_router.get(
    "/artifacts",
    response_model=ArtifactListResponse,
    summary="List available artifacts",
)
async def list_simula_artifacts(
    kind: str | None = Query(
        default=None,
        description="Filter artifacts by kind (e.g., 'report', 'proposal', 'log').",
    ),
    limit: int = Query(
        default=200,
        ge=1,
        le=1000,
        description="Maximum number of artifacts to return.",
    ),
) -> dict[str, Any]:
    """
    Retrieves a list of artifacts generated by Simula runs, such as logs,
    proposals, and reports. Supports filtering by kind and limiting the result size.
    """
    try:
        result = list_artifacts(kind=kind, limit=limit)
        return {"status": "success", "result": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to list artifacts: {e!r}")


@artifacts_router.get(
    "/artifacts/read",
    response_model=ArtifactReadResponse,
    summary="Read a specific artifact",
)
async def read_simula_artifact(
    path: str = Query(..., description="The path of the artifact, relative to the artifacts root."),
) -> dict[str, Any]:
    """
    Reads the content or metadata of a single artifact. For large or binary files,
    it may return only metadata. For text-based files, it will include the content.
    """
    try:
        res = read_artifact(path)
        if res.get("status") == "error":
            raise HTTPException(status_code=404, detail=res.get("reason", "Artifact not found."))
        return {"status": "success", "result": res}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to read artifact: {e!r}")


@artifacts_router.post(
    "/artifacts/delete",
    response_model=DeleteResponse,
    summary="Delete one or more artifacts",
)
async def delete_simula_artifacts(req: DeleteRequest) -> dict[str, Any]:
    """
    Deletes one or more artifacts from the artifact store. This operation is permanent.
    """
    try:
        res = delete_artifacts(req.paths)
        return {"status": "success", "result": res}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to delete artifacts: {e!r}")
