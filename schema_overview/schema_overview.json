{
  "scanned_at": "2025-08-20T13:27:04Z",
  "root": "D:\\EcodiaOS",
  "counts": {
    "modules": 328,
    "functions": 1205,
    "classes": 228,
    "pydantic_models": 93,
    "endpoints": 63
  },
  "endpoints": [
    {
      "method": "GET",
      "path": "/ping",
      "router_var": "app",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "ping",
      "module": "D:\\EcodiaOS\\app.py"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "router_var": "app",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "metrics",
      "module": "D:\\EcodiaOS\\app.py"
    },
    {
      "method": "GET",
      "path": "/neo",
      "router_var": "health_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "health_neo",
      "module": "D:\\EcodiaOS\\api\\endpoints\\app_health.py"
    },
    {
      "method": "GET",
      "path": "/vector",
      "router_var": "health_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "health_vector",
      "module": "D:\\EcodiaOS\\api\\endpoints\\app_health.py"
    },
    {
      "method": "GET",
      "path": "/",
      "router_var": "health_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "health_root",
      "module": "D:\\EcodiaOS\\api\\endpoints\\app_health.py"
    },
    {
      "method": "GET",
      "path": "/health",
      "router_var": "health_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "health",
      "module": "D:\\EcodiaOS\\api\\endpoints\\app_health.py"
    },
    {
      "method": "POST",
      "path": "/origin/node",
      "router_var": "router",
      "response_model": "OriginCreated",
      "status_code": null,
      "tags": null,
      "handler": "post_node",
      "module": "D:\\EcodiaOS\\api\\endpoints\\origin.py"
    },
    {
      "method": "POST",
      "path": "/origin/search",
      "router_var": "router",
      "response_model": "Dict[str, List[SearchHit]]",
      "status_code": null,
      "tags": null,
      "handler": "post_search",
      "module": "D:\\EcodiaOS\\api\\endpoints\\origin.py"
    },
    {
      "method": "POST",
      "path": "/origin/edges",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "post_edges",
      "module": "D:\\EcodiaOS\\api\\endpoints\\origin.py"
    },
    {
      "method": "POST",
      "path": "/origin/batch_csv",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "post_batch_csv",
      "module": "D:\\EcodiaOS\\api\\endpoints\\origin.py"
    },
    {
      "method": "POST",
      "path": "/answers",
      "router_var": "answers_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "submit_answer",
      "module": "D:\\EcodiaOS\\api\\endpoints\\evo\\answers.py"
    },
    {
      "method": "GET",
      "path": "/questions",
      "router_var": "questions_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "get_recent_evo_questions",
      "module": "D:\\EcodiaOS\\api\\endpoints\\evo\\questions.py"
    },
    {
      "method": "POST",
      "path": "/trigger",
      "router_var": "patrol_router",
      "response_model": null,
      "status_code": 202,
      "tags": null,
      "handler": "trigger_evo_patrol",
      "module": "D:\\EcodiaOS\\api\\endpoints\\evo\\patrol.py"
    },
    {
      "method": "POST",
      "path": "/deliberate",
      "router_var": "router",
      "response_model": "DeliberationResponse",
      "status_code": null,
      "tags": null,
      "handler": "start_deliberation",
      "module": "D:\\EcodiaOS\\api\\endpoints\\unity\\deliberate.py"
    },
    {
      "method": "POST",
      "path": "/generate_phrase",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "generate_phrase",
      "module": "D:\\EcodiaOS\\api\\endpoints\\voxis\\generate_phrase.py"
    },
    {
      "method": "GET",
      "path": "/interface_mood",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "get_latest_interface_mood",
      "module": "D:\\EcodiaOS\\api\\endpoints\\voxis\\interface_mood.py"
    },
    {
      "method": "POST",
      "path": "/match_phrase",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "match_phrase",
      "module": "D:\\EcodiaOS\\api\\endpoints\\voxis\\match_phrase.py"
    },
    {
      "method": "POST",
      "path": "/talk",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "voxis_chat",
      "module": "D:\\EcodiaOS\\api\\endpoints\\voxis\\talk.py"
    },
    {
      "method": "GET",
      "path": "/",
      "router_var": "tools_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "list_tools",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\tools.py"
    },
    {
      "method": "POST",
      "path": "/reload",
      "router_var": "registry_router",
      "response_model": null,
      "status_code": 202,
      "tags": null,
      "handler": "reload_arm_registry",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\registry.py"
    },
    {
      "method": "POST",
      "path": "/tasks/select_arm",
      "router_var": "main_router",
      "response_model": "SelectArmResponse",
      "status_code": null,
      "tags": null,
      "handler": "select_arm",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\main.py"
    },
    {
      "method": "POST",
      "path": "/tasks/continue_option",
      "router_var": "main_router",
      "response_model": "ContinueResponse",
      "status_code": null,
      "tags": null,
      "handler": "continue_option",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\main.py"
    },
    {
      "method": "POST",
      "path": "/tasks/repair_skill_step",
      "router_var": "main_router",
      "response_model": "RepairResponse",
      "status_code": null,
      "tags": null,
      "handler": "repair_skill_step",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\main.py"
    },
    {
      "method": "GET",
      "path": "/tasks/{task_key}/budget",
      "router_var": "main_router",
      "response_model": "BudgetResponse",
      "status_code": null,
      "tags": null,
      "handler": "get_budget",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\main.py"
    },
    {
      "method": "POST",
      "path": "/ingest/outcome",
      "router_var": "main_router",
      "response_model": "LogOutcomeResponse",
      "status_code": null,
      "tags": null,
      "handler": "log_outcome",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\main.py"
    },
    {
      "method": "POST",
      "path": "/ingest/preference",
      "router_var": "main_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "ingest_preference",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\main.py"
    },
    {
      "method": "POST",
      "path": "/registry/reload",
      "router_var": "main_router",
      "response_model": null,
      "status_code": 202,
      "tags": null,
      "handler": "reload_arm_registry",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\main.py"
    },
    {
      "method": "GET",
      "path": "/",
      "router_var": "main_router",
      "response_model": null,
      "status_code": null,
      "tags": [
        "Root"
      ],
      "handler": "read_root",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\main.py"
    },
    {
      "method": "POST",
      "path": "/outcome",
      "router_var": "ingest_router",
      "response_model": "LogOutcomeResponse",
      "status_code": null,
      "tags": null,
      "handler": "log_outcome",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\ingest.py"
    },
    {
      "method": "POST",
      "path": "/preference",
      "router_var": "ingest_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "ingest_preference",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\ingest.py"
    },
    {
      "method": "POST",
      "path": "/select_arm",
      "router_var": "task_router",
      "response_model": "SelectArmResponse",
      "status_code": null,
      "tags": null,
      "handler": "select_arm",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\tasks.py"
    },
    {
      "method": "GET",
      "path": "/{task_key}/budget",
      "router_var": "task_router",
      "response_model": "BudgetResponse",
      "status_code": null,
      "tags": null,
      "handler": "get_budget",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\tasks.py"
    },
    {
      "method": "POST",
      "path": "/repair_skill_step",
      "router_var": "task_router",
      "response_model": "RepairResponse",
      "status_code": null,
      "tags": null,
      "handler": "repair_skill_step",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\tasks.py"
    },
    {
      "method": "GET",
      "path": "/global_stats",
      "router_var": "dashboard_router",
      "response_model": "GlobalStats",
      "status_code": null,
      "tags": null,
      "handler": "get_stats",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\dashboard_api.py"
    },
    {
      "method": "GET",
      "path": "/qd_coverage",
      "router_var": "dashboard_router",
      "response_model": "QDCoverage",
      "status_code": null,
      "tags": null,
      "handler": "get_qd_coverage",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\dashboard_api.py"
    },
    {
      "method": "GET",
      "path": "/roi_trends",
      "router_var": "dashboard_router",
      "response_model": "ROITrends",
      "status_code": null,
      "tags": null,
      "handler": "get_roi_trends",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\dashboard_api.py"
    },
    {
      "method": "GET",
      "path": "/episode/{episode_id}",
      "router_var": "dashboard_router",
      "response_model": "EpisodeTrace",
      "status_code": null,
      "tags": null,
      "handler": "get_episode",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\dashboard_api.py"
    },
    {
      "method": "POST",
      "path": "/submit_proposal",
      "router_var": "governor_router",
      "response_model": null,
      "status_code": 202,
      "tags": null,
      "handler": "submit_proposal",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\governor.py"
    },
    {
      "method": "POST",
      "path": "/listener/governor/upgrade/approved",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "on_governor_upgrade_approved",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\listener.py"
    },
    {
      "method": "GET",
      "path": "/get_comparison_pair",
      "router_var": "router",
      "response_model": "ComparisonPairResponse",
      "status_code": null,
      "tags": null,
      "handler": "get_comparison_pair",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\ui_api.py"
    },
    {
      "method": "POST",
      "path": "/submit_preference",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "submit_preference",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synapse\\ui_api.py"
    },
    {
      "method": "GET",
      "path": "/flags",
      "router_var": "router",
      "response_model": "List[FlagOut]",
      "status_code": null,
      "tags": null,
      "handler": "list_flags",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synk\\switchboard.py"
    },
    {
      "method": "GET",
      "path": "/flags/{key}",
      "router_var": "router",
      "response_model": "FlagOut",
      "status_code": null,
      "tags": null,
      "handler": "get_flag",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synk\\switchboard.py"
    },
    {
      "method": "PUT",
      "path": "/flags",
      "router_var": "router",
      "response_model": "FlagOut",
      "status_code": null,
      "tags": null,
      "handler": "set_flag",
      "module": "D:\\EcodiaOS\\api\\endpoints\\synk\\switchboard.py"
    },
    {
      "method": "POST",
      "path": "/compose",
      "router_var": "compose_router",
      "response_model": "ComposeResponse",
      "status_code": null,
      "tags": null,
      "handler": "compose_prompt_patch",
      "module": "D:\\EcodiaOS\\api\\endpoints\\equor\\compose.py"
    },
    {
      "method": "POST",
      "path": "/attest",
      "router_var": "attest_router",
      "response_model": null,
      "status_code": 202,
      "tags": null,
      "handler": "receive_attestation",
      "module": "D:\\EcodiaOS\\api\\endpoints\\equor\\attest.py"
    },
    {
      "method": "GET",
      "path": "/drift/{agent_name}",
      "router_var": "drift_router",
      "response_model": "DriftReport",
      "status_code": null,
      "tags": null,
      "handler": "get_drift_report",
      "module": "D:\\EcodiaOS\\api\\endpoints\\equor\\drift.py"
    },
    {
      "method": "POST",
      "path": "/identity/declare",
      "router_var": "declare_router",
      "response_model": null,
      "status_code": 202,
      "tags": null,
      "handler": "declare_identity",
      "module": "D:\\EcodiaOS\\api\\endpoints\\equor\\declare.py"
    },
    {
      "method": "POST",
      "path": "/constitution/update",
      "router_var": "declare_router",
      "response_model": null,
      "status_code": 202,
      "tags": null,
      "handler": "update_constitution",
      "module": "D:\\EcodiaOS\\api\\endpoints\\equor\\declare.py"
    },
    {
      "method": "POST",
      "path": "/audit/invariants",
      "router_var": "invariants_router",
      "response_model": "List[InvariantCheckResult]",
      "status_code": null,
      "tags": null,
      "handler": "run_system_audit",
      "module": "D:\\EcodiaOS\\api\\endpoints\\equor\\invariants.py"
    },
    {
      "method": "POST",
      "path": "/call",
      "router_var": "call_router",
      "response_model": "LlmCallResponse",
      "status_code": null,
      "tags": null,
      "handler": "call_llm_endpoint",
      "module": "D:\\EcodiaOS\\api\\endpoints\\llm\\call.py"
    },
    {
      "method": "POST",
      "path": "/receive",
      "router_var": "api_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "receive_raw_event",
      "module": "D:\\EcodiaOS\\api\\endpoints\\axon\\api.py"
    },
    {
      "method": "POST",
      "path": "/search",
      "router_var": "arch_router",
      "response_model": "List[FunctionLite]",
      "status_code": null,
      "tags": null,
      "handler": "search_tools",
      "module": "D:\\EcodiaOS\\api\\endpoints\\qora\\arch.py"
    },
    {
      "method": "GET",
      "path": "/schema/{uid}",
      "router_var": "arch_router",
      "response_model": "SchemaResp",
      "status_code": null,
      "tags": null,
      "handler": "schema",
      "module": "D:\\EcodiaOS\\api\\endpoints\\qora\\arch.py"
    },
    {
      "method": "POST",
      "path": "/execute-by-uid",
      "router_var": "arch_router",
      "response_model": "ExecResp",
      "status_code": null,
      "tags": null,
      "handler": "execute_by_uid_api",
      "module": "D:\\EcodiaOS\\api\\endpoints\\qora\\arch.py"
    },
    {
      "method": "POST",
      "path": "/execute-by-query",
      "router_var": "arch_router",
      "response_model": "ExecByQueryResp",
      "status_code": null,
      "tags": null,
      "handler": "execute_by_query_api",
      "module": "D:\\EcodiaOS\\api\\endpoints\\qora\\arch.py"
    },
    {
      "method": "GET",
      "path": "/health",
      "router_var": "arch_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "healthz",
      "module": "D:\\EcodiaOS\\api\\endpoints\\qora\\arch.py"
    },
    {
      "method": "POST",
      "path": "/historical-replay",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "historical_replay",
      "module": "D:\\EcodiaOS\\api\\endpoints\\simula\\replay.py"
    },
    {
      "method": "GET",
      "path": "/health",
      "router_var": "route_router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "health",
      "module": "D:\\EcodiaOS\\api\\endpoints\\atune\\route_event.py"
    },
    {
      "method": "POST",
      "path": "/route",
      "router_var": "route_router",
      "response_model": "AtuneRouteResult",
      "status_code": null,
      "tags": null,
      "handler": "route_event",
      "module": "D:\\EcodiaOS\\api\\endpoints\\atune\\route_event.py"
    },
    {
      "method": "GET",
      "path": "/",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "root_ok",
      "module": "D:\\EcodiaOS\\systems\\simula\\service\\main.py"
    },
    {
      "method": "GET",
      "path": "/sim_health",
      "router_var": "router",
      "response_model": null,
      "status_code": null,
      "tags": null,
      "handler": "health",
      "module": "D:\\EcodiaOS\\systems\\simula\\service\\routers\\health.py"
    },
    {
      "method": "POST",
      "path": "/jobs/codegen",
      "router_var": "router",
      "response_model": "CodegenResponse",
      "status_code": null,
      "tags": null,
      "handler": "start_agent_job",
      "module": "D:\\EcodiaOS\\systems\\simula\\service\\routers\\jobs_codegen.py"
    }
  ],
  "modules": [
    {
      "path": "D:\\EcodiaOS\\app.py",
      "file_hash": "29e0d306d93cf0bf072bc91e10dd97827b010d1288b57e36e62c13f3c3c16f01",
      "functions": [
        {
          "name": "lifespan",
          "signature": {
            "name": "lifespan",
            "parameters": [
              {
                "name": "app",
                "annotation": "FastAPI",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "asynccontextmanager"
          ],
          "docstring": "Handles application startup and shutdown logic (COLD-START SAFE)."
        },
        {
          "name": "run_global_workspace_cycle",
          "signature": {
            "name": "run_global_workspace_cycle",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run_homeostasis_cycle",
          "signature": {
            "name": "run_homeostasis_cycle",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run_manifold_training_cycle",
          "signature": {
            "name": "run_manifold_training_cycle",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "immune_http_middleware",
          "signature": {
            "name": "immune_http_middleware",
            "parameters": [
              {
                "name": "request",
                "annotation": "Request",
                "default": null
              },
              {
                "name": "call_next",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "app.middleware('http')"
          ],
          "docstring": "Logs unhandled exceptions and 5xx errors to the Conflict graph (via event bus)."
        },
        {
          "name": "ping",
          "signature": {
            "name": "ping",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "app.get('/ping')"
          ],
          "docstring": null
        },
        {
          "name": "metrics",
          "signature": {
            "name": "metrics",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "app.get('/metrics')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\collate.py",
      "file_hash": "aa770249653619e006b9f1a56309fc3112f4eb3080d3f5233f541e63f009e7ce",
      "functions": [
        {
          "name": "collate_dir",
          "signature": {
            "name": "collate_dir",
            "parameters": [
              {
                "name": "base_dir",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "out",
                "annotation": null,
                "default": null
              },
              {
                "name": "exts",
                "annotation": null,
                "default": null
              },
              {
                "name": "ignore_dirs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\bstn.py",
      "file_hash": "532a55e888b5c69c21aa3180437444b8d7c377a4a1c9a59691ac0f1ad2d9979a",
      "functions": [
        {
          "name": "setup_schema",
          "signature": {
            "name": "setup_schema",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Applies all necessary constraints and indexes to the Neo4j database.\nThis script is idempotent and safe to run multiple times."
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\placeholder_find.py",
      "file_hash": "f76ebbdf113894b5d95491f62cae57eed40beb55217d125c675cc15e4c99814f",
      "functions": [
        {
          "name": "is_texty",
          "signature": {
            "name": "is_texty",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "iter_files",
          "signature": {
            "name": "iter_files",
            "parameters": [
              {
                "name": "root",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "Iterable[Path]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "read_text_safely",
          "signature": {
            "name": "read_text_safely",
            "parameters": [
              {
                "name": "p",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "find_matches",
          "signature": {
            "name": "find_matches",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "scan",
          "signature": {
            "name": "scan",
            "parameters": [
              {
                "name": "root",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "List[Tuple[Path, List[str]]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "weight",
          "signature": {
            "name": "weight",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "write_report",
          "signature": {
            "name": "write_report",
            "parameters": [
              {
                "name": "root",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "out_path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "hits",
                "annotation": "List[Tuple[Path, List[str]]]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\schema_collate.py",
      "file_hash": "19dc35158b0de3682bfbb836c6b55c870619f6a7c1b0c42e8bc526e1d5b4c25a",
      "functions": [
        {
          "name": "now_iso",
          "signature": {
            "name": "now_iso",
            "parameters": [],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "read_text",
          "signature": {
            "name": "read_text",
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "expr_to_str",
          "signature": {
            "name": "expr_to_str",
            "parameters": [
              {
                "name": "node",
                "annotation": "Optional[ast.AST]",
                "default": null
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "const_value",
          "signature": {
            "name": "const_value",
            "parameters": [
              {
                "name": "node",
                "annotation": "Optional[ast.AST]",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "hash_file",
          "signature": {
            "name": "hash_file",
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "is_pydantic_base",
          "signature": {
            "name": "is_pydantic_base",
            "parameters": [
              {
                "name": "bases",
                "annotation": "List[ast.expr]",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "is_dataclass",
          "signature": {
            "name": "is_dataclass",
            "parameters": [
              {
                "name": "decorators",
                "annotation": "List[ast.expr]",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "collect_class_fields",
          "signature": {
            "name": "collect_class_fields",
            "parameters": [
              {
                "name": "body",
                "annotation": "List[ast.stmt]",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "arg_to_dict",
          "signature": {
            "name": "arg_to_dict",
            "parameters": [
              {
                "name": "arg",
                "annotation": "ast.arg",
                "default": null
              },
              {
                "name": "default",
                "annotation": "Optional[ast.expr]",
                "default": null
              },
              {
                "name": "annotation",
                "annotation": "Optional[ast.expr]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "signature_of",
          "signature": {
            "name": "signature_of",
            "parameters": [
              {
                "name": "func",
                "annotation": "ast.FunctionDef | ast.AsyncFunctionDef",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "decorator_names",
          "signature": {
            "name": "decorator_names",
            "parameters": [
              {
                "name": "func",
                "annotation": "ast.FunctionDef | ast.AsyncFunctionDef",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "parse_endpoint_decorator",
          "signature": {
            "name": "parse_endpoint_decorator",
            "parameters": [
              {
                "name": "dec",
                "annotation": "ast.expr",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Recognize @router.get(\"/path\", response_model=Model, status_code=200, tags=[...])\nor @app.post(...), @something.patch(...). Returns a dict or None."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "module_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "visit_FunctionDef",
          "signature": {
            "name": "visit_FunctionDef",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "node",
                "annotation": "ast.FunctionDef",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "visit_AsyncFunctionDef",
          "signature": {
            "name": "visit_AsyncFunctionDef",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "node",
                "annotation": "ast.AsyncFunctionDef",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "visit_ClassDef",
          "signature": {
            "name": "visit_ClassDef",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "node",
                "annotation": "ast.ClassDef",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "scan_python_file",
          "signature": {
            "name": "scan_python_file",
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[ModuleInfo]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "walk_files",
          "signature": {
            "name": "walk_files",
            "parameters": [
              {
                "name": "root",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_ext",
                "annotation": "set[str]",
                "default": "DEFAULT_EXT"
              },
              {
                "name": "ignores",
                "annotation": "set[str]",
                "default": "DEFAULT_IGNORES"
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "build_json_report",
          "signature": {
            "name": "build_json_report",
            "parameters": [
              {
                "name": "root",
                "annotation": "str",
                "default": null
              },
              {
                "name": "modules",
                "annotation": "List[ModuleInfo]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "md_escape",
          "signature": {
            "name": "md_escape",
            "parameters": [
              {
                "name": "s",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "build_markdown",
          "signature": {
            "name": "build_markdown",
            "parameters": [
              {
                "name": "report",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "build_state",
          "signature": {
            "name": "build_state",
            "parameters": [
              {
                "name": "files",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "Dict[str, float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "diff_state",
          "signature": {
            "name": "diff_state",
            "parameters": [
              {
                "name": "old",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "root",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[bool, Dict[str, float], List[str]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run_scan",
          "signature": {
            "name": "run_scan",
            "parameters": [
              {
                "name": "root",
                "annotation": "str",
                "default": null
              },
              {
                "name": "out_dir",
                "annotation": "str",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "FunctionInfo",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "name",
              "type": "str",
              "default": null
            },
            {
              "name": "signature",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "decorators",
              "type": "List[str]",
              "default": null
            },
            {
              "name": "docstring",
              "type": "Optional[str]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "ClassInfo",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "name",
              "type": "str",
              "default": null
            },
            {
              "name": "bases",
              "type": "List[str]",
              "default": null
            },
            {
              "name": "decorators",
              "type": "List[str]",
              "default": null
            },
            {
              "name": "docstring",
              "type": "Optional[str]",
              "default": null
            },
            {
              "name": "methods",
              "type": "List[FunctionInfo]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "is_pydantic_model",
              "type": "bool",
              "default": "False"
            },
            {
              "name": "is_dataclass",
              "type": "bool",
              "default": "False"
            },
            {
              "name": "fields",
              "type": "List[Dict[str, Any]]",
              "default": "field(default_factory=list)"
            }
          ],
          "methods": []
        },
        {
          "name": "ModuleInfo",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "path",
              "type": "str",
              "default": null
            },
            {
              "name": "file_hash",
              "type": "str",
              "default": null
            },
            {
              "name": "functions",
              "type": "List[FunctionInfo]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "classes",
              "type": "List[ClassInfo]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "endpoints",
              "type": "List[Dict[str, Any]]",
              "default": "field(default_factory=list)"
            }
          ],
          "methods": []
        },
        {
          "name": "PyModuleScanner",
          "bases": [
            "ast.NodeVisitor"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "module_path",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "visit_FunctionDef",
              "signature": {
                "name": "visit_FunctionDef",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.FunctionDef",
                    "default": null
                  }
                ],
                "return": "Any"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "visit_AsyncFunctionDef",
              "signature": {
                "name": "visit_AsyncFunctionDef",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.AsyncFunctionDef",
                    "default": null
                  }
                ],
                "return": "Any"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "visit_ClassDef",
              "signature": {
                "name": "visit_ClassDef",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.ClassDef",
                    "default": null
                  }
                ],
                "return": "Any"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\api\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\app_health.py",
      "file_hash": "4018dafa74b13c2b3fdee4f9bf388aeadd78fb0329b21f6c401db076ffc3814c",
      "functions": [
        {
          "name": "health_neo",
          "signature": {
            "name": "health_neo",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "health_router.get('/neo')"
          ],
          "docstring": "Basic Neo4j liveness: runs a trivial query.\nUses driverless cypher_query() which resolves the AsyncDriver internally."
        },
        {
          "name": "health_vector",
          "signature": {
            "name": "health_vector",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "health_router.get('/vector')"
          ],
          "docstring": "Reports how many VECTOR indexes exist (Neo4j 5+).\nFalls back to CALL db.indexes() if SHOW INDEXES isn't available."
        },
        {
          "name": "health_root",
          "signature": {
            "name": "health_root",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "health_router.get('/')"
          ],
          "docstring": null
        },
        {
          "name": "health",
          "signature": {
            "name": "health",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "health_router.get('/health')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\origin.py",
      "file_hash": "3cb00ee1b0afb53e7aa156f46686e4fcdfa19bdf000bbebc6715783ae97f77c3",
      "functions": [
        {
          "name": "check_admin",
          "signature": {
            "name": "check_admin",
            "parameters": [
              {
                "name": "x_admin_token",
                "annotation": "Optional[str]",
                "default": "Header(None)"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_parse_tags",
          "signature": {
            "name": "_parse_tags",
            "parameters": [
              {
                "name": "raw",
                "annotation": "Optional[str]",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_startup",
          "signature": {
            "name": "_startup",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "router.on_event('startup')"
          ],
          "docstring": null
        },
        {
          "name": "post_node",
          "signature": {
            "name": "post_node",
            "parameters": [
              {
                "name": "payload",
                "annotation": "OriginIn",
                "default": null
              },
              {
                "name": "_",
                "annotation": "bool",
                "default": "Depends(check_admin)"
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/origin/node', response_model=OriginCreated)"
          ],
          "docstring": null
        },
        {
          "name": "post_search",
          "signature": {
            "name": "post_search",
            "parameters": [
              {
                "name": "payload",
                "annotation": "SearchIn",
                "default": null
              },
              {
                "name": "_",
                "annotation": "bool",
                "default": "Depends(check_admin)"
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/origin/search', response_model=Dict[str, List[SearchHit]])"
          ],
          "docstring": null
        },
        {
          "name": "post_edges",
          "signature": {
            "name": "post_edges",
            "parameters": [
              {
                "name": "payload",
                "annotation": "EdgeCreateIn",
                "default": null
              },
              {
                "name": "_",
                "annotation": "bool",
                "default": "Depends(check_admin)"
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/origin/edges')"
          ],
          "docstring": null
        },
        {
          "name": "post_batch_csv",
          "signature": {
            "name": "post_batch_csv",
            "parameters": [
              {
                "name": "payload",
                "annotation": "BatchCSVIn",
                "default": null
              },
              {
                "name": "_",
                "annotation": "bool",
                "default": "Depends(check_admin)"
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/origin/batch_csv')"
          ],
          "docstring": "CSV headers: title,summary,what,where,when,tags,edges,alias\n- alias is optional; use @alias:name in edges.to_id to reference nodes created in the same file."
        }
      ],
      "classes": [
        {
          "name": "OriginIn",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "title",
              "type": "str",
              "default": null
            },
            {
              "name": "summary",
              "type": "Optional[str]",
              "default": "''"
            },
            {
              "name": "what",
              "type": "str",
              "default": null
            },
            {
              "name": "where",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "when",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "tags",
              "type": "List[str]",
              "default": "Field(default_factory=list)"
            },
            {
              "name": "alias",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "OriginCreated",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "event_id",
              "type": "str",
              "default": null
            },
            {
              "name": "node_id",
              "type": "int",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "SearchIn",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "query",
              "type": "str",
              "default": null
            },
            {
              "name": "k",
              "type": "int",
              "default": "10"
            }
          ],
          "methods": []
        },
        {
          "name": "SearchHit",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "str",
              "default": null
            },
            {
              "name": "labels",
              "type": "List[str]",
              "default": null
            },
            {
              "name": "title",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "summary",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "score",
              "type": "Optional[float]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "EdgeIn",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "to_id",
              "type": "str",
              "default": null
            },
            {
              "name": "label",
              "type": "str",
              "default": null
            },
            {
              "name": "note",
              "type": "Optional[str]",
              "default": "''"
            }
          ],
          "methods": []
        },
        {
          "name": "EdgeCreateIn",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "from_id",
              "type": "str",
              "default": null
            },
            {
              "name": "edges",
              "type": "List[EdgeIn]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "BatchCSVIn",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "csv",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\evo\\__init__.py",
      "file_hash": "9c038c2bc87bd8175071581a6899044a5b127e66142824c558ce3a003f717f66",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\evo\\answers.py",
      "file_hash": "1ace43e99bd7a0d0051850d07a5c5d720a7a02c0d6683bae59e01a73451ebccb",
      "functions": [
        {
          "name": "submit_answer",
          "signature": {
            "name": "submit_answer",
            "parameters": [
              {
                "name": "data",
                "annotation": "AnswerSubmission",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "answers_router.post('/answers')"
          ],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "AnswerSubmission",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "soul_phrase",
              "type": "str",
              "default": null
            },
            {
              "name": "answer",
              "type": "str",
              "default": null
            },
            {
              "name": "question_event_id",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\evo\\questions.py",
      "file_hash": "b5beab2c0dbab68ab9bcabe64d1c5bcdf2afe59a163af51b47e06549d18f4847",
      "functions": [
        {
          "name": "_maybe_json_list",
          "signature": {
            "name": "_maybe_json_list",
            "parameters": [
              {
                "name": "v",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_recent_evo_questions",
          "signature": {
            "name": "get_recent_evo_questions",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "questions_router.get('/questions')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\evo\\patrol.py",
      "file_hash": "eeeff65fe926cb8dae28227ec763e698b6635dba33514540659b21bd6258c6aa",
      "functions": [
        {
          "name": "trigger_evo_patrol",
          "signature": {
            "name": "trigger_evo_patrol",
            "parameters": [
              {
                "name": "conflict_data",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "background_tasks",
                "annotation": "BackgroundTasks",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "patrol_router.post('/trigger', summary=\"Trigger Evo's evolution process from a new conflict\", status_code=202)"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\unity\\__init__.py",
      "file_hash": "0eac21dd6fb2f07c7fefcc2ff716b967165477455cf8a3c59e85f8167743b50c",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\unity\\deliberate.py",
      "file_hash": "898e9338fa2421e006e1e0c7bc1ae0f2fa6f1a2c575358677fb2ad0e1a195a2c",
      "functions": [
        {
          "name": "get_deliberation_manager",
          "signature": {
            "name": "get_deliberation_manager",
            "parameters": [],
            "return": "DeliberationManager"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_to_dict",
          "signature": {
            "name": "_to_dict",
            "parameters": [
              {
                "name": "model",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_env_timeout_seconds",
          "signature": {
            "name": "_env_timeout_seconds",
            "parameters": [],
            "return": "Optional[float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_audit_start",
          "signature": {
            "name": "_audit_start",
            "parameters": [
              {
                "name": "spec",
                "annotation": "DeliberationSpec",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_audit_complete",
          "signature": {
            "name": "_audit_complete",
            "parameters": [
              {
                "name": "session_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "result",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_audit_failed",
          "signature": {
            "name": "_audit_failed",
            "parameters": [
              {
                "name": "session_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "err",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "start_deliberation",
          "signature": {
            "name": "start_deliberation",
            "parameters": [
              {
                "name": "spec",
                "annotation": "DeliberationSpec",
                "default": null
              },
              {
                "name": "manager",
                "annotation": "DeliberationManager",
                "default": "Depends(get_deliberation_manager)"
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/deliberate', response_model=DeliberationResponse)"
          ],
          "docstring": "Initiates and completes a full, synchronous deliberation session based on the provided specification.\nPersists an audit trail and emits lifecycle events."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\voxis\\__init__.py",
      "file_hash": "77e7f5b525a1691d1441e1a4d18e94f1d9b1834513cefc501b8d73bb58baf129",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\voxis\\generate_phrase.py",
      "file_hash": "d6a03c0b4172b3f2713c13ae263a9e4bfad2e0e83d5371b62a6a2fa762ec054a",
      "functions": [
        {
          "name": "_word_tokens",
          "signature": {
            "name": "_word_tokens",
            "parameters": [
              {
                "name": "s",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_six_word_score",
          "signature": {
            "name": "_six_word_score",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_punctuation_ok",
          "signature": {
            "name": "_punctuation_ok",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_overlap_ratio",
          "signature": {
            "name": "_overlap_ratio",
            "parameters": [
              {
                "name": "phrase",
                "annotation": "str",
                "default": null
              },
              {
                "name": "inputs",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "generate_phrase",
          "signature": {
            "name": "generate_phrase",
            "parameters": [
              {
                "name": "request",
                "annotation": "Request",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/generate_phrase')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\voxis\\interface_mood.py",
      "file_hash": "f2ad98dc2d77a338e2e38782e3fd573d9ec48f36d109161ca7ebfab31a7afc28",
      "functions": [
        {
          "name": "get_latest_interface_mood",
          "signature": {
            "name": "get_latest_interface_mood",
            "parameters": [],
            "return": "Dict[str, Any]"
          },
          "decorators": [
            "router.get('/interface_mood')"
          ],
          "docstring": "Returns the most recent global InterfaceMood node (not user-specific).\nDriverless Neo4j via cypher_query; no direct driver/session usage."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\voxis\\match_phrase.py",
      "file_hash": "dddc116fdfe07c8b1e3ac0eb69f82ca7ac0817d469d85ed6c6f2a34cba8016d4",
      "functions": [
        {
          "name": "match_phrase",
          "signature": {
            "name": "match_phrase",
            "parameters": [
              {
                "name": "request",
                "annotation": "Request",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/match_phrase')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\voxis\\talk.py",
      "file_hash": "cf6afd9faebaa9662588a054bab18a5d1ca0b2476746294490f3e1b614ad95f9",
      "functions": [
        {
          "name": "voxis_chat",
          "signature": {
            "name": "voxis_chat",
            "parameters": [
              {
                "name": "req",
                "annotation": "VoxisTalkRequest",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [
            "router.post('/talk')"
          ],
          "docstring": "Accepts a Voxis user utterance, runs the Voxis pipeline, and forwards a canonical\nevent to Atune for salience analysis (which may internally escalate to Unity)."
        }
      ],
      "classes": [
        {
          "name": "VoxisTalkRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "user_input",
              "type": "str",
              "default": null
            },
            {
              "name": "user_id",
              "type": "str",
              "default": null
            },
            {
              "name": "phrase_event_id",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\__init__.py",
      "file_hash": "9ffc6ffd308d94b32ec81bcb570fb46e1abf41e9d7816b14b4141971023742c6",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\tools.py",
      "file_hash": "8818490462ff7d03b240ad9ff337ee6ebff458fde1a6982585ec0c15a390ecc2",
      "functions": [
        {
          "name": "list_tools",
          "signature": {
            "name": "list_tools",
            "parameters": [],
            "return": "Dict[str, str]"
          },
          "decorators": [
            "tools_router.get('/')"
          ],
          "docstring": "(Placeholder) In the future, this endpoint can be used to query the\nArmRegistry for a list of all available tools and their metadata."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\registry.py",
      "file_hash": "1521490a4633129d6eac9a62acc459d5c3a207e358379b4a1c537f870a3a6054",
      "functions": [
        {
          "name": "reload_arm_registry",
          "signature": {
            "name": "reload_arm_registry",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "registry_router.post('/reload', status_code=202)"
          ],
          "docstring": "Triggers a full reload of the PolicyArm cache from the Neo4j graph.\nThis endpoint is called by other systems, like Simula, after they have\ncreated a new capability, ensuring the Metacognitive Kernel can\nimmediately begin using the new tool."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\main.py",
      "file_hash": "c2db17fc0b98055a6450a158f8834e03008d7c8bf437a1665a52231d58cd22bb",
      "functions": [
        {
          "name": "_j",
          "signature": {
            "name": "_j",
            "parameters": [
              {
                "name": "x",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Compact JSON string — avoids Neo4j MAP property writes."
        },
        {
          "name": "_theta_for_arm",
          "signature": {
            "name": "_theta_for_arm",
            "parameters": [
              {
                "name": "arm_id",
                "annotation": "Optional[str]",
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Retrieve posterior mean theta for an arm if available; otherwise return a zero vector\nof the correct dimension. This keeps explanations concrete without failing."
        },
        {
          "name": "_map_budget_to_limits",
          "signature": {
            "name": "_map_budget_to_limits",
            "parameters": [
              {
                "name": "tokens",
                "annotation": "int",
                "default": null
              },
              {
                "name": "cost_units",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "BudgetResponse"
          },
          "decorators": [],
          "docstring": "Convert MetaController budget into API limits."
        },
        {
          "name": "_persist_episode_json_safe",
          "signature": {
            "name": "_persist_episode_json_safe",
            "parameters": [
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "chosen_arm_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "context_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "audit_trace_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Write a minimal Episode directly with JSON-string fields.\nReturns a generated episode_id. NEVER raises."
        },
        {
          "name": "select_arm",
          "signature": {
            "name": "select_arm",
            "parameters": [
              {
                "name": "req",
                "annotation": "SelectArmRequest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "main_router.post('/tasks/select_arm', response_model=SelectArmResponse)"
          ],
          "docstring": "Orchestrates the full cognitive loop to select the best single action or\ninitiate a multi-step skill for a given task. Hardened: never fails due to\ngraph map-property writes; has safe fallbacks at each stage."
        },
        {
          "name": "continue_option",
          "signature": {
            "name": "continue_option",
            "parameters": [
              {
                "name": "req",
                "annotation": "ContinueRequest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "main_router.post('/tasks/continue_option', response_model=ContinueResponse)"
          ],
          "docstring": "Continues the execution of a multi-step skill (Option)."
        },
        {
          "name": "repair_skill_step",
          "signature": {
            "name": "repair_skill_step",
            "parameters": [
              {
                "name": "req",
                "annotation": "RepairRequest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "main_router.post('/tasks/repair_skill_step', response_model=RepairResponse)"
          ],
          "docstring": "Generates a targeted, one-shot repair action for a failed step in a skill."
        },
        {
          "name": "get_budget",
          "signature": {
            "name": "get_budget",
            "parameters": [
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "main_router.get('/tasks/{task_key}/budget', response_model=BudgetResponse)"
          ],
          "docstring": "Returns a resource budget for a task."
        },
        {
          "name": "log_outcome",
          "signature": {
            "name": "log_outcome",
            "parameters": [
              {
                "name": "req",
                "annotation": "LogOutcomeRequest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "main_router.post('/ingest/outcome', response_model=LogOutcomeResponse)"
          ],
          "docstring": "Logs the final outcome of an episode and updates all relevant learning systems."
        },
        {
          "name": "ingest_preference",
          "signature": {
            "name": "ingest_preference",
            "parameters": [
              {
                "name": "req",
                "annotation": "PreferenceIngest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "main_router.post('/ingest/preference')"
          ],
          "docstring": "Ingests a pairwise preference (winner over loser), persists it, and emits an event.\nThis is concrete and auditable; a separate trainer can fit Bradley–Terry on this data."
        },
        {
          "name": "reload_arm_registry",
          "signature": {
            "name": "reload_arm_registry",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "main_router.post('/registry/reload', status_code=202)"
          ],
          "docstring": "Triggers a full reload of the PolicyArm cache from the graph."
        },
        {
          "name": "read_root",
          "signature": {
            "name": "read_root",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "main_router.get('/', tags=['Root'])"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\ingest.py",
      "file_hash": "8e216cce739d8570692c030fed56ae5781d37146e5914ec462ac9f13b6a5cf77",
      "functions": [
        {
          "name": "log_outcome",
          "signature": {
            "name": "log_outcome",
            "parameters": [
              {
                "name": "req",
                "annotation": "LogOutcomeRequest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "ingest_router.post('/outcome', response_model=LogOutcomeResponse)"
          ],
          "docstring": "Logs the final outcome of an episode and updates all relevant learning systems."
        },
        {
          "name": "ingest_preference",
          "signature": {
            "name": "ingest_preference",
            "parameters": [
              {
                "name": "req",
                "annotation": "PreferenceIngest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "ingest_router.post('/preference')"
          ],
          "docstring": "(STUB) Ingests a pairwise preference from a human or agent."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\tasks.py",
      "file_hash": "0fd9884927d0fb6601962a9661945ebb7dfddaf19c066beb033ff08ad9701c92",
      "functions": [
        {
          "name": "_is_no_arms_err",
          "signature": {
            "name": "_is_no_arms_err",
            "parameters": [
              {
                "name": "e",
                "annotation": "Exception",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_j",
          "signature": {
            "name": "_j",
            "parameters": [
              {
                "name": "x",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Compact JSON (string) to avoid Neo map-property writes."
        },
        {
          "name": "_persist_episode_json_safe",
          "signature": {
            "name": "_persist_episode_json_safe",
            "parameters": [
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "chosen_arm_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "context_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "audit_trace_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Write a minimal Episode directly with JSON-string fields.\nReturns a generated episode_id. NEVER raises."
        },
        {
          "name": "select_arm",
          "signature": {
            "name": "select_arm",
            "parameters": [
              {
                "name": "req",
                "annotation": "SelectArmRequest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "task_router.post('/select_arm', response_model=SelectArmResponse)"
          ],
          "docstring": null
        },
        {
          "name": "get_budget",
          "signature": {
            "name": "get_budget",
            "parameters": [
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "task_router.get('/{task_key}/budget', response_model=BudgetResponse)"
          ],
          "docstring": null
        },
        {
          "name": "repair_skill_step",
          "signature": {
            "name": "repair_skill_step",
            "parameters": [
              {
                "name": "req",
                "annotation": "RepairRequest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "task_router.post('/repair_skill_step', response_model=RepairResponse)"
          ],
          "docstring": "Generates a targeted, one-shot repair action for a failed step in a skill."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\dashboard_api.py",
      "file_hash": "2a0a25ecdfa7546c0f302d6714d41ce235354849ee6d622e53469d72945446f2",
      "functions": [
        {
          "name": "get_stats",
          "signature": {
            "name": "get_stats",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "dashboard_router.get('/global_stats', response_model=GlobalStats)"
          ],
          "docstring": "Returns high-level aggregate statistics about the system's health."
        },
        {
          "name": "get_qd_coverage",
          "signature": {
            "name": "get_qd_coverage",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "dashboard_router.get('/qd_coverage', response_model=QDCoverage)"
          ],
          "docstring": "Returns the current state of the Quality-Diversity archive."
        },
        {
          "name": "get_roi_trends",
          "signature": {
            "name": "get_roi_trends",
            "parameters": [
              {
                "name": "days",
                "annotation": "int",
                "default": "Query(30, ge=1, le=365, description='Lookback window (days)')"
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": "Query(3, ge=1, le=10, description='Series per bucket (top & bottom)')"
              },
              {
                "name": "rank_window_days",
                "annotation": "int",
                "default": "Query(7, ge=1, le=90, description='Ranking window for top/bottom selection')"
              }
            ],
            "return": null
          },
          "decorators": [
            "dashboard_router.get('/roi_trends', response_model=ROITrends)"
          ],
          "docstring": "Returns time-series ROI data for top and bottom performing arms.\n\n- Pulls per-day average ROI per arm across the `days` lookback.\n- Ranks arms by average ROI over the most recent `rank_window_days`.\n- Returns `top_k` series for the best and worst arms, with daily points."
        },
        {
          "name": "pack",
          "signature": {
            "name": "pack",
            "parameters": [
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_episode",
          "signature": {
            "name": "get_episode",
            "parameters": [
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "dashboard_router.get('/episode/{episode_id}', response_model=EpisodeTrace)"
          ],
          "docstring": "Retrieves the full, detailed trace for a single decision episode."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\governor.py",
      "file_hash": "a955c6ed82be52f9802c7bb773346c9ca51ec907f098057e64c07c2951a25e8a",
      "functions": [
        {
          "name": "_to_dict",
          "signature": {
            "name": "_to_dict",
            "parameters": [
              {
                "name": "model",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_proposal_id",
          "signature": {
            "name": "_proposal_id",
            "parameters": [
              {
                "name": "payload",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "submit_proposal",
          "signature": {
            "name": "submit_proposal",
            "parameters": [
              {
                "name": "proposal",
                "annotation": "PatchProposal",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "governor_router.post('/submit_proposal', status_code=202)"
          ],
          "docstring": "Accept a self-upgrade proposal and submit it to the Governor's verification gauntlet.\nEmits a receipt event and persists an audit record before verification."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\listener.py",
      "file_hash": "b389981cb635775db910a3245af2da1aeb37b2e6886f68d7a4ae839778dbb7b5",
      "functions": [
        {
          "name": "_run",
          "signature": {
            "name": "_run",
            "parameters": [
              {
                "name": "cmd",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "cwd",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_apply_patch_to_worktree",
          "signature": {
            "name": "_apply_patch_to_worktree",
            "parameters": [
              {
                "name": "diff_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "branch_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "on_governor_upgrade_approved",
          "signature": {
            "name": "on_governor_upgrade_approved",
            "parameters": [
              {
                "name": "data",
                "annotation": "Dict[str, Any]",
                "default": "Body(...)"
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/listener/governor/upgrade/approved')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synapse\\ui_api.py",
      "file_hash": "716fce83ee153dfbf83848e19c9a8584b01e87c1a281b25c63cc2e969f4fffb1",
      "functions": [
        {
          "name": "get_comparison_pair",
          "signature": {
            "name": "get_comparison_pair",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "router.get('/get_comparison_pair', response_model=ComparisonPairResponse)"
          ],
          "docstring": "Fetches two recent, comparable episodes that have not yet been compared."
        },
        {
          "name": "to_summary",
          "signature": {
            "name": "to_summary",
            "parameters": [
              {
                "name": "ep_data",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "EpisodeSummary"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "submit_preference",
          "signature": {
            "name": "submit_preference",
            "parameters": [
              {
                "name": "req",
                "annotation": "SubmitPreferenceRequest",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/submit_preference')"
          ],
          "docstring": "Ingests a human preference, creating a Preference node in the graph."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synk\\switchboard.py",
      "file_hash": "ab4cc82dee72712b09cee50db1a4ea0d9945b22cb7e5b357ac63bddb1c87495f",
      "functions": [
        {
          "name": "_to_json",
          "signature": {
            "name": "_to_json",
            "parameters": [
              {
                "name": "value",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_from_json",
          "signature": {
            "name": "_from_json",
            "parameters": [
              {
                "name": "s",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_now_ms",
          "signature": {
            "name": "_now_ms",
            "parameters": [],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_actor_identity",
          "signature": {
            "name": "_actor_identity",
            "parameters": [],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "list_flags",
          "signature": {
            "name": "list_flags",
            "parameters": [
              {
                "name": "prefix",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [
            "router.get('/flags', response_model=List[FlagOut])"
          ],
          "docstring": null
        },
        {
          "name": "get_flag",
          "signature": {
            "name": "get_flag",
            "parameters": [
              {
                "name": "key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "router.get('/flags/{key}', response_model=FlagOut)"
          ],
          "docstring": null
        },
        {
          "name": "set_flag",
          "signature": {
            "name": "set_flag",
            "parameters": [
              {
                "name": "body",
                "annotation": "FlagUpsert",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "router.put('/flags', response_model=FlagOut)"
          ],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "FlagUpsert",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "key",
              "type": "str",
              "default": null
            },
            {
              "name": "type",
              "type": "str",
              "default": null
            },
            {
              "name": "value",
              "type": "Any",
              "default": null
            },
            {
              "name": "reason",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "description",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "component",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "FlagOut",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "key",
              "type": "str",
              "default": null
            },
            {
              "name": "type",
              "type": "str",
              "default": "'json'"
            },
            {
              "name": "value",
              "type": "Any",
              "default": null
            },
            {
              "name": "updated_at",
              "type": "int",
              "default": null
            },
            {
              "name": "description",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\synk\\__init__.py",
      "file_hash": "9057b43168cce4a33a5cd6d3126fe9a47763e243f07cccaa8319285a2873034d",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\equor\\__init__.py",
      "file_hash": "189f41a1cd1e4568cebc21cb28f8f0f5ef12cbf976b81fa1615661c1240c858f",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\equor\\compose.py",
      "file_hash": "c2041e49fa15f35400ed76eeee27ddde0ba123aa171222f2f4d208a508549204",
      "functions": [
        {
          "name": "get_synapse_client",
          "signature": {
            "name": "get_synapse_client",
            "parameters": [],
            "return": "SynapseClient"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_composer",
          "signature": {
            "name": "get_composer",
            "parameters": [],
            "return": "PromptComposer"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_persist_episode_if_missing",
          "signature": {
            "name": "_persist_episode_if_missing",
            "parameters": [
              {
                "name": "req",
                "annotation": "ComposeRequest",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Ensure a concrete Episode exists in the graph and return its ID.\nIf request contains an episode_id, it is verified/created idempotently."
        },
        {
          "name": "_persist_rcu_snapshot_and_link",
          "signature": {
            "name": "_persist_rcu_snapshot_and_link",
            "parameters": [
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "snap",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Persist the RCU snapshot as a node linked to the episode. Returns a stable rcu_ref.\nrcu_ref is a deterministic hash of the snapshot content for replayability."
        },
        {
          "name": "compose_prompt_patch",
          "signature": {
            "name": "compose_prompt_patch",
            "parameters": [
              {
                "name": "request",
                "annotation": "ComposeRequest",
                "default": null
              },
              {
                "name": "composer",
                "annotation": "PromptComposer",
                "default": "Depends(get_composer)"
              },
              {
                "name": "synapse",
                "annotation": "SynapseClient",
                "default": "Depends(get_synapse_client)"
              }
            ],
            "return": null
          },
          "decorators": [
            "compose_router.post('/compose', response_model=ComposeResponse)"
          ],
          "docstring": "Compose a deterministic prompt patch:\n  - Guarantees an Episode exists and is linked to an RCU snapshot.\n  - Delegates composition to the PromptComposer with explicit rcu_ref and episode_id.\n  - Persists the resulting artifact to the graph."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\equor\\attest.py",
      "file_hash": "d9178560fff550ba755470e4b519e394cff873647d349623b126984295673ed9",
      "functions": [
        {
          "name": "receive_attestation",
          "signature": {
            "name": "receive_attestation",
            "parameters": [
              {
                "name": "attestation",
                "annotation": "Attestation",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "attest_router.post('/attest', status_code=202)"
          ],
          "docstring": "Receives an attestation from an agent, calculates coverage metrics,\nand persists it to the graph."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\equor\\drift.py",
      "file_hash": "53e3bdeade767322d2bf89d9dafe267e491c3de2520396245e9cf74e1798c599",
      "functions": [
        {
          "name": "get_drift_report",
          "signature": {
            "name": "get_drift_report",
            "parameters": [
              {
                "name": "agent_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "drift_router.get('/drift/{agent_name}', response_model=DriftReport)"
          ],
          "docstring": "Retrieves the latest homeostasis and drift report for a specific agent."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\equor\\declare.py",
      "file_hash": "cd1303f4909dbd5f35390860b82fad45817e62530165311709b48a7c71f20f5b",
      "functions": [
        {
          "name": "_lookup_actor",
          "signature": {
            "name": "_lookup_actor",
            "parameters": [
              {
                "name": "id_or_email",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[dict]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_sha256_hex",
          "signature": {
            "name": "_sha256_hex",
            "parameters": [
              {
                "name": "s",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_governance_permission",
          "signature": {
            "name": "get_governance_permission",
            "parameters": [
              {
                "name": "request",
                "annotation": "Request",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Authorizes governance actions via either:\n  1) Actor identity + token matched in graph, with :HAS_ROLE(:Role{name:'governance'})\n     Headers:\n       - X-Ecodia-Actor: <actor id or email>\n       - X-Actor-Token: <opaque secret issued to this actor>\n  2) Bootstrap token (env) for controlled automation:\n       - Header: X-Governance-Token\n       - Env: ECODIA_GOVERNANCE_BOOT_TOKEN (sha256 compared)\nRaises HTTPException on failure."
        },
        {
          "name": "declare_identity",
          "signature": {
            "name": "declare_identity",
            "parameters": [
              {
                "name": "items",
                "annotation": "List[Facet | Profile]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "declare_router.post('/identity/declare', status_code=202, dependencies=[route_gate('equor.identity.declare.enabled', True), Depends(get_governance_permission)], summary='Declare or update an Identity Facet or Profile (Gated)')"
          ],
          "docstring": "Declares new versions of Identity Facets or Profiles.\nCreates versioned nodes (no in-place edits) and emits an event."
        },
        {
          "name": "update_constitution",
          "signature": {
            "name": "update_constitution",
            "parameters": [
              {
                "name": "rules",
                "annotation": "List[ConstitutionRule]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "declare_router.post('/constitution/update', status_code=202, dependencies=[route_gate('equor.constitution.update.enabled', True), Depends(get_governance_permission)], summary='Update the Constitution with new Rules (Gated)')"
          ],
          "docstring": "Adds new versions of constitutional rules and maintains\nSUPERSEDES / CONFLICTS_WITH relationships for coherence and auditability."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\equor\\invariants.py",
      "file_hash": "49f65d05e928976c77989f873b28f505eb6eb77ed2f982542061b536b45ed8e7",
      "functions": [
        {
          "name": "run_system_audit",
          "signature": {
            "name": "run_system_audit",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "invariants_router.post('/audit/invariants', response_model=List[InvariantCheckResult], dependencies=[route_gate('equor.audit.invariants.enabled', True)], summary='Run a full audit of all cross-system invariants (Gated)')"
          ],
          "docstring": "(Gated) Triggers a comprehensive audit of the EcodiaOS identity and\ngovernance graph against a set of predefined, high-level invariants."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\llm\\call.py",
      "file_hash": "0b2bfb8300ef15347c9fcb84085abf31e16b2ad2431d8cd6033680a2f2824889",
      "functions": [
        {
          "name": "call_llm_endpoint",
          "signature": {
            "name": "call_llm_endpoint",
            "parameters": [
              {
                "name": "response",
                "annotation": "Response",
                "default": null
              },
              {
                "name": "request",
                "annotation": "LlmCallRequest",
                "default": "Body(...)"
              }
            ],
            "return": null
          },
          "decorators": [
            "call_router.post('/call', response_model=LlmCallResponse, summary='Centralized and Synapse-Governed LLM Gateway')"
          ],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "TaskContext",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "scope",
              "type": "str",
              "default": "Field('generic_llm_call', example='code_review:python')"
            },
            {
              "name": "risk",
              "type": "Literal['low', 'medium', 'high']",
              "default": "Field('low')"
            },
            {
              "name": "budget",
              "type": "Literal['constrained', 'normal', 'extended']",
              "default": "Field('normal')"
            },
            {
              "name": "purpose",
              "type": "Optional[str]",
              "default": "Field(None, example='Refactor the user service.')"
            }
          ],
          "methods": []
        },
        {
          "name": "ProviderOverrides",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "json_mode",
              "type": "bool",
              "default": "Field(False)"
            }
          ],
          "methods": []
        },
        {
          "name": "LlmCallRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "agent_name",
              "type": "str",
              "default": "Field(..., example='Simula')"
            },
            {
              "name": "messages",
              "type": "List[Dict[str, str]]",
              "default": "Field(..., example=[{'role': 'user', 'content': 'Hello!'}])"
            },
            {
              "name": "task_context",
              "type": "TaskContext",
              "default": "Field(default_factory=TaskContext)"
            },
            {
              "name": "provider_overrides",
              "type": "ProviderOverrides",
              "default": "Field(default_factory=ProviderOverrides)"
            }
          ],
          "methods": []
        },
        {
          "name": "UsageDetails",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Represents the new nested token details from OpenAI.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "cached_tokens",
              "type": "Optional[int]",
              "default": "0"
            },
            {
              "name": "audio_tokens",
              "type": "Optional[int]",
              "default": "0"
            },
            {
              "name": "reasoning_tokens",
              "type": "Optional[int]",
              "default": "0"
            },
            {
              "name": "accepted_prediction_tokens",
              "type": "Optional[int]",
              "default": "0"
            },
            {
              "name": "rejected_prediction_tokens",
              "type": "Optional[int]",
              "default": "0"
            }
          ],
          "methods": []
        },
        {
          "name": "Usage",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Represents the modernized 'usage' object from OpenAI.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "prompt_tokens",
              "type": "int",
              "default": null
            },
            {
              "name": "completion_tokens",
              "type": "int",
              "default": null
            },
            {
              "name": "total_tokens",
              "type": "int",
              "default": null
            },
            {
              "name": "prompt_tokens_details",
              "type": "Optional[UsageDetails]",
              "default": "None"
            },
            {
              "name": "completion_tokens_details",
              "type": "Optional[UsageDetails]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "LlmCallResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The standardized success response object for any LLM call.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "text",
              "type": "Optional[str]",
              "default": null
            },
            {
              "name": "json",
              "type": "Optional[Any]",
              "default": null
            },
            {
              "name": "call_id",
              "type": "str",
              "default": null
            },
            {
              "name": "usage",
              "type": "Optional[Usage]",
              "default": null
            },
            {
              "name": "policy_used",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "timing_ms",
              "type": "Dict[str, Optional[int]]",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\llm\\__init__.py",
      "file_hash": "1b31e35399e118e9e8daab5f8084b8715c36225812e99357ae6af2986ce72981",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\axon\\__init__.py",
      "file_hash": "2a36e66b8f6dddf34296debec79bca181f1ed0119e79e5bbbb11e62143614d31",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\axon\\api.py",
      "file_hash": "663c15eded3d0fb008d16933c1418152e5cb93cd482b2b4211758e59cb5a8d54",
      "functions": [
        {
          "name": "receive_raw_event",
          "signature": {
            "name": "receive_raw_event",
            "parameters": [
              {
                "name": "request",
                "annotation": "Request",
                "default": null
              },
              {
                "name": "authorization",
                "annotation": "str",
                "default": "Header(None)"
              }
            ],
            "return": null
          },
          "decorators": [
            "api_router.post('/receive')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\qora\\__init__.py",
      "file_hash": "33f78c2427130d802090e35f9a9099818b62ead650f5dd732cf86ead49996904",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\qora\\arch.py",
      "file_hash": "7791547c9a5d89c62f80885da7c8536a7a2b581df6d741c80361dbb98191800f",
      "functions": [
        {
          "name": "auth",
          "signature": {
            "name": "auth",
            "parameters": [
              {
                "name": "request",
                "annotation": "Request",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_check_policy",
          "signature": {
            "name": "_check_policy",
            "parameters": [
              {
                "name": "uid",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Enforce graph-side policy. Refuse execution unless allow_external=true."
        },
        {
          "name": "search_tools",
          "signature": {
            "name": "search_tools",
            "parameters": [
              {
                "name": "body",
                "annotation": "SearchReq",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "arch_router.post('/search', response_model=List[FunctionLite], dependencies=[Depends(auth)])"
          ],
          "docstring": null
        },
        {
          "name": "schema",
          "signature": {
            "name": "schema",
            "parameters": [
              {
                "name": "uid",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "arch_router.get('/schema/{uid}', response_model=SchemaResp, dependencies=[Depends(auth)])"
          ],
          "docstring": null
        },
        {
          "name": "execute_by_uid_api",
          "signature": {
            "name": "execute_by_uid_api",
            "parameters": [
              {
                "name": "body",
                "annotation": "ExecByUidReq",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "arch_router.post('/execute-by-uid', response_model=ExecResp, dependencies=[Depends(auth)])"
          ],
          "docstring": null
        },
        {
          "name": "execute_by_query_api",
          "signature": {
            "name": "execute_by_query_api",
            "parameters": [
              {
                "name": "body",
                "annotation": "ExecByQueryReq",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "arch_router.post('/execute-by-query', response_model=ExecByQueryResp, dependencies=[Depends(auth)])"
          ],
          "docstring": null
        },
        {
          "name": "healthz",
          "signature": {
            "name": "healthz",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "arch_router.get('/health')"
          ],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "FunctionLite",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "uid",
              "type": "str",
              "default": null
            },
            {
              "name": "qualname",
              "type": "str",
              "default": null
            },
            {
              "name": "file_path",
              "type": "str",
              "default": null
            },
            {
              "name": "signature",
              "type": "str",
              "default": null
            },
            {
              "name": "docstring",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "safety_tier",
              "type": "Optional[int]",
              "default": "None"
            },
            {
              "name": "allow_external",
              "type": "Optional[bool]",
              "default": "None"
            },
            {
              "name": "system",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "SearchReq",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "query",
              "type": "str",
              "default": "Field(..., min_length=2)"
            },
            {
              "name": "top_k",
              "type": "Annotated[int, Field(ge=1, le=20)]",
              "default": "5"
            },
            {
              "name": "system",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "safety_max",
              "type": "Optional[int]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "ExecByUidReq",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "uid",
              "type": "str",
              "default": null
            },
            {
              "name": "args",
              "type": "Dict[str, Any]",
              "default": "Field(default_factory=dict)"
            },
            {
              "name": "caller",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "log",
              "type": "bool",
              "default": "True"
            },
            {
              "name": "repo_root",
              "type": "Optional[str]",
              "default": "Field(default=DEFAULT_REPO_ROOT)"
            }
          ],
          "methods": []
        },
        {
          "name": "ExecResp",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "request_id",
              "type": "str",
              "default": null
            },
            {
              "name": "uid",
              "type": "str",
              "default": null
            },
            {
              "name": "ok",
              "type": "bool",
              "default": null
            },
            {
              "name": "result",
              "type": "Any",
              "default": "None"
            },
            {
              "name": "error",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "duration_ms",
              "type": "int",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "ExecByQueryReq",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "query",
              "type": "str",
              "default": null
            },
            {
              "name": "args",
              "type": "Dict[str, Any]",
              "default": "Field(default_factory=dict)"
            },
            {
              "name": "caller",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "log",
              "type": "bool",
              "default": "True"
            },
            {
              "name": "repo_root",
              "type": "Optional[str]",
              "default": "Field(default=DEFAULT_REPO_ROOT)"
            },
            {
              "name": "safety_max",
              "type": "Optional[int]",
              "default": "None"
            },
            {
              "name": "system",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "top_k",
              "type": "Annotated[int, Field(ge=1, le=10)]",
              "default": "3"
            }
          ],
          "methods": []
        },
        {
          "name": "ExecByQueryResp",
          "bases": [
            "ExecResp"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "chosen_uid",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "candidates",
              "type": "List[FunctionLite]",
              "default": "Field(default_factory=list)"
            }
          ],
          "methods": []
        },
        {
          "name": "SchemaResp",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "uid",
              "type": "str",
              "default": null
            },
            {
              "name": "parameters_schema",
              "type": "Optional[Dict[str, Any]]",
              "default": "None"
            },
            {
              "name": "returns_schema",
              "type": "Optional[Dict[str, Any]]",
              "default": "None"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\simula\\replay.py",
      "file_hash": "cf9b4a9ecfe79c65778830c84081857a6b4ea53f65b036c15b3f98f975fcc79e",
      "functions": [
        {
          "name": "_run",
          "signature": {
            "name": "_run",
            "parameters": [
              {
                "name": "cmd",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "cwd",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "subprocess.CompletedProcess"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "historical_replay",
          "signature": {
            "name": "historical_replay",
            "parameters": [
              {
                "name": "payload",
                "annotation": "Dict[str, Any]",
                "default": "Body(...)"
              }
            ],
            "return": null
          },
          "decorators": [
            "router.post('/historical-replay')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\atune\\route_event.py",
      "file_hash": "5d35659064210834bf58c918c13f1b84d8f00fc74b9a9c5760f52aea7db34993",
      "functions": [
        {
          "name": "_check_auth",
          "signature": {
            "name": "_check_auth",
            "parameters": [
              {
                "name": "request",
                "annotation": "Request",
                "default": null
              },
              {
                "name": "authorization",
                "annotation": "Optional[str]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "health",
          "signature": {
            "name": "health",
            "parameters": [],
            "return": "Dict[str, str]"
          },
          "decorators": [
            "route_router.get('/health')"
          ],
          "docstring": null
        },
        {
          "name": "route_event",
          "signature": {
            "name": "route_event",
            "parameters": [
              {
                "name": "payload",
                "annotation": "CanonicalEvent",
                "default": null
              },
              {
                "name": "request",
                "annotation": "Request",
                "default": null
              },
              {
                "name": "authorization",
                "annotation": "Optional[str]",
                "default": "Header(None)"
              }
            ],
            "return": null
          },
          "decorators": [
            "route_router.post('/route', response_model=AtuneRouteResult)"
          ],
          "docstring": "Accepts a canonical event and runs Atune routing + optional Unity deliberation."
        }
      ],
      "classes": [
        {
          "name": "CanonicalEvent",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "event_id",
              "type": "NonEmptyStr",
              "default": null
            },
            {
              "name": "event_type",
              "type": "NonEmptyStr",
              "default": null
            },
            {
              "name": "source",
              "type": "NonEmptyStr",
              "default": null
            },
            {
              "name": "timestamp",
              "type": "NonEmptyStr",
              "default": null
            },
            {
              "name": "text_blocks",
              "type": "List[str]",
              "default": "Field(default_factory=list)"
            },
            {
              "name": "numerical_features",
              "type": "Optional[Dict[str, float]]",
              "default": "None"
            },
            {
              "name": "meta",
              "type": "Optional[Dict[str, Any]]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "AtuneRouteResult",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "canonical",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "salience_scores",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "llm_analysis",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "is_salient",
              "type": "bool",
              "default": null
            },
            {
              "name": "deliberation_config",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "unity_result",
              "type": "Optional[Dict[str, Any]]",
              "default": "None"
            },
            {
              "name": "synapse_episode_id",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\api\\endpoints\\atune\\__init__.py",
      "file_hash": "176eee08c2b8813a94405cd8b5fc35f7cf078ecc62740ece8b7e08be489248c0",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\embeddings_gemini.py",
      "file_hash": "3b80f7ede31b2ed46480f104792893e68da136fc0212abecce9e797ef36558be",
      "functions": [
        {
          "name": "_is_debug",
          "signature": {
            "name": "_is_debug",
            "parameters": [],
            "return": "int"
          },
          "decorators": [],
          "docstring": "0 = off\n1 = normal debug (bounded prints)\n2 = verbose"
        },
        {
          "name": "_dbg_print",
          "signature": {
            "name": "_dbg_print",
            "parameters": [
              {
                "name": "lvl",
                "annotation": "int",
                "default": null
              },
              {
                "name": "*args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_truncate",
          "signature": {
            "name": "_truncate",
            "parameters": [
              {
                "name": "s",
                "annotation": "str",
                "default": null
              },
              {
                "name": "n",
                "annotation": "int",
                "default": "1400"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_load_defaults_from_neo",
          "signature": {
            "name": "_load_defaults_from_neo",
            "parameters": [],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Expected schema (any one of these is fine):\n  (c:Config {key:'embedding_defaults'}) with props: model, task_type, dimensions\n  (c:EquorConfig {kind:'embedding'})    with same props\n  (c:EmbeddingDefaults)                 with same props\nReturns {model, task_type, dimensions} if found, else {}."
        },
        {
          "name": "_validate_dims",
          "signature": {
            "name": "_validate_dims",
            "parameters": [
              {
                "name": "dimensions",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get_defaults",
          "signature": {
            "name": "_get_defaults",
            "parameters": [
              {
                "name": "now",
                "annotation": "Optional[float]",
                "default": "None"
              }
            ],
            "return": "Tuple[str, str, int]"
          },
          "decorators": [],
          "docstring": "Resolve defaults with caching and TTL: Neo4j → ENV → hard-coded\nAlways validated and forced within [MIN_DIMS, MAX_DIMS] (3072)."
        },
        {
          "name": "_ensure_list",
          "signature": {
            "name": "_ensure_list",
            "parameters": [
              {
                "name": "vec",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": "'embedding'"
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_validate_text",
          "signature": {
            "name": "_validate_text",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_embed_sync_call",
          "signature": {
            "name": "_embed_sync_call",
            "parameters": [
              {
                "name": "model",
                "annotation": "str",
                "default": null
              },
              {
                "name": "contents",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task_type",
                "annotation": "str",
                "default": null
              },
              {
                "name": "dimensions",
                "annotation": "int",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_retry",
          "signature": {
            "name": "_retry",
            "parameters": [
              {
                "name": "coro_factory",
                "annotation": null,
                "default": null
              },
              {
                "name": "retries",
                "annotation": "int",
                "default": "3"
              },
              {
                "name": "base_delay",
                "annotation": "float",
                "default": "0.5"
              },
              {
                "name": "jitter",
                "annotation": "float",
                "default": "0.25"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_embedding",
          "signature": {
            "name": "get_embedding",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task_type",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "dimensions",
                "annotation": "Optional[int]",
                "default": "None"
              },
              {
                "name": "model",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": "Generate a single embedding vector.\n\nArgs:\n    text: Input text (required, non-empty).\n    task_type: Optional override (validated). If None, uses Neo4j/env defaults.\n    dimensions: Optional override. In this DEBUG build, must resolve to 3072.\n    model: Optional override. If None, uses Neo4j/env defaults.\n\nReturns:\n    list[float]: Embedding vector of length 3072."
        },
        {
          "name": "_sync",
          "signature": {
            "name": "_sync",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_embeddings",
          "signature": {
            "name": "get_embeddings",
            "parameters": [
              {
                "name": "texts",
                "annotation": "Sequence[str]",
                "default": null
              },
              {
                "name": "task_type",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "dimensions",
                "annotation": "Optional[int]",
                "default": "None"
              },
              {
                "name": "model",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "concurrency",
                "annotation": "int",
                "default": "4"
              }
            ],
            "return": "List[List[float]]"
          },
          "decorators": [],
          "docstring": "Batch embedding with bounded concurrency and Equor/Neo4j-backed defaults.\nReturns vectors in the same order as input texts."
        },
        {
          "name": "_one",
          "signature": {
            "name": "_one",
            "parameters": [
              {
                "name": "i",
                "annotation": "int",
                "default": null
              },
              {
                "name": "t",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_sync",
          "signature": {
            "name": "_sync",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_embed_sanity_probe",
          "signature": {
            "name": "_embed_sanity_probe",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": "One-shot probe to confirm defaults + vector length."
        },
        {
          "name": "_main",
          "signature": {
            "name": "_main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\gemini_cache.py",
      "file_hash": "ab5d82e808467cf63ab28bff7e4657262fe92b5c65ff5b9cbe14bdd8a6d30e7b",
      "functions": [
        {
          "name": "_require",
          "signature": {
            "name": "_require",
            "parameters": [
              {
                "name": "cond",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "msg",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "create_cache",
          "signature": {
            "name": "create_cache",
            "parameters": [
              {
                "name": "model",
                "annotation": "str",
                "default": null
              },
              {
                "name": "system_instruction",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "contents",
                "annotation": "Optional[List[Any]]",
                "default": "None"
              },
              {
                "name": "ttl_seconds",
                "annotation": "int",
                "default": "3600"
              },
              {
                "name": "display_name",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Create a Gemini CachedContent entry and return its name.\nUse with llm_bus(..., gemini_cached_content=<name>)."
        },
        {
          "name": "_call",
          "signature": {
            "name": "_call",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "update_cache_ttl",
          "signature": {
            "name": "update_cache_ttl",
            "parameters": [
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "ttl_seconds",
                "annotation": "int",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "set_cache_expiry",
          "signature": {
            "name": "set_cache_expiry",
            "parameters": [
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "expire_time",
                "annotation": "_dt.datetime",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "expire_time must be timezone-aware (UTC recommended)."
        },
        {
          "name": "delete_cache",
          "signature": {
            "name": "delete_cache",
            "parameters": [
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "list_caches",
          "signature": {
            "name": "list_caches",
            "parameters": [],
            "return": "List[Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "create_agent_prompt_cache",
          "signature": {
            "name": "create_agent_prompt_cache",
            "parameters": [
              {
                "name": "agent_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "model",
                "annotation": "str",
                "default": "'gemini-2.5-flash'"
              },
              {
                "name": "slot",
                "annotation": "str",
                "default": "'system'"
              },
              {
                "name": "task",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "ttl_seconds",
                "annotation": "int",
                "default": "3600"
              },
              {
                "name": "display_name",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "extra_contents",
                "annotation": "Optional[List[Any]]",
                "default": "None"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Resolve the agent's dynamic system prompt (identity facets + policies) and\ncreate a Gemini cache from it. Returns cache.name for use with llm_bus.\n\nExample:\n                                            task={\"audience\":\"internal\"})\n    await llm_bus(provider=\"google\", model=\"gemini-2.5-flash\",\n                  system=None,  # system not needed; cache carries it\n                  messages=[{\"role\":\"user\",\"content\":\"Do the thing\"}],\n                  gemini_cached_content=cache)"
        },
        {
          "name": "fanout_generate_content",
          "signature": {
            "name": "fanout_generate_content",
            "parameters": [
              {
                "name": "jobs",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "concurrency",
                "annotation": "int",
                "default": "8"
              }
            ],
            "return": "List[Any]"
          },
          "decorators": [],
          "docstring": "Simple concurrency-limited fan-out for many generate_content calls.\nEach job must be a dict suitable for client.models.generate_content(**job).\nTip: Pre-fill 'cached_content' in each job to leverage 50% cache pricing."
        },
        {
          "name": "_one",
          "signature": {
            "name": "_one",
            "parameters": [
              {
                "name": "job",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_call",
          "signature": {
            "name": "_call",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\env_bootstrap.py",
      "file_hash": "979c53d22f0fdd069710169139521eb371fd1decb2c2fa144f5976d6cfefa298",
      "functions": [
        {
          "name": "_load",
          "signature": {
            "name": "_load",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\formatters.py",
      "file_hash": "5a657778637f59bb3fd1eea2786ff9b5c51541df77b62f1deab5305a6094bdc7",
      "functions": [
        {
          "name": "format_messages_for_provider",
          "signature": {
            "name": "format_messages_for_provider",
            "parameters": [
              {
                "name": "provider_name",
                "annotation": "Provider",
                "default": null
              },
              {
                "name": "system_prompt",
                "annotation": "str",
                "default": null
              },
              {
                "name": "messages",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Prepares a robust and validated payload for a specific LLM provider.\n\nThis function sanitizes the input message list, intelligently injects the\nsystem prompt according to the provider's API, and handles edge cases\nto prevent downstream errors.\n\nArgs:\n    provider_name: The target provider (e.g., 'anthropic').\n    system_prompt: The identity and instructions from Equor.\n    messages: The raw history of user/assistant messages.\n\nReturns:\n    A dictionary of keyword arguments ready for the provider's SDK."
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "bases": [
            "TypedDict"
          ],
          "decorators": [],
          "docstring": "Defines the expected structure for a chat message.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "role",
              "type": "Literal['system', 'user', 'assistant']",
              "default": null
            },
            {
              "name": "content",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\call_llm.py",
      "file_hash": "d93fa3266c830c89ad9f5f43c8a05a2a70d464d8d3022edd9d4ecdbcca51bbb0",
      "functions": [
        {
          "name": "_try_parse_json",
          "signature": {
            "name": "_try_parse_json",
            "parameters": [
              {
                "name": "s",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Any]"
          },
          "decorators": [],
          "docstring": "Safely extracts and parses a JSON object from a string, including from within markdown fences."
        },
        {
          "name": "_get_provider_from_model_name",
          "signature": {
            "name": "_get_provider_from_model_name",
            "parameters": [
              {
                "name": "model_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Provider"
          },
          "decorators": [],
          "docstring": "Determines the provider (OpenAI, Anthropic, Gemini) from the model name string."
        },
        {
          "name": "_call_llm_provider",
          "signature": {
            "name": "_call_llm_provider",
            "parameters": [
              {
                "name": "messages",
                "annotation": "List[Dict[str, str]]",
                "default": null
              },
              {
                "name": "system",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "temperature",
                "annotation": "float",
                "default": null
              },
              {
                "name": "max_tokens",
                "annotation": "int",
                "default": null
              },
              {
                "name": "json_mode",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "model_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Low-level function to make a specific SDK call to an LLM provider."
        },
        {
          "name": "execute_llm_call",
          "signature": {
            "name": "execute_llm_call",
            "parameters": [
              {
                "name": "messages",
                "annotation": "List[Dict[str, str]]",
                "default": null
              },
              {
                "name": "policy",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "json_mode",
                "annotation": "bool",
                "default": "False"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "The modern, simplified entrypoint for the LLM Bus.\nIt takes a fully formed request and executes it based on the provided policy."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\utils.py",
      "file_hash": "c357896f249825e8492b59312149633059dba991ded76a92d1dde1aaaa32a7f2",
      "functions": [
        {
          "name": "filter_kwargs",
          "signature": {
            "name": "filter_kwargs",
            "parameters": [
              {
                "name": "allowed_keys",
                "annotation": "Iterable[str]",
                "default": null
              },
              {
                "name": "kwargs",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Return only keys in allowed_keys."
        },
        {
          "name": "normalize_messages",
          "signature": {
            "name": "normalize_messages",
            "parameters": [
              {
                "name": "prompt",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "messages",
                "annotation": "Optional[List[Dict[str, Any]]]",
                "default": "None"
              }
            ],
            "return": "List[Dict[str, str]]"
          },
          "decorators": [],
          "docstring": "Back-compat normalizer for legacy call sites.\n- If messages provided: clean them (coerce to strings, trim, drop empties).\n- Else if prompt provided: wrap as a single user message.\n- Else: raise.\nNOTE: Provider-specific shaping now happens in the bus; this is just hygiene."
        },
        {
          "name": "normalise_messages",
          "signature": {
            "name": "normalise_messages",
            "parameters": [
              {
                "name": "prompt",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "messages",
                "annotation": "Optional[List[Dict[str, Any]]]",
                "default": "None"
              }
            ],
            "return": "List[Dict[str, str]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "combine_with_system",
          "signature": {
            "name": "combine_with_system",
            "parameters": [
              {
                "name": "system_prompt",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "messages",
                "annotation": "List[Dict[str, str]]",
                "default": null
              }
            ],
            "return": "List[Dict[str, str]]"
          },
          "decorators": [],
          "docstring": "Prepend a system message (if any) to normalized messages. Provider adapters\ncan reshape later; this only ensures canonical ordering."
        },
        {
          "name": "clamp",
          "signature": {
            "name": "clamp",
            "parameters": [
              {
                "name": "x",
                "annotation": "float",
                "default": null
              },
              {
                "name": "lo",
                "annotation": "float",
                "default": "0.0"
              },
              {
                "name": "hi",
                "annotation": "float",
                "default": "1.0"
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "coerce_str",
          "signature": {
            "name": "coerce_str",
            "parameters": [
              {
                "name": "value",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "redact_secrets",
          "signature": {
            "name": "redact_secrets",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Mask common secret-like substrings (very conservative)."
        },
        {
          "name": "detect_json",
          "signature": {
            "name": "detect_json",
            "parameters": [
              {
                "name": "s",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[bool, Union[dict, list, None]]"
          },
          "decorators": [],
          "docstring": "Try to parse JSON object/array; returns (ok, obj_or_list_or_None)."
        },
        {
          "name": "safe_truncate",
          "signature": {
            "name": "safe_truncate",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_chars",
                "annotation": "int",
                "default": "4000"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Cut by characters with a clean ellipsis boundary."
        },
        {
          "name": "estimate_tokens",
          "signature": {
            "name": "estimate_tokens",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": "Very rough token estimate without model-specific libs."
        },
        {
          "name": "toxicity_hint",
          "signature": {
            "name": "toxicity_hint",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "length_fit_score",
          "signature": {
            "name": "length_fit_score",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "target",
                "annotation": "int",
                "default": "200"
              },
              {
                "name": "tol",
                "annotation": "float",
                "default": "0.5"
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Reward being within target ± tol range (by characters). Soft penalties outside."
        },
        {
          "name": "baseline_metrics",
          "signature": {
            "name": "baseline_metrics",
            "parameters": [
              {
                "name": "output_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "agent",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "scope",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "facet_keys",
                "annotation": "Optional[List[str]]",
                "default": "None"
              },
              {
                "name": "target_len",
                "annotation": "int",
                "default": "220"
              },
              {
                "name": "base_helpfulness",
                "annotation": "float",
                "default": "0.7"
              },
              {
                "name": "base_brand",
                "annotation": "float",
                "default": "0.7"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Lightweight, non-empty metrics scaffold so the learner never starves.\nCallers can enrich and re-save later."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\bus.py",
      "file_hash": "f294b7b2da273bd8c786de24b95c12d0033da251a330ad45d0988a78b3ddb98e",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "subscribe",
          "signature": {
            "name": "subscribe",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "event_type",
                "annotation": "str",
                "default": null
              },
              {
                "name": "callback",
                "annotation": "Callable",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Registers a callback for a specific event type."
        },
        {
          "name": "publish",
          "signature": {
            "name": "publish",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "event_type",
                "annotation": "str",
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Publishes an event, asynchronously calling all subscribed callbacks."
        }
      ],
      "classes": [
        {
          "name": "EventBus",
          "bases": [],
          "decorators": [],
          "docstring": "A singleton, asynchronous pub/sub event bus for the entire OS.\nThis is the foundation of the OMAR architecture, enabling decoupled,\nmulti-agent collaboration.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['EventBus']",
              "default": "None"
            },
            {
              "name": "_subscribers",
              "type": "Dict[str, list]",
              "default": "defaultdict(list)"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "subscribe",
              "signature": {
                "name": "subscribe",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "event_type",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "callback",
                    "annotation": "Callable",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Registers a callback for a specific event type."
            },
            {
              "name": "publish",
              "signature": {
                "name": "publish",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "event_type",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "**kwargs",
                    "annotation": "Any",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Publishes an event, asynchronously calling all subscribed callbacks."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\school_bus.py",
      "file_hash": "70d8d492feb34a13ccf1c6e730ed5081dadb8d4e89dd4890c843074c0004dff8",
      "functions": [
        {
          "name": "initialize",
          "signature": {
            "name": "initialize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Subscribes the service to the event bus."
        },
        {
          "name": "handle_llm_request",
          "signature": {
            "name": "handle_llm_request",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "call_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "llm_payload",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Handles an incoming LLM request event from the bus."
        }
      ],
      "classes": [
        {
          "name": "LLMService",
          "bases": [],
          "decorators": [],
          "docstring": "A dedicated, event-driven service that acts as the sole gateway\nto the OS's centralized LLM endpoint. It subscribes to requests on the\nevent bus and publishes responses, decoupling all other systems from\nthe underlying HTTP infrastructure.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "initialize",
              "signature": {
                "name": "initialize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Subscribes the service to the event bus."
            },
            {
              "name": "handle_llm_request",
              "signature": {
                "name": "handle_llm_request",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "call_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "llm_payload",
                    "annotation": "dict",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Handles an incoming LLM request event from the bus."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\core\\llm\\prompts\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\analysis.py",
      "file_hash": "0ec9637f0a6dd0daf5b2d36018b67f64803d8a14ee9880b3a719b15fdbe3d5b7",
      "functions": [
        {
          "name": "_available_agents_text",
          "signature": {
            "name": "_available_agents_text",
            "parameters": [],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Try to load a curated agent list if present; otherwise fall back\nto the canonical default set. Never crash if the registry is absent."
        },
        {
          "name": "simple_llm_summary",
          "signature": {
            "name": "simple_llm_summary",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Generates a terse summary by calling the centralized LLM Bus.\nIdentity/policy/logging handled upstream by the bus."
        },
        {
          "name": "run_llm_analysis",
          "signature": {
            "name": "run_llm_analysis",
            "parameters": [
              {
                "name": "prompt_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Any]"
          },
          "decorators": [],
          "docstring": "Runs a targeted analysis via the centralized LLM Bus.\nReturns parsed JSON for JSON-mode tasks (e.g., 'next_step'), else text."
        },
        {
          "name": "render_prompt",
          "signature": {
            "name": "render_prompt",
            "parameters": [
              {
                "name": "system_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "prompt_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "input_data",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": "dict"
          },
          "decorators": [],
          "docstring": "Render a prompt and produce a payload compatible with /llm/call.\nLegacy callsites can consume this without knowing bus internals."
        },
        {
          "name": "_len_score",
          "signature": {
            "name": "_len_score",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "target",
                "annotation": "int",
                "default": "120"
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_toxicity_hint",
          "signature": {
            "name": "_toxicity_hint",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_coerce_text",
          "signature": {
            "name": "_coerce_text",
            "parameters": [
              {
                "name": "resp",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\canonicalise.py",
      "file_hash": "65d38909d3192ba64738b22a0daa0da3f82cd9c438c0eed9d4f81472b8e8a0ca",
      "functions": [
        {
          "name": "canonicalise_event",
          "signature": {
            "name": "canonicalise_event",
            "parameters": [
              {
                "name": "event_data",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\dependency_map.py",
      "file_hash": "5ea058ecc0dab0ca0ff23142a07d08ce587b76f041b5975f9bf9619ffa64b1ff",
      "functions": [
        {
          "name": "build_dependency_map",
          "signature": {
            "name": "build_dependency_map",
            "parameters": [
              {
                "name": "repo_root",
                "annotation": "str",
                "default": "'.'"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Stub: returns an empty dependency graph. Upgrade later."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\google_token.py",
      "file_hash": "38fef065cafbb88fe5493ebb18be758934ac57f255b5f8588f6dcdb3c9ea82a4",
      "functions": [
        {
          "name": "get_google_bearer_token",
          "signature": {
            "name": "get_google_bearer_token",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Async singleton: returns a valid Google OAuth2 Bearer token for API calls.\nAutomatically refreshes if expired."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\paths.py",
      "file_hash": "7f8c85ea64d82d10dfa821cdbb83b3564c11679fcefbe98a601e05eaf71a0b4e",
      "functions": [
        {
          "name": "rel",
          "signature": {
            "name": "rel",
            "parameters": [
              {
                "name": "*parts",
                "annotation": "str | os.PathLike",
                "default": null
              }
            ],
            "return": "Path"
          },
          "decorators": [],
          "docstring": "Join onto project root."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\test_status.py",
      "file_hash": "5b9f8b7b773270487559dbca2a49c9b2b92dad936666821d95de783131c1e45c",
      "functions": [
        {
          "name": "summarize_tests",
          "signature": {
            "name": "summarize_tests",
            "parameters": [
              {
                "name": "repo_root",
                "annotation": "str",
                "default": "'.'"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Stub: summarizes tests; upgrade with real pytest parsing later."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\text.py",
      "file_hash": "ebbcaf83ed5ea16e33e64e964d2a7ed0e2e58da90e542c360c730eeb8b774209",
      "functions": [
        {
          "name": "extract_body_from_node",
          "signature": {
            "name": "extract_body_from_node",
            "parameters": [
              {
                "name": "node",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "exclude",
                "annotation": null,
                "default": "('event_id', 'confidence', 'vector_gemini', 'embedding', 'timestamp', 'user_id', 'origin', 'labels')"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "clamp",
          "signature": {
            "name": "clamp",
            "parameters": [
              {
                "name": "x",
                "annotation": "float",
                "default": null
              },
              {
                "name": "lo",
                "annotation": "float",
                "default": "0.0"
              },
              {
                "name": "hi",
                "annotation": "float",
                "default": "1.0"
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Clamps a number to a given range."
        },
        {
          "name": "redact_secrets",
          "signature": {
            "name": "redact_secrets",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Masks common secret-like substrings in a string."
        },
        {
          "name": "safe_truncate",
          "signature": {
            "name": "safe_truncate",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_chars",
                "annotation": "int",
                "default": "4000"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Cuts a string by characters with a clean ellipsis boundary."
        },
        {
          "name": "toxicity_hint",
          "signature": {
            "name": "toxicity_hint",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Returns a simple 0.0 or 1.0 toxicity score based on a keyword list."
        },
        {
          "name": "baseline_metrics",
          "signature": {
            "name": "baseline_metrics",
            "parameters": [
              {
                "name": "output_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "agent",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "scope",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "facet_keys",
                "annotation": "Optional[List[str]]",
                "default": "None"
              },
              {
                "name": "target_len",
                "annotation": "int",
                "default": "220"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Creates a lightweight, non-empty metrics scaffold for the learning loop."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\time.py",
      "file_hash": "a34fb285d414a62b7127a48ee22ac8ffbea388cb775a00ca21bfeb72eafcecb0",
      "functions": [
        {
          "name": "now",
          "signature": {
            "name": "now",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Returns the current datetime in Brisbane timezone.\nUsage: `now()` replaces `datetime.utcnow()`"
        },
        {
          "name": "now_iso",
          "signature": {
            "name": "now_iso",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Returns current Brisbane time as an ISO 8601 string."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\net_api.py",
      "file_hash": "c6f2bd3c035f89d673545b24b83a961bd306a9cf3542d9481acfb313af1551b2",
      "functions": [
        {
          "name": "get_http_client",
          "signature": {
            "name": "get_http_client",
            "parameters": [],
            "return": "httpx.AsyncClient"
          },
          "decorators": [],
          "docstring": "Returns a process-wide shared AsyncClient configured with the ECODIAOS base URL."
        },
        {
          "name": "close_http_client",
          "signature": {
            "name": "close_http_client",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Gracefully close the shared AsyncClient (e.g., on app shutdown)."
        },
        {
          "name": "QORA_SCHEMA_UID",
          "signature": {
            "name": "QORA_SCHEMA_UID",
            "parameters": [
              {
                "name": "key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "SYNK_FLAG_GET",
          "signature": {
            "name": "SYNK_FLAG_GET",
            "parameters": [
              {
                "name": "key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "TOOL_INFO",
          "signature": {
            "name": "TOOL_INFO",
            "parameters": [
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "ENDPOINTS",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "QORA_SCHEMA_UID",
              "signature": {
                "name": "QORA_SCHEMA_UID",
                "parameters": [
                  {
                    "name": "key",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            },
            {
              "name": "SYNK_FLAG_GET",
              "signature": {
                "name": "SYNK_FLAG_GET",
                "parameters": [
                  {
                    "name": "key",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            },
            {
              "name": "TOOL_INFO",
              "signature": {
                "name": "TOOL_INFO",
                "parameters": [
                  {
                    "name": "name",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\safe_eval.py",
      "file_hash": "3ede5c9b14a3c5f88bd0b4169b239b0b26b21f9bcf47677d2dd2a55d09bb9719",
      "functions": [
        {
          "name": "safe_eval",
          "signature": {
            "name": "safe_eval",
            "parameters": [
              {
                "name": "expr",
                "annotation": "str",
                "default": null
              },
              {
                "name": "variables",
                "annotation": "Dict[str, Any] | None",
                "default": "None"
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\embedcsv\\embed_all.py",
      "file_hash": "f514aac984ee1981f7079421ce5e86e5f59f87fef94f39db1dd0847f10f0a2cb",
      "functions": [
        {
          "name": "find_salience_csvs",
          "signature": {
            "name": "find_salience_csvs",
            "parameters": [
              {
                "name": "root",
                "annotation": null,
                "default": "'.'"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "embed_and_save_csv",
          "signature": {
            "name": "embed_and_save_csv",
            "parameters": [
              {
                "name": "infile",
                "annotation": null,
                "default": null
              },
              {
                "name": "outfile",
                "annotation": null,
                "default": null
              },
              {
                "name": "text_col",
                "annotation": null,
                "default": "TEXT_COL"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\embedcsv\\upload_all.py",
      "file_hash": "1f7a7a364078ffd31d6ed96a160037fe86d630275f0c4b7eb82baf274af4aaa7",
      "functions": [
        {
          "name": "parse_embedding",
          "signature": {
            "name": "parse_embedding",
            "parameters": [
              {
                "name": "embedding_str",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "upload_scorer_exemplars",
          "signature": {
            "name": "upload_scorer_exemplars",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\registries\\global_registry.py",
      "file_hash": "7f9756862641b45f9b86095988fa39216f0d2d2a238cfea330581e3139d601ca",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\vector_ops\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\vector_ops\\batch_embed.py",
      "file_hash": "8190af00144edc3c70ef24ab3d7165f47b57971686ecdbbb5dc0532fcb149b0c",
      "functions": [
        {
          "name": "fetch_nodes_to_re_embed",
          "signature": {
            "name": "fetch_nodes_to_re_embed",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Driverless: find nodes with OLD_VECTOR set but NEW_VECTOR missing."
        },
        {
          "name": "re_embed_batch",
          "signature": {
            "name": "re_embed_batch",
            "parameters": [
              {
                "name": "batch",
                "annotation": "list[dict]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Compute embeddings for a batch of nodes."
        },
        {
          "name": "update_nodes_in_neo4j",
          "signature": {
            "name": "update_nodes_in_neo4j",
            "parameters": [
              {
                "name": "update_data",
                "annotation": "list[dict]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Driverless: write new vectors back into Neo4j."
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\vector_ops\\cluster.py",
      "file_hash": "27f691ed3262e7fc98acc8b2e2a5d08e11738e5f0c7a62b2f31b88691b5c83db",
      "functions": [
        {
          "name": "cluster_vectors",
          "signature": {
            "name": "cluster_vectors",
            "parameters": [
              {
                "name": "vectors",
                "annotation": "list[list[float]]",
                "default": null
              },
              {
                "name": "min_cluster_size",
                "annotation": "int",
                "default": "2"
              }
            ],
            "return": "list[int]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\vector_ops\\dimreduce.py",
      "file_hash": "4ef00559dc1ba54aa439acb0ac37c2d3fdb9539ec387158801f13d914f532f29",
      "functions": [
        {
          "name": "reduce_vectors",
          "signature": {
            "name": "reduce_vectors",
            "parameters": [
              {
                "name": "vectors",
                "annotation": "list[list[float]]",
                "default": null
              },
              {
                "name": "n_components",
                "annotation": "int",
                "default": "2"
              }
            ],
            "return": "list[list[float]]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\vector_ops\\config\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\vector_ops\\index_store\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\neo\\cypher_query.py",
      "file_hash": "ac9e0dc53435f322014f603f650c0b7e997b95f9c685727923bbf51de748b189",
      "functions": [
        {
          "name": "cypher_query",
          "signature": {
            "name": "cypher_query",
            "parameters": [
              {
                "name": "query",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "driver",
                "annotation": "Optional[AsyncDriver]",
                "default": "None"
              },
              {
                "name": "database",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "as_dict",
                "annotation": "bool",
                "default": "True"
              },
              {
                "name": "timeout_s",
                "annotation": "Optional[float]",
                "default": "None"
              },
              {
                "name": "bookmarks",
                "annotation": "Optional[Union[str, Sequence[str]]]",
                "default": "None"
              }
            ],
            "return": "List[Any]"
          },
          "decorators": [],
          "docstring": "Execute a Cypher query and return all records.\n\nArgs:\n    query: Cypher query string.\n    params: Query parameters (dict).\n    driver: Optional AsyncDriver override; if not provided, uses get_driver().\n    database: Neo4j database name (defaults to env NEO4J_DATABASE or 'neo4j').\n    as_dict: If True, return each record as dict; else return neo4j.Record objects.\n    timeout_s: Optional per-query timeout in seconds.\n    bookmarks: Optional bookmark(s) for causal chaining.\n\nReturns:\n    List of records (dicts if as_dict=True).\n\nRaises:\n    Exception: Any driver/session/run exceptions are surfaced to caller."
        },
        {
          "name": "cypher_query_one",
          "signature": {
            "name": "cypher_query_one",
            "parameters": [
              {
                "name": "query",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "driver",
                "annotation": "Optional[AsyncDriver]",
                "default": "None"
              },
              {
                "name": "database",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "as_dict",
                "annotation": "bool",
                "default": "True"
              },
              {
                "name": "timeout_s",
                "annotation": "Optional[float]",
                "default": "None"
              },
              {
                "name": "bookmarks",
                "annotation": "Optional[Union[str, Sequence[str]]]",
                "default": "None"
              }
            ],
            "return": "Optional[Any]"
          },
          "decorators": [],
          "docstring": "Execute and return the first record (or None)."
        },
        {
          "name": "cypher_query_scalar",
          "signature": {
            "name": "cypher_query_scalar",
            "parameters": [
              {
                "name": "query",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "driver",
                "annotation": "Optional[AsyncDriver]",
                "default": "None"
              },
              {
                "name": "database",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "timeout_s",
                "annotation": "Optional[float]",
                "default": "None"
              },
              {
                "name": "bookmarks",
                "annotation": "Optional[Union[str, Sequence[str]]]",
                "default": "None"
              },
              {
                "name": "default",
                "annotation": "Any",
                "default": "None"
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": "Execute and return the first column of the first row (or `default`)."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\neo\\neo_driver.py",
      "file_hash": "dd8fea2ef393efe355dea0c713e6e917b830db4a89776e097d48524613013b64",
      "functions": [
        {
          "name": "init_driver",
          "signature": {
            "name": "init_driver",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Initialize the Neo4j AsyncDriver once for the app lifespan."
        },
        {
          "name": "close_driver",
          "signature": {
            "name": "close_driver",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Close the Neo4j driver on app shutdown."
        },
        {
          "name": "get_driver",
          "signature": {
            "name": "get_driver",
            "parameters": [],
            "return": "AsyncDriver"
          },
          "decorators": [],
          "docstring": "Return the active Neo4j AsyncDriver instance.\nMust call init_driver() before using this."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\neo\\neo_safe.py",
      "file_hash": "7b4b64cbf9f2be66f18f73358fbaf66dbd8ce40952cb5da11f312826c55f38b2",
      "functions": [
        {
          "name": "_is_neo_driver",
          "signature": {
            "name": "_is_neo_driver",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": "Best-effort check for a Neo4j driver-like object without importing Neo4j."
        },
        {
          "name": "coalesce_driver",
          "signature": {
            "name": "coalesce_driver",
            "parameters": [
              {
                "name": "driver_like",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Optional[Any]"
          },
          "decorators": [],
          "docstring": "DEPRECATED: Do not rely on drivers. Use cypher_query(...) instead.\n\nBehavior (for backward compatibility only):\n  - None / 'noop' / 'off' / '' / 'random'  -> None\n  - 'auto'                                  -> None (logs deprecation warning)\n  - actual driver-like object               -> returned as-is (logs deprecation warning)\n  - anything else                           -> None"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\core\\utils\\cicd\\listener.py",
      "file_hash": "d04d5ad09ec653efef92768343ecdb3c0bda3b30d1e5d51d452ba31b13147703",
      "functions": [
        {
          "name": "_proposal_payload",
          "signature": {
            "name": "_proposal_payload",
            "parameters": [
              {
                "name": "maybe_wrapped",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_proposal_id",
          "signature": {
            "name": "_proposal_id",
            "parameters": [
              {
                "name": "p",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_subscribe",
          "signature": {
            "name": "_subscribe",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_on_event",
          "signature": {
            "name": "_on_event",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "payload",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_run_command",
          "signature": {
            "name": "_run_command",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "command",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cwd",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "on_upgrade_approved",
          "signature": {
            "name": "on_upgrade_approved",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "proposal",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "CICDListener",
          "bases": [],
          "decorators": [],
          "docstring": "Automated deployment listener for approved self-upgrades.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['CICDListener']",
              "default": "None"
            },
            {
              "name": "_lock",
              "type": "asyncio.Lock",
              "default": null
            },
            {
              "name": "_sub_task",
              "type": "Optional[asyncio.Task]",
              "default": "None"
            },
            {
              "name": "_started",
              "type": "bool",
              "default": "False"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_subscribe",
              "signature": {
                "name": "_subscribe",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_on_event",
              "signature": {
                "name": "_on_event",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "payload",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_run_command",
              "signature": {
                "name": "_run_command",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "command",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "cwd",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "on_upgrade_approved",
              "signature": {
                "name": "on_upgrade_approved",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "proposal",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\core\\prompts\\orchestrator.py",
      "file_hash": "9ba54a173f8b3d0243d6505568fe59ae0463b611e2352f7ee565c6a11a06386f",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_load_templates",
          "signature": {
            "name": "_load_templates",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_template",
          "signature": {
            "name": "get_template",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "jinja2.Template"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_http_client",
          "signature": {
            "name": "_http_client",
            "parameters": [],
            "return": "httpx.AsyncClient"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "plan_deliberation",
          "signature": {
            "name": "plan_deliberation",
            "parameters": [
              {
                "name": "summary",
                "annotation": "str",
                "default": null
              },
              {
                "name": "salience_scores",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "canonical_event",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Tuple[Dict[str, Any], Optional[str]]"
          },
          "decorators": [],
          "docstring": "Plans the next deliberation step by using the canonical prompt orchestrator."
        },
        {
          "name": "_fetch_identity_block",
          "signature": {
            "name": "_fetch_identity_block",
            "parameters": [
              {
                "name": "agent_name",
                "annotation": "Optional[str]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Assemble an identity block from the graph.\nFlexible to schema variations:\n  (a:Agent {name})-[:HAS_PROFILE]->(p:Profile)\n  (a)-[:HAS_FACET]->(f:Facet)\nUses COALESCE on common fields."
        },
        {
          "name": "_fetch_synapse_policy",
          "signature": {
            "name": "_fetch_synapse_policy",
            "parameters": [
              {
                "name": "hint",
                "annotation": "PolicyHint",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Request a policy hint from Synapse and return a dict of fields to merge\ninto the templating context. Accepts either Pydantic v2 or v1 model_dump()."
        },
        {
          "name": "build_prompt",
          "signature": {
            "name": "build_prompt",
            "parameters": [
              {
                "name": "hint",
                "annotation": "PolicyHint",
                "default": null
              }
            ],
            "return": "OrchestratorResponse"
          },
          "decorators": [],
          "docstring": "Build the final prompt:\n  - Load template by scope\n  - Merge caller context + Equor identity + Synapse policy\n  - Render to message list for the LLM"
        }
      ],
      "classes": [
        {
          "name": "PolicyHint",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "scope",
              "type": "str",
              "default": "Field(..., description='Key for the template in templates.yaml')"
            },
            {
              "name": "context",
              "type": "Dict[str, Any]",
              "default": "Field(default_factory=dict, description='Variables for template rendering')"
            },
            {
              "name": "agent_name",
              "type": "Optional[str]",
              "default": "Field(None, description='Agent identity key to enrich context (Equor)')"
            }
          ],
          "methods": []
        },
        {
          "name": "OrchestratorResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "messages",
              "type": "List[Dict[str, str]]",
              "default": "Field(..., description='Final list of chat messages for the LLM')"
            }
          ],
          "methods": []
        },
        {
          "name": "PromptTemplateRegistry",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "Path",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_load_templates",
              "signature": {
                "name": "_load_templates",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_template",
              "signature": {
                "name": "get_template",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "key",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "jinja2.Template"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\data\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\launch\\upload_embed.py",
      "file_hash": "a439b457e99f14001f5987d9b697e9b834b29f7d351497570df0e3a70955b356",
      "functions": [
        {
          "name": "_is_neo_driver",
          "signature": {
            "name": "_is_neo_driver",
            "parameters": [
              {
                "name": "x",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "coalesce_driver",
          "signature": {
            "name": "coalesce_driver",
            "parameters": [
              {
                "name": "driver_like",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Optional[Any]"
          },
          "decorators": [],
          "docstring": "Returns a usable Neo4j driver or None.\n- real driver -> itself\n- \"auto\"      -> try core.utils.neo_driver.get_driver()\n- None / \"noop\"/\"off\"/random string -> None"
        },
        {
          "name": "tool",
          "signature": {
            "name": "tool",
            "parameters": [
              {
                "name": "system_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Registers a function as a tool under the given system name."
        },
        {
          "name": "decorator",
          "signature": {
            "name": "decorator",
            "parameters": [
              {
                "name": "func",
                "annotation": "Callable",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_caller_name",
          "signature": {
            "name": "get_caller_name",
            "parameters": [],
            "return": "str | None"
          },
          "decorators": [],
          "docstring": "Returns the name of the function that called the tool."
        },
        {
          "name": "safe_neo_value",
          "signature": {
            "name": "safe_neo_value",
            "parameters": [
              {
                "name": "val",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": "Converts Python values to safe Neo4j-storable values."
        },
        {
          "name": "log_tool_call_to_neo",
          "signature": {
            "name": "log_tool_call_to_neo",
            "parameters": [
              {
                "name": "driver_like",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "func",
                "annotation": "Callable",
                "default": null
              },
              {
                "name": "args",
                "annotation": "Tuple[Any, ...]",
                "default": null
              },
              {
                "name": "kwargs",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "result",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "status",
                "annotation": "str",
                "default": null
              },
              {
                "name": "caller",
                "annotation": "str",
                "default": null
              },
              {
                "name": "start",
                "annotation": "float",
                "default": null
              },
              {
                "name": "duration",
                "annotation": "float",
                "default": null
              },
              {
                "name": "is_async",
                "annotation": "bool",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Logs tool invocation metadata to Neo4j. Does NOT attempt to persist result as a node.\nNo-ops cleanly if a valid driver is not available (per driver_like policy)."
        },
        {
          "name": "_safe_neo_value",
          "signature": {
            "name": "_safe_neo_value",
            "parameters": [
              {
                "name": "x",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "max_chars",
                "annotation": "int",
                "default": "8000"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Convert arbitrary Python object to a Neo4j-storable value; truncate large blobs."
        },
        {
          "name": "tool_wrapper",
          "signature": {
            "name": "tool_wrapper",
            "parameters": [
              {
                "name": "system_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "log_return",
                "annotation": "bool",
                "default": "True"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Wraps tools with Neo4j logging.\nFirst argument may be:\n  - a real Neo driver (async or sync)\n  - \"auto\" to pull from core.utils.neo.neo_driver.get_driver()\n  - \"noop\"/None/random string to skip logging (no-op)\nSet log_return=False to avoid logging the tool's return payload."
        },
        {
          "name": "decorator",
          "signature": {
            "name": "decorator",
            "parameters": [
              {
                "name": "func",
                "annotation": "Callable",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_log_and_call",
          "signature": {
            "name": "_log_and_call",
            "parameters": [
              {
                "name": "driver_like",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "call_args",
                "annotation": "Tuple[Any, ...]",
                "default": null
              },
              {
                "name": "call_kwargs",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "is_async",
                "annotation": "bool",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "async_wrapper",
          "signature": {
            "name": "async_wrapper",
            "parameters": [
              {
                "name": "*args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "functools.wraps(func)"
          ],
          "docstring": null
        },
        {
          "name": "sync_wrapper",
          "signature": {
            "name": "sync_wrapper",
            "parameters": [
              {
                "name": "*args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "functools.wraps(func)"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\schema\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\scripts\\exporter.py",
      "file_hash": "2f7ba8b5d06830b2381ec042e9d169e21bee1c25adf0e6a9cd9064e757e9ccf1",
      "functions": [
        {
          "name": "export",
          "signature": {
            "name": "export",
            "parameters": [
              {
                "name": "label",
                "annotation": "str",
                "default": null
              },
              {
                "name": "out_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\scripts\\search_vectors.py",
      "file_hash": "222b4d8a9c04c54341c4ec4e291f173310f4f8aec9492215762737cfd75cdac5",
      "functions": [
        {
          "name": "query_vector_index",
          "signature": {
            "name": "query_vector_index",
            "parameters": [
              {
                "name": "index_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "embedding",
                "annotation": "List[float]",
                "default": null
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Calls db.index.vector.queryNodes and returns a list of dicts like:\n  [{'node': <props>, 'score': float}, ...]"
        },
        {
          "name": "_prop_get",
          "signature": {
            "name": "_prop_get",
            "parameters": [
              {
                "name": "node",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": "Safely extract a property from a Neo4j node-like object or dict."
        },
        {
          "name": "format_node",
          "signature": {
            "name": "format_node",
            "parameters": [
              {
                "name": "node",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "fields",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Extract a few fields safely from a Neo4j node."
        },
        {
          "name": "search_clusters",
          "signature": {
            "name": "search_clusters",
            "parameters": [
              {
                "name": "query",
                "annotation": "str",
                "default": null
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "search_events",
          "signature": {
            "name": "search_events",
            "parameters": [
              {
                "name": "query",
                "annotation": "str",
                "default": null
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\scripts\\upload_embed.py",
      "file_hash": "aad1d3bfd08a43a35e27dc4095c0ae44d880de410da0221ed4437fbb1b2c7e02",
      "functions": [
        {
          "name": "infer_scorer_from_filename",
          "signature": {
            "name": "infer_scorer_from_filename",
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "parse_tags",
          "signature": {
            "name": "parse_tags",
            "parameters": [
              {
                "name": "val",
                "annotation": "Optional[str]",
                "default": null
              }
            ],
            "return": "Optional[List[str]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "read_rows_from_csv",
          "signature": {
            "name": "read_rows_from_csv",
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[Row]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "stable_uuid",
          "signature": {
            "name": "stable_uuid",
            "parameters": [
              {
                "name": "scorer",
                "annotation": "str",
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "ensure_schema",
          "signature": {
            "name": "ensure_schema",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "retry_get_embedding",
          "signature": {
            "name": "retry_get_embedding",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_retries",
                "annotation": "int",
                "default": "6"
              },
              {
                "name": "base_delay",
                "annotation": "float",
                "default": "0.8"
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": "Gemini can throw 500 INTERNAL when hammered. Retry with exponential backoff + jitter."
        },
        {
          "name": "upsert_batch",
          "signature": {
            "name": "upsert_batch",
            "parameters": [
              {
                "name": "rows",
                "annotation": "List[Row]",
                "default": null
              },
              {
                "name": "concurrency",
                "annotation": "int",
                "default": "4"
              },
              {
                "name": "progress_every",
                "annotation": "int",
                "default": "100"
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_do",
          "signature": {
            "name": "_do",
            "parameters": [
              {
                "name": "row",
                "annotation": "Row",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "dedupe_rows",
          "signature": {
            "name": "dedupe_rows",
            "parameters": [
              {
                "name": "rows",
                "annotation": "List[Row]",
                "default": null
              }
            ],
            "return": "List[Row]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "write_merged_csv",
          "signature": {
            "name": "write_merged_csv",
            "parameters": [
              {
                "name": "rows",
                "annotation": "List[Row]",
                "default": null
              },
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "Row",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "text",
              "type": "str",
              "default": null
            },
            {
              "name": "category",
              "type": "str",
              "default": null
            },
            {
              "name": "rationale",
              "type": "str",
              "default": null
            },
            {
              "name": "scorer",
              "type": "str",
              "default": null
            },
            {
              "name": "tags",
              "type": "Optional[List[str]]",
              "default": "None"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\scripts\\collect_gates.py",
      "file_hash": "f8cf57c88d3f9deb83dfe6299dc4f77e9e84545c1566f1637db97d52168633ae",
      "functions": [
        {
          "name": "find_gate_keys",
          "signature": {
            "name": "find_gate_keys",
            "parameters": [],
            "return": "Set[str]"
          },
          "decorators": [],
          "docstring": "Scans all .py files in the root directory for switchboard gate keys."
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Main function to run the collation and save the results."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\scripts\\cite_clean.py",
      "file_hash": "a25c0309264431e62b584de7f5c18afbf2c32e07e3d87ea2a5175d3512e67f2e",
      "functions": [
        {
          "name": "strip_cites_token_only",
          "signature": {
            "name": "strip_cites_token_only",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "tuple[str, int]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "process_file",
          "signature": {
            "name": "process_file",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "write",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "make_backup",
                "annotation": "bool",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\atune_router.py",
      "file_hash": "9e4f6f6fc6923121a4529f736a53338bb584ae1bc39c7177a6e88be391bc35c9",
      "functions": [
        {
          "name": "_calculate_reward_from_unity",
          "signature": {
            "name": "_calculate_reward_from_unity",
            "parameters": [
              {
                "name": "unity_result",
                "annotation": "Optional[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Cheap scalar for bandit-style feedback to Synapse. Designed to be stable across\nsmall payload shape changes from Unity."
        },
        {
          "name": "_report_synapse_outcome",
          "signature": {
            "name": "_report_synapse_outcome",
            "parameters": [
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Reports the outcome of the Atune→Unity episode back to Synapse.\nFire-and-forget is OK here; errors are logged but not raised."
        },
        {
          "name": "_to_deliberation_spec",
          "signature": {
            "name": "_to_deliberation_spec",
            "parameters": [
              {
                "name": "cfg",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "summary_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "canonical",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "salience_scores",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "llm_analysis",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "DeliberationSpec"
          },
          "decorators": [],
          "docstring": "Convert a planner-produced dict into a typed DeliberationSpec\nthat Unity's DeliberationManager can run immediately."
        },
        {
          "name": "atune_router",
          "signature": {
            "name": "atune_router",
            "parameters": [
              {
                "name": "canonical",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Full salience routing and Unity deliberation entrypoint for canonical events.\n\nBehavior:\n  - Text blocks → embeddings → exemplar scoring (one canonical scorer).\n  - Numeric features → numeric scorer.\n  - If any scorer requires LLM escalation → run LLM analyses → plan → Unity deliberation.\n  - Else → return scores and exit (another process can persist the event if desired)."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\embedding_salience_scoring.py",
      "file_hash": "ae419627f3542770242e7c6c68b7cd755b12df0bb54cdb634e5045212d1a4cd7",
      "functions": [
        {
          "name": "cosine_similarity",
          "signature": {
            "name": "cosine_similarity",
            "parameters": [
              {
                "name": "v1",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "v2",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "score_salience_from_embedding",
          "signature": {
            "name": "score_salience_from_embedding",
            "parameters": [
              {
                "name": "canonical",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "labels",
                "annotation": "list[str]",
                "default": null
              }
            ],
            "return": "dict"
          },
          "decorators": [],
          "docstring": "Compares embedded canonical event to exemplar pools per label.\nApplies per-label thresholds to determine if LLM analysis is needed.\nEmergency label is always evaluated and can override others."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\plan_next_steps.py",
      "file_hash": "363856b886d54e7dcd666031f4d29c08f1d908f8cff05d52c3051e5f1f3e4663",
      "functions": [
        {
          "name": "_cluster_search_from_text",
          "signature": {
            "name": "_cluster_search_from_text",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": "3"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Vector search over Cluster index (driverless)."
        },
        {
          "name": "_fetch_cluster_members",
          "signature": {
            "name": "_fetch_cluster_members",
            "parameters": [
              {
                "name": "cluster_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "limit_per",
                "annotation": "int",
                "default": "5"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetch recent Events in a Cluster (driverless)."
        },
        {
          "name": "_prefetch_cluster_context",
          "signature": {
            "name": "_prefetch_cluster_context",
            "parameters": [
              {
                "name": "cluster_hits",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "max_clusters",
                "annotation": "int",
                "default": "2"
              },
              {
                "name": "per_cluster",
                "annotation": "int",
                "default": "5"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Assemble a lightweight context bundle for top clusters."
        },
        {
          "name": "_ask_synapse_for_plan",
          "signature": {
            "name": "_ask_synapse_for_plan",
            "parameters": [
              {
                "name": "summary",
                "annotation": "str",
                "default": null
              },
              {
                "name": "salience_scores",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "canonical_event",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Tuple[Optional[Dict[str, Any]], Optional[str]]"
          },
          "decorators": [],
          "docstring": "Prefer Synapse for planning. Supports multiple server-side method names to\nstay compatible with evolving clients. Returns (deliberation_config, episode_id)."
        },
        {
          "name": "plan_next_steps",
          "signature": {
            "name": "plan_next_steps",
            "parameters": [
              {
                "name": "summary",
                "annotation": "str",
                "default": null
              },
              {
                "name": "salience_scores",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "canonical_event",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Tuple[Dict[str, Any], Optional[str]]"
          },
          "decorators": [],
          "docstring": "Generate a deliberation plan for Unity. Route via Synapse first; if unavailable,\nfall back to the central LLM bus ('next_step' prompt). All graph I/O is driverless."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\routing_cache.py",
      "file_hash": "3974d6807baee84ab6c76459a957a503ed94972c1f372ace9200eac298976dc1",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\scorers.py",
      "file_hash": "e1f5cafe5fcd64f76be8b5cdc5563ed43ae0396cdbc01981a6e59d679bb5eb36",
      "functions": [
        {
          "name": "_to_vec",
          "signature": {
            "name": "_to_vec",
            "parameters": [
              {
                "name": "arr",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Coerce various containers to a 1D float32 numpy vector (empty if unusable)."
        },
        {
          "name": "cosine_similarity",
          "signature": {
            "name": "cosine_similarity",
            "parameters": [
              {
                "name": "v1",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "v2",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Cosine similarity between two vectors. If dimensions differ, compare on the\nshortest prefix (robust to schema upgrades where some exemplars lag)."
        },
        {
          "name": "score_salience_from_embedding",
          "signature": {
            "name": "score_salience_from_embedding",
            "parameters": [
              {
                "name": "canonical_event",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "labels",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "Dict[str, Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Embed the event text once (Gemini). For each label, compare to its exemplars and\nreturn the top cosine similarity (0..1) plus a short rationale.\n\nReturns shape:\n  {\n    \"<label>\": {\n      \"score\": float,\n      \"reason\": str,\n      \"skipped\": bool\n    },\n    ...\n  }"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\shared_nlp.py",
      "file_hash": "c8dae9011ece32e2c73ba8869969991c06efac602fe5a9d08cb9d0a5b05bc843",
      "functions": [
        {
          "name": "get_nlp",
          "signature": {
            "name": "get_nlp",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\throttle_clustering.py",
      "file_hash": "2a0bf3a975ebc7a8086e4555009a9e62d664d083f19847d4f31d35fc11270a57",
      "functions": [
        {
          "name": "mark_event_ingested",
          "signature": {
            "name": "mark_event_ingested",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "should_run_clustering",
          "signature": {
            "name": "should_run_clustering",
            "parameters": [],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "mark_cluster_ran",
          "signature": {
            "name": "mark_cluster_ran",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\trigger_llm_analysis.py",
      "file_hash": "fbe4392eacbf5085a1c9c5595bfa38774bca7fe1fbc2a2ff42b2344b679f78d0",
      "functions": [
        {
          "name": "run_full_llm_analysis",
          "signature": {
            "name": "run_full_llm_analysis",
            "parameters": [
              {
                "name": "canonical_event",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "labels",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "embedding_scores",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, str]"
          },
          "decorators": [],
          "docstring": "Runs LLM-based deeper analysis on all routed labels that passed similarity threshold.\nReturns: { label: analysis_text }"
        },
        {
          "name": "_one",
          "signature": {
            "name": "_one",
            "parameters": [
              {
                "name": "label",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "tuple[str, str]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\numeric_analysis\\z_score_outlier.py",
      "file_hash": "df89b5028938991e673ab5d8342c12094c95d80cc56014bed464f7481bc01aa9",
      "functions": [
        {
          "name": "z_score_analysis",
          "signature": {
            "name": "z_score_analysis",
            "parameters": [
              {
                "name": "current",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "past_window",
                "annotation": "list",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\numeric_analysis\\delta_compare.py",
      "file_hash": "94ceaa4bf9f4e673780e5aed174e70e65d17ae03e118c402e8e1ac2f3b7a9845",
      "functions": [
        {
          "name": "delta_score",
          "signature": {
            "name": "delta_score",
            "parameters": [
              {
                "name": "current",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "past_window",
                "annotation": "list",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\numeric_analysis\\history_store.py",
      "file_hash": "c06ba8d060343ebdb856ac67090573a25239323de2cbff121661319454d52039",
      "functions": [
        {
          "name": "init_db",
          "signature": {
            "name": "init_db",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "store_event",
          "signature": {
            "name": "store_event",
            "parameters": [
              {
                "name": "source",
                "annotation": "str",
                "default": null
              },
              {
                "name": "event_type",
                "annotation": "str",
                "default": null
              },
              {
                "name": "payload",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_recent_events",
          "signature": {
            "name": "get_recent_events",
            "parameters": [
              {
                "name": "source",
                "annotation": "str",
                "default": null
              },
              {
                "name": "event_type",
                "annotation": "str",
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "20"
              }
            ],
            "return": "list[dict]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\numeric_analysis\\scorer.py",
      "file_hash": "289f447b8a0643bbf8824d8f9551694f593864d5e7b39841774e27bdb43d8501",
      "functions": [
        {
          "name": "run_numeric_analysis",
          "signature": {
            "name": "run_numeric_analysis",
            "parameters": [
              {
                "name": "current_values",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "source",
                "annotation": "str",
                "default": null
              },
              {
                "name": "event_type",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Compute numeric salience from deltas, z-scores, trend, and volatility.\nOptionally triggers LLM summary or emergency analysis when thresholds are hit."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\numeric_analysis\\trending_window.py",
      "file_hash": "6f25f2f284f387d070e3c04855f9db9c5a66adbf530ac00016c64675caab0ebb",
      "functions": [
        {
          "name": "trend_direction",
          "signature": {
            "name": "trend_direction",
            "parameters": [
              {
                "name": "current",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "past_window",
                "annotation": "list",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\salience\\numeric_analysis\\volatility_window.py",
      "file_hash": "c24ba590197c24eca3769c6bdf070d96b3280d6689266efbb038c2ac294684df",
      "functions": [
        {
          "name": "volatility_ratio",
          "signature": {
            "name": "volatility_ratio",
            "parameters": [
              {
                "name": "current",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "past_window",
                "annotation": "list",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\atune\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\axon\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\axon\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\axon\\core\\query_API\\api_query.py",
      "file_hash": "f7afb1cd2d9750646fa0d64e625296c0f11db666678ea079fa6d533a0790be49",
      "functions": [
        {
          "name": "google_headers",
          "signature": {
            "name": "google_headers",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "none_headers",
          "signature": {
            "name": "none_headers",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "query_any_api",
          "signature": {
            "name": "query_any_api",
            "parameters": [
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "custom_fields",
                "annotation": "dict",
                "default": "None"
              }
            ],
            "return": "dict"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\axon\\core\\query_API\\api_runner.py",
      "file_hash": "ef6fc0821ba9d531e2e98ec821acf6097c667100fde1f785088c948aa5e03738",
      "functions": [
        {
          "name": "resolve_dynamic_fields",
          "signature": {
            "name": "resolve_dynamic_fields",
            "parameters": [
              {
                "name": "payload",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "offset_hours",
                "annotation": "int | None",
                "default": "None"
              }
            ],
            "return": "dict"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "load_pull_timestamps",
          "signature": {
            "name": "load_pull_timestamps",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "save_pull_timestamps",
          "signature": {
            "name": "save_pull_timestamps",
            "parameters": [
              {
                "name": "timestamps",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "fetch_token",
          "signature": {
            "name": "fetch_token",
            "parameters": [
              {
                "name": "auth_type",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "tool_exists",
          "signature": {
            "name": "tool_exists",
            "parameters": [
              {
                "name": "key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "ensure_tool_node",
          "signature": {
            "name": "ensure_tool_node",
            "parameters": [
              {
                "name": "entry",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Ensures a :Tool node exists in Neo4j for the given API registry entry."
        },
        {
          "name": "event_exists",
          "signature": {
            "name": "event_exists",
            "parameters": [
              {
                "name": "text_hash",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "build_rss_event_payload",
          "signature": {
            "name": "build_rss_event_payload",
            "parameters": [
              {
                "name": "entry",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "item",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "build_api_event_payload",
          "signature": {
            "name": "build_api_event_payload",
            "parameters": [
              {
                "name": "entry",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "raw_data",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "dispatch_event",
          "signature": {
            "name": "dispatch_event",
            "parameters": [
              {
                "name": "event_payload",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "source_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "fetch_and_send",
          "signature": {
            "name": "fetch_and_send",
            "parameters": [
              {
                "name": "entry",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\axon\\core\\query_API\\api_pull_registry.py",
      "file_hash": "f0a58f55753e4d7b8cad8cb0046b749f59f91cd87d1d5744f935c959c6103cc7",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\contra\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\contra\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\contra\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\eido\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\eido\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\eido\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\ember\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\ember\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\ember\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\ethor\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\ethor\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\ethor\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\collect_conflict_data.py",
      "file_hash": "88c04088ae9885735ccfc77de7695ca09740b3b3434e48011455152bd25716e6",
      "functions": [
        {
          "name": "collect_conflict_data",
          "signature": {
            "name": "collect_conflict_data",
            "parameters": [
              {
                "name": "days",
                "annotation": "int",
                "default": "7"
              },
              {
                "name": "driver",
                "annotation": "Any",
                "default": "None"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Collects all Conflicts and their associated questions + answers in the last N days.\n\nReturns:\n    A list of conflict dicts:\n    {\n        conflict_id: str,\n        system: str,\n        description: str,\n        created_at: str,\n        tags: list,\n        questions: [\n            {\n                question_id: str,\n                text: str,\n                response_type: 'text' | 'choice' | 'slider',\n                answers: list[str | int | float]\n            },\n            ...\n        ]\n    }"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\dao.py",
      "file_hash": "9531aecb1c23d1f016d49a727df5f8c1f6f6b0b335f8632c2b44e578f7214874",
      "functions": [
        {
          "name": "_load_json",
          "signature": {
            "name": "_load_json",
            "parameters": [
              {
                "name": "p",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_recent_codegen_feedback",
          "signature": {
            "name": "get_recent_codegen_feedback",
            "parameters": [
              {
                "name": "limit",
                "annotation": "int",
                "default": "10"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Gather recent Simula job outcomes for prompts:\n- Engine writes to .simula/runs/<id>/\n- Service writes to _simula/runs/<id>/\nWe read either/fboth and produce compact records."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\engine.py",
      "file_hash": "9e2ada2287f8977dccbd1888aa61bb5a1ec1eca1150b28fd4d0e05e538bd9864",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "seed",
                "annotation": "Optional[int]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get_synapse_selection",
          "signature": {
            "name": "_get_synapse_selection",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "state",
                "annotation": "EvoState",
                "default": null
              }
            ],
            "return": "SelectArmResponse"
          },
          "decorators": [],
          "docstring": "Calls Synapse to get a dynamic policy and arm selection for candidate generation."
        },
        {
          "name": "_report_synapse_outcome",
          "signature": {
            "name": "_report_synapse_outcome",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "candidate",
                "annotation": "ScoredCandidate",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Reports the fused score of an evaluated candidate back to Synapse."
        },
        {
          "name": "run_experiment",
          "signature": {
            "name": "run_experiment",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "spec",
                "annotation": "EvoSpec",
                "default": null
              }
            ],
            "return": "EvoResult"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "step",
          "signature": {
            "name": "step",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "state",
                "annotation": "EvoState",
                "default": null
              }
            ],
            "return": "EvoResult"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "EvoEngine",
          "bases": [],
          "decorators": [],
          "docstring": "Central orchestrator for Evo experiments. Operates as a high-level\nprocess governed by the Synapse learning core. Requests policy hints\nfor candidate generation and reports outcomes for continuous learning.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "seed",
                    "annotation": "Optional[int]",
                    "default": "None"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_get_synapse_selection",
              "signature": {
                "name": "_get_synapse_selection",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "state",
                    "annotation": "EvoState",
                    "default": null
                  }
                ],
                "return": "SelectArmResponse"
              },
              "decorators": [],
              "docstring": "Calls Synapse to get a dynamic policy and arm selection for candidate generation."
            },
            {
              "name": "_report_synapse_outcome",
              "signature": {
                "name": "_report_synapse_outcome",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "candidate",
                    "annotation": "ScoredCandidate",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Reports the fused score of an evaluated candidate back to Synapse."
            },
            {
              "name": "run_experiment",
              "signature": {
                "name": "run_experiment",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "spec",
                    "annotation": "EvoSpec",
                    "default": null
                  }
                ],
                "return": "EvoResult"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "step",
              "signature": {
                "name": "step",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "state",
                    "annotation": "EvoState",
                    "default": null
                  }
                ],
                "return": "EvoResult"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\evolve_from_conflict.py",
      "file_hash": "bb997818bf2e2442e4ba397a7f1e29c3c4f2f55f27cbba82d9f335ac6f62b8eb",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "context",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_local_extractive_summary",
          "signature": {
            "name": "_local_extractive_summary",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_sentences",
                "annotation": "int",
                "default": "4"
              },
              {
                "name": "max_chars",
                "annotation": "int",
                "default": "1200"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Deterministic, zero-dependency extractive summary."
        },
        {
          "name": "_normalize_prompt",
          "signature": {
            "name": "_normalize_prompt",
            "parameters": [
              {
                "name": "description",
                "annotation": "str",
                "default": null
              },
              {
                "name": "insights",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "extract_json_block",
          "signature": {
            "name": "extract_json_block",
            "parameters": [
              {
                "name": "raw",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": "Best-effort JSON extractor:\n1) Prefer a fenced ```json ... ``` block.\n2) Else scan for the first balanced {...}, respecting quoted strings/escapes."
        },
        {
          "name": "_call_llm_for_decision",
          "signature": {
            "name": "_call_llm_for_decision",
            "parameters": [
              {
                "name": "description",
                "annotation": "str",
                "default": null
              },
              {
                "name": "insights",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Calls /llm/call using the new, correct schema. It now constructs a\nvalid LlmCallRequest payload and handles the modernized response."
        },
        {
          "name": "_escalate_via_atune",
          "signature": {
            "name": "_escalate_via_atune",
            "parameters": [
              {
                "name": "description",
                "annotation": "str",
                "default": null
              },
              {
                "name": "insights",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "context",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Build a canonical event and send it to Atune for salience analysis and planning.\nAttempts HTTP (ENDPOINTS.ATUNE_ROUTE) first; falls back to in-process atune_router."
        },
        {
          "name": "_handle_deliberation",
          "signature": {
            "name": "_handle_deliberation",
            "parameters": [
              {
                "name": "payload",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "context",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "DELIBERATE: Route to Atune (not Unity). Atune decides whether to spawn Unity."
        },
        {
          "name": "_handle_ignore",
          "signature": {
            "name": "_handle_ignore",
            "parameters": [
              {
                "name": "payload",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_log_and_link_reflection",
          "signature": {
            "name": "_log_and_link_reflection",
            "parameters": [
              {
                "name": "conflict_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "llm_decision",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "evolve_from_conflict",
          "signature": {
            "name": "evolve_from_conflict",
            "parameters": [
              {
                "name": "conflict_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "description",
                "annotation": "str",
                "default": null
              },
              {
                "name": "insights",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "tags",
                "annotation": "List[str]",
                "default": "[]"
              }
            ],
            "return": "dict"
          },
          "decorators": [],
          "docstring": "Decide and act on a conflict:\n  1) Ask the LLM Bus for 'deliberate|execute|ignore' (with hardened fallbacks).\n  2) Log decision to graph.\n  3) If 'deliberate' → send canonical event to Atune (which may spawn Unity).\n     If 'execute' → run tool.  (Not yet implemented here.)\n     If 'ignore'  → no-op with logging."
        }
      ],
      "classes": [
        {
          "name": "EvoSession",
          "bases": [],
          "decorators": [],
          "docstring": "Minimal session-like object for the tool runner, granting Evo permission to act.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "context",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\route_by_question_type.py",
      "file_hash": "1992d215f865af4220f03f188c1869b1fff5643651e2b0fda8a3f57de1f00285",
      "functions": [
        {
          "name": "route_conflict_questions",
          "signature": {
            "name": "route_conflict_questions",
            "parameters": [
              {
                "name": "conflict_data",
                "annotation": "list[dict]",
                "default": null
              }
            ],
            "return": "list[dict]"
          },
          "decorators": [],
          "docstring": "Takes output from collect_conflict_data and routes questions by type to their analysis stream.\n\nReturns:\n    List of processed conflict summaries:\n    {\n        conflict_id: str,\n        system: str,\n        description: str,\n        insights: list[str],  # Summaries, stats, or insight sentences\n        tags: list[str]\n    }"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\create_frontend_questions.py",
      "file_hash": "9d20f14146c1957da6fe0aa9ca83962e864758e566eae11694e89d9d9b1acaaa",
      "functions": [
        {
          "name": "log_evo_question",
          "signature": {
            "name": "log_evo_question",
            "parameters": [
              {
                "name": "question",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "conflict_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Create an :EvoQuestion node and link it to the given :Conflict by uuid."
        },
        {
          "name": "get_recent_conflict_nodes",
          "signature": {
            "name": "get_recent_conflict_nodes",
            "parameters": [
              {
                "name": "days",
                "annotation": "int",
                "default": "1"
              }
            ],
            "return": "List[Dict[str, Any]] | Dict[str, str]"
          },
          "decorators": [],
          "docstring": "Return conflicts created within the last N days that do not yet have questions."
        },
        {
          "name": "create_frontend_questions",
          "signature": {
            "name": "create_frontend_questions",
            "parameters": [],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Finds unanswered conflicts and uses the LLM Bus to generate reflective questions."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\patrol.py",
      "file_hash": "03ae2bf6e41e2d3721749a83bb4f903d5e3ed0a47b1603db4542b9592adb7def",
      "functions": [
        {
          "name": "run_evo_patrol",
          "signature": {
            "name": "run_evo_patrol",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Evo orchestrator:\n  1) Gather recent conflicts\n  2) Route per switchboard flags and conflict state\n  3) Generate questions (human-in-the-loop) or fast-track autonomously\nDriverless: no direct Neo4j driver/session usage."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\choices\\analyze_choice_distribution.py",
      "file_hash": "1f955492ce7ce9bf5f82cc0dbc692ff3dd046ee6bfe8847778be9d15c22d93f2",
      "functions": [
        {
          "name": "process_choice_question",
          "signature": {
            "name": "process_choice_question",
            "parameters": [
              {
                "name": "question_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "question_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "answers",
                "annotation": "List[Dict]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Analyzes multiple-choice answers by calling the LLM Bus to extract insights.\n\nArgs:\n    question_id (str): UUID of the EvoQuestion.\n    question_text (str): The question text itself.\n    answers (list): List of user answer objects with a `response` field.\n\nReturns:\n    A summary insight string, either generated by the LLM or a simple fallback."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\sliders\\aggregate_slider_data.py",
      "file_hash": "ef357eaf82117c27fb7e3c9f9e6546a2a1edaa2408d05ae0085a5c144148819c",
      "functions": [
        {
          "name": "_format_stats",
          "signature": {
            "name": "_format_stats",
            "parameters": [
              {
                "name": "values",
                "annotation": "List[float]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Computes and formats descriptive statistics for a list of numbers."
        },
        {
          "name": "process_slider_question",
          "signature": {
            "name": "process_slider_question",
            "parameters": [
              {
                "name": "question_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "question_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "answers",
                "annotation": "List[Dict]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Analyzes slider-based answers by calling the LLM Bus to extract insights.\n\nArgs:\n    question_id (str): UUID of the EvoQuestion.\n    question_text (str): The question text.\n    answers (list): List of user answers with `response` (float/int/str).\n\nReturns:\n    An insight summary, either generated by the LLM or a simple fallback."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\text\\cluster_answers.py",
      "file_hash": "d6de5fac48d61adac740b65eaf38328b60a8c0838d4522c5135caadf01c1bdcf",
      "functions": [
        {
          "name": "process_text_question",
          "signature": {
            "name": "process_text_question",
            "parameters": [
              {
                "name": "question_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "question_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "answers",
                "annotation": "List[Dict]",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Full pipeline for clustering and summarizing text-based EvoAnswers using the LLM Bus.\nReturns a list of insight strings to attach to the conflict summary."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\archivist\\__init__.py",
      "file_hash": "1ccfa371fa9f2f20ff15edbe75e7991420db951b632aa6a839bfa8df50392df0",
      "functions": [
        {
          "name": "record_experiment",
          "signature": {
            "name": "record_experiment",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "spec",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Persist a new EvoExperiment node and return its key."
        },
        {
          "name": "record_generation",
          "signature": {
            "name": "record_generation",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "parent_key",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "cand",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "call_id",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Persist an EvoCandidate node, link to parent, and optionally to PromptCall."
        }
      ],
      "classes": [
        {
          "name": "Archivist",
          "bases": [],
          "decorators": [],
          "docstring": "Handles persistence of Evo experiments, candidates, and lineage in Neo4j.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "record_experiment",
              "signature": {
                "name": "record_experiment",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "spec",
                    "annotation": "Any",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": "Persist a new EvoExperiment node and return its key."
            },
            {
              "name": "record_generation",
              "signature": {
                "name": "record_generation",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "parent_key",
                    "annotation": "Optional[str]",
                    "default": null
                  },
                  {
                    "name": "cand",
                    "annotation": "Any",
                    "default": null
                  },
                  {
                    "name": "call_id",
                    "annotation": "Optional[str]",
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": "Persist an EvoCandidate node, link to parent, and optionally to PromptCall."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\selector\\__init__.py",
      "file_hash": "7916b4ed53e4d426c7b8eaddab4e72153bbf9f9f4bd3d966070905a2af480a6d",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "pick",
          "signature": {
            "name": "pick",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "scored",
                "annotation": "List[ScoredCandidate]",
                "default": null
              },
              {
                "name": "policy",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": "List[ScoredCandidate]"
          },
          "decorators": [],
          "docstring": "Main selection entry point."
        },
        {
          "name": "_threshold_pick",
          "signature": {
            "name": "_threshold_pick",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "scored",
                "annotation": "List[ScoredCandidate]",
                "default": null
              },
              {
                "name": "policy",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": "List[ScoredCandidate]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_top_k_pick",
          "signature": {
            "name": "_top_k_pick",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "scored",
                "annotation": "List[ScoredCandidate]",
                "default": null
              },
              {
                "name": "policy",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": "List[ScoredCandidate]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_bandit_pick",
          "signature": {
            "name": "_bandit_pick",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "scored",
                "annotation": "List[ScoredCandidate]",
                "default": null
              },
              {
                "name": "policy",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": "List[ScoredCandidate]"
          },
          "decorators": [],
          "docstring": "Contextual bandit selection using Equor's LinUCB learner.\nPersistent across sessions, logs to Neo4j for history."
        },
        {
          "name": "log_bandit_reward",
          "signature": {
            "name": "log_bandit_reward",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "winners",
                "annotation": "List[ScoredCandidate]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Called after scoring to update the bandit store and log reward to Neo4j."
        },
        {
          "name": "evolve_bandit_strategies",
          "signature": {
            "name": "evolve_bandit_strategies",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Meta-mutation: merge, split, or spawn new arms based on performance stats."
        },
        {
          "name": "_find_merge_candidates",
          "signature": {
            "name": "_find_merge_candidates",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arms",
                "annotation": "List[dict]",
                "default": null
              }
            ],
            "return": "List[Tuple[str, str]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_find_split_candidates",
          "signature": {
            "name": "_find_split_candidates",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arms",
                "annotation": "List[dict]",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "Selector",
          "bases": [],
          "decorators": [],
          "docstring": "Selects winners from scored candidates according to policy.\nSupports:\n  - top_k\n  - threshold\n  - contextual bandit (LinUCB via Equor)\nAlso manages periodic meta-mutation of the bandit arms.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "pick",
              "signature": {
                "name": "pick",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "scored",
                    "annotation": "List[ScoredCandidate]",
                    "default": null
                  },
                  {
                    "name": "policy",
                    "annotation": "dict",
                    "default": null
                  }
                ],
                "return": "List[ScoredCandidate]"
              },
              "decorators": [],
              "docstring": "Main selection entry point."
            },
            {
              "name": "_threshold_pick",
              "signature": {
                "name": "_threshold_pick",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "scored",
                    "annotation": "List[ScoredCandidate]",
                    "default": null
                  },
                  {
                    "name": "policy",
                    "annotation": "dict",
                    "default": null
                  }
                ],
                "return": "List[ScoredCandidate]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_top_k_pick",
              "signature": {
                "name": "_top_k_pick",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "scored",
                    "annotation": "List[ScoredCandidate]",
                    "default": null
                  },
                  {
                    "name": "policy",
                    "annotation": "dict",
                    "default": null
                  }
                ],
                "return": "List[ScoredCandidate]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_bandit_pick",
              "signature": {
                "name": "_bandit_pick",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "scored",
                    "annotation": "List[ScoredCandidate]",
                    "default": null
                  },
                  {
                    "name": "policy",
                    "annotation": "dict",
                    "default": null
                  }
                ],
                "return": "List[ScoredCandidate]"
              },
              "decorators": [],
              "docstring": "Contextual bandit selection using Equor's LinUCB learner.\nPersistent across sessions, logs to Neo4j for history."
            },
            {
              "name": "log_bandit_reward",
              "signature": {
                "name": "log_bandit_reward",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "winners",
                    "annotation": "List[ScoredCandidate]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Called after scoring to update the bandit store and log reward to Neo4j."
            },
            {
              "name": "evolve_bandit_strategies",
              "signature": {
                "name": "evolve_bandit_strategies",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Meta-mutation: merge, split, or spawn new arms based on performance stats."
            },
            {
              "name": "_find_merge_candidates",
              "signature": {
                "name": "_find_merge_candidates",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arms",
                    "annotation": "List[dict]",
                    "default": null
                  }
                ],
                "return": "List[Tuple[str, str]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_find_split_candidates",
              "signature": {
                "name": "_find_split_candidates",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arms",
                    "annotation": "List[dict]",
                    "default": null
                  }
                ],
                "return": "List[str]"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\scorer\\__init__.py",
      "file_hash": "0d0eceaf781e09c229d743f85fd416f705dd4c72a902e6c66c45cf410a12c139",
      "functions": [
        {
          "name": "_load_weights_from_env",
          "signature": {
            "name": "_load_weights_from_env",
            "parameters": [],
            "return": "Optional[Dict[str, Dict[str, Any]]]"
          },
          "decorators": [],
          "docstring": "Read EVO_SCORE_WEIGHTS as JSON mapping:\n  {\"roi\": {\"weight\": 2.0, \"higher_is_better\": true}, \"latency_ms\": {\"weight\": 1.5, \"higher_is_better\": false}}"
        },
        {
          "name": "_load_weights_from_graph",
          "signature": {
            "name": "_load_weights_from_graph",
            "parameters": [],
            "return": "Optional[Dict[str, Dict[str, Any]]]"
          },
          "decorators": [],
          "docstring": "Attempt to pull metric weights from Neo4j if the driver is available and we can safely call it.\nExpects a node like:\n  (w:EvoScoreWeights {name:'evo_composite'}) with property `map` as JSON described above."
        },
        {
          "name": "_fetch",
          "signature": {
            "name": "_fetch",
            "parameters": [],
            "return": "Optional[Dict[str, Dict[str, Any]]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get_metric_config",
          "signature": {
            "name": "_get_metric_config",
            "parameters": [
              {
                "name": "metric_names",
                "annotation": "Tuple[str, ...]",
                "default": null
              }
            ],
            "return": "Dict[str, Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Determine (weight, higher_is_better) for each metric.\nPriority: Graph → ENV → defaults.\nDefaults: weight=1.0, higher_is_better=True."
        },
        {
          "name": "_robust_z_to_unit",
          "signature": {
            "name": "_robust_z_to_unit",
            "parameters": [
              {
                "name": "x",
                "annotation": "float",
                "default": null
              },
              {
                "name": "median",
                "annotation": "float",
                "default": null
              },
              {
                "name": "mad",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Robust z-score using MAD (scaled), then squashed to [0,1] via logistic.\nFor MAD=0, fall back to std; if still degenerate, return 0.5."
        },
        {
          "name": "_summarize_scale",
          "signature": {
            "name": "_summarize_scale",
            "parameters": [
              {
                "name": "values",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "higher_is_better",
                "annotation": "bool",
                "default": null
              }
            ],
            "return": "Tuple[float, float]"
          },
          "decorators": [],
          "docstring": "Compute median and MAD for the provided numeric values.\nIf direction is \"lower is better\", invert by negation upfront.\nReturns (median, mad) in transformed space."
        },
        {
          "name": "fuse_metrics",
          "signature": {
            "name": "fuse_metrics",
            "parameters": [
              {
                "name": "baseline",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "custom",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "heuristics",
                "annotation": "Dict[str, float]",
                "default": null
              }
            ],
            "return": "Dict[str, float]"
          },
          "decorators": [],
          "docstring": "Merge metric sources, normalize robustly, and produce a weighted composite score.\n\nRules:\n  - All numeric metrics are included.\n  - Each metric is normalized via robust z→logistic to [0,1], respecting direction.\n  - Weights & directions are loaded dynamically (graph or ENV) with safe fallbacks.\n  - The final score is a weighted mean of normalized metrics.\n  - Returns original metrics + 'score' and a per-metric 'score_<name>' for transparency."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\reporter\\__init__.py",
      "file_hash": "f5c0b9bed7b215e8ece7f36e41be6ed96bbc001f54edfd9c233e4526b1707127",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "log_results",
          "signature": {
            "name": "log_results",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "result",
                "annotation": "EvoResult",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Persist winners and summary metadata to Neo4j."
        },
        {
          "name": "generate_summary",
          "signature": {
            "name": "generate_summary",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "winners",
                "annotation": "List[ScoredCandidate]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Simple textual summary for Ops broadcast."
        }
      ],
      "classes": [
        {
          "name": "Reporter",
          "bases": [],
          "decorators": [],
          "docstring": "Handles logging and reporting of EvoEngine results to Neo4j and other sinks.\nDriverless: uses cypher_query(...) for all graph I/O.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "log_results",
              "signature": {
                "name": "log_results",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "result",
                    "annotation": "EvoResult",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Persist winners and summary metadata to Neo4j."
            },
            {
              "name": "generate_summary",
              "signature": {
                "name": "generate_summary",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "winners",
                    "annotation": "List[ScoredCandidate]",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": "Simple textual summary for Ops broadcast."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\schemas\\__init__.py",
      "file_hash": "bb15b9fc6d57606cbf836ac6cc7124c43a54e4fe8ed8a1e2f114dc7cff9926c4",
      "functions": [],
      "classes": [
        {
          "name": "EvoSpec",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Defines an Evo experiment request.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "goal",
              "type": "str",
              "default": null
            },
            {
              "name": "seed_content",
              "type": "str",
              "default": null
            },
            {
              "name": "selection_policy",
              "type": "Dict[str, Any]",
              "default": "{'mode': 'top_k', 'k': 1}"
            }
          ],
          "methods": []
        },
        {
          "name": "EvoState",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Tracks the running state of an Evo experiment.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "spec",
              "type": "EvoSpec",
              "default": null
            },
            {
              "name": "exp_key",
              "type": "str",
              "default": null
            },
            {
              "name": "step",
              "type": "int",
              "default": null
            },
            {
              "name": "current_parent",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "ScoredCandidate",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Candidate with associated metrics after evaluation.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "key",
              "type": "str",
              "default": null
            },
            {
              "name": "metrics",
              "type": "Dict[str, Any]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "EvoResult",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Outcome of an Evo experiment step.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "exp_key",
              "type": "str",
              "default": null
            },
            {
              "name": "winners",
              "type": "List[ScoredCandidate]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "EvalReport",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Output from Evaluator.evaluate().",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "baseline",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "custom",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "heuristics",
              "type": "Dict[str, Any]",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\EvoEngine\\registry_sync\\__init__.py",
      "file_hash": "97ceb9c2f6c1d10c6483f179ff1e993c9b4eb62bd2b465435ebf6c8920e43f93",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "driver",
                "annotation": "Any",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "upsert_tool",
          "signature": {
            "name": "upsert_tool",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "candidate_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "RegistrySync",
          "bases": [],
          "decorators": [],
          "docstring": "Pushes selected Evo candidates into Synk's tool registry.\nDriverless: no Neo4j driver/session is stored or passed.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "driver",
                    "annotation": "Any",
                    "default": "None"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "upsert_tool",
              "signature": {
                "name": "upsert_tool",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "candidate_key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\evo\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\mythos\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\mythos\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\mythos\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\nova\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\nova\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\nova\\core\\nova_tool_orchestrator.py",
      "file_hash": "e237e05949588e3122047cbff3ee6327b67932ace28b49c607b59bf4f79a6b9b",
      "functions": [
        {
          "name": "create_tool_from_reflection",
          "signature": {
            "name": "create_tool_from_reflection",
            "parameters": [
              {
                "name": "driver",
                "annotation": "AsyncDriver",
                "default": null
              },
              {
                "name": "reflection_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "instructions",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "tool('Nova')"
          ],
          "docstring": "🧠 Full orchestration of tool creation from Evo + Unity consensus.\n\nThis function:\n1. Retrieves EvoReflection node by ID\n2. Uses Nova's planner to generate a `tool_spec` using both:\n   • Evo's raw reflection\n   • Unity's consensus instructions\n3. Passes that spec to Simula for generation and self-correction\n4. Validates the output using Nova's criteria\n5. Stress tests the resulting tool\n6. Logs a ToolCreationReport to Neo4j"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\nova\\core\\nova_tool_planner.py",
      "file_hash": "996b468b9446ab6bb34ffd2ba428e576ea2170308827c365119105d01d894a9b",
      "functions": [
        {
          "name": "plan_tool_from_reflection",
          "signature": {
            "name": "plan_tool_from_reflection",
            "parameters": [
              {
                "name": "evo_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "instructions",
                "annotation": "str",
                "default": null
              },
              {
                "name": "reflection_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "dict"
          },
          "decorators": [],
          "docstring": "Nova's tool planner combines Evo's insight + Unity's consensus instruction\nto produce a structured tool_spec dictionary.\n\nArgs:\n    evo_text: Raw content from EvoReflection node (e.g., node[\"text\"])\n    instructions: Directive text from Unity dialectic\n    reflection_id: Source node ID\n\nReturns:\n    tool_spec: {\n        tool_name, folder, description,\n        parameters, expected_keys, success_criteria\n    }"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\nova\\core\\nova_validators.py",
      "file_hash": "c70d17b2ef9b7c42d3b2d171b7290d1f8872ad35588415c3aa9e069af51e9b8d",
      "functions": [
        {
          "name": "validate_code_output",
          "signature": {
            "name": "validate_code_output",
            "parameters": [
              {
                "name": "output",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "tool_metadata",
                "annotation": "Dict",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Validates the structure of a tool's output against expected keys\ndefined in the tool's metadata.\n\nArgs:\n    output (Any): The result returned from the executed tool\n    tool_metadata (dict): Contains expected output schema via 'expected_keys'\n\nReturns:\n    dict: {\n        \"passed\": bool,\n        \"feedback\": str (optional)\n    }"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\nova\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\core\\origin_ingest.py",
      "file_hash": "f1623f4e19855e082316e0c124c4b740a3d2bceb939e537d5c8e7eeb2e34c61c",
      "functions": [
        {
          "name": "ensure_origin_indices",
          "signature": {
            "name": "ensure_origin_indices",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_embed_for_node",
          "signature": {
            "name": "_embed_for_node",
            "parameters": [
              {
                "name": "title",
                "annotation": "str",
                "default": null
              },
              {
                "name": "summary",
                "annotation": "str",
                "default": null
              },
              {
                "name": "what",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_embed_for_edge",
          "signature": {
            "name": "_embed_for_edge",
            "parameters": [
              {
                "name": "from_title",
                "annotation": "str",
                "default": null
              },
              {
                "name": "rel_label",
                "annotation": "str",
                "default": null
              },
              {
                "name": "to_title",
                "annotation": "str",
                "default": null
              },
              {
                "name": "note",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_has_origin_label",
          "signature": {
            "name": "_has_origin_label",
            "parameters": [
              {
                "name": "iid",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "force_origin_label",
          "signature": {
            "name": "force_origin_label",
            "parameters": [
              {
                "name": "node_id",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_title_by_id",
          "signature": {
            "name": "_title_by_id",
            "parameters": [
              {
                "name": "iid",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "create_origin_node",
          "signature": {
            "name": "create_origin_node",
            "parameters": [
              {
                "name": "contributor",
                "annotation": "str",
                "default": null
              },
              {
                "name": "title",
                "annotation": "str",
                "default": null
              },
              {
                "name": "summary",
                "annotation": "str",
                "default": null
              },
              {
                "name": "what",
                "annotation": "str",
                "default": null
              },
              {
                "name": "where",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "when",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "tags",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "Tuple[str, int]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "resolve_event_or_internal_id",
          "signature": {
            "name": "resolve_event_or_internal_id",
            "parameters": [
              {
                "name": "any_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "create_edges_from",
          "signature": {
            "name": "create_edges_from",
            "parameters": [
              {
                "name": "from_internal_id",
                "annotation": "int",
                "default": null
              },
              {
                "name": "edges",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": "edges: [{to_id, label, note}]\nAdds relationship embedding.\nfrom_internal_id must be :Origin."
        },
        {
          "name": "search_mixed",
          "signature": {
            "name": "search_mixed",
            "parameters": [
              {
                "name": "query",
                "annotation": "str",
                "default": null
              },
              {
                "name": "k",
                "annotation": "int",
                "default": "10"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\core\\tools\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\core\\architecture\\arch_patrol.py",
      "file_hash": "9c872d35fd92de26b4608990fb51b12128f3fa32cd0c1500f2f427e98bb7da6d",
      "functions": [
        {
          "name": "_file_lang",
          "signature": {
            "name": "_file_lang",
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_sha256",
          "signature": {
            "name": "_sha256",
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_count_loc",
          "signature": {
            "name": "_count_loc",
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "source_code",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_qualname",
          "signature": {
            "name": "_qualname",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "stack",
                "annotation": "List[ast.AST]",
                "default": null
              },
              {
                "name": "node",
                "annotation": "ast.FunctionDef",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "parse",
          "signature": {
            "name": "parse",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "visit_ClassDef",
          "signature": {
            "name": "visit_ClassDef",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "node",
                "annotation": "ast.ClassDef",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "visit_FunctionDef",
          "signature": {
            "name": "visit_FunctionDef",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "node",
                "annotation": "ast.FunctionDef",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_function_uid",
          "signature": {
            "name": "get_function_uid",
            "parameters": [
              {
                "name": "repo_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "file_rel_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "qualname",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "upsert_artifacts_batch",
          "signature": {
            "name": "upsert_artifacts_batch",
            "parameters": [
              {
                "name": "rows",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "upsert_functions_batch",
          "signature": {
            "name": "upsert_functions_batch",
            "parameters": [
              {
                "name": "rows",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_embedding_text",
          "signature": {
            "name": "_embedding_text",
            "parameters": [
              {
                "name": "file_rel_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "fn",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "crawl_and_ingest",
          "signature": {
            "name": "crawl_and_ingest",
            "parameters": [
              {
                "name": "root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "repo_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "embed",
                "annotation": "bool",
                "default": "True"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "CodeParser",
          "bases": [],
          "decorators": [],
          "docstring": "Parses a .py file to extract top-level and class method functions.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "file_path",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "source_code",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_qualname",
              "signature": {
                "name": "_qualname",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "stack",
                    "annotation": "List[ast.AST]",
                    "default": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.FunctionDef",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "parse",
              "signature": {
                "name": "parse",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "V",
          "bases": [
            "ast.NodeVisitor"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "visit_ClassDef",
              "signature": {
                "name": "visit_ClassDef",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.ClassDef",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "visit_FunctionDef",
              "signature": {
                "name": "visit_FunctionDef",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.FunctionDef",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\core\\architecture\\arch_execution.py",
      "file_hash": "79c9740d2f0498be9201e9908d29ae4a637862cf23cb133bf066a7859ae2de1b",
      "functions": [
        {
          "name": "fetch_system_function",
          "signature": {
            "name": "fetch_system_function",
            "parameters": [
              {
                "name": "uid",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[SystemFunctionDesc]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "search_system_functions",
          "signature": {
            "name": "search_system_functions",
            "parameters": [
              {
                "name": "query",
                "annotation": "str",
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "5"
              }
            ],
            "return": "List[SystemFunctionDesc]"
          },
          "decorators": [],
          "docstring": "Try vector search if embeddings exist, else fallback to text search."
        },
        {
          "name": "_module_from_file_path",
          "signature": {
            "name": "_module_from_file_path",
            "parameters": [
              {
                "name": "file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_resolve_attr_chain",
          "signature": {
            "name": "_resolve_attr_chain",
            "parameters": [
              {
                "name": "root",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "qualname",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ensure_syspath",
          "signature": {
            "name": "_ensure_syspath",
            "parameters": [
              {
                "name": "repo_root",
                "annotation": "Optional[str]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_safe_jsonish",
          "signature": {
            "name": "_safe_jsonish",
            "parameters": [
              {
                "name": "x",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "max_chars",
                "annotation": "int",
                "default": "8000"
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_log_run",
          "signature": {
            "name": "_log_run",
            "parameters": [
              {
                "name": "desc",
                "annotation": "SystemFunctionDesc",
                "default": null
              },
              {
                "name": "ok",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "started",
                "annotation": "float",
                "default": null
              },
              {
                "name": "duration_ms",
                "annotation": "int",
                "default": null
              },
              {
                "name": "args",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "result",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "caller",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "execute_by_uid",
          "signature": {
            "name": "execute_by_uid",
            "parameters": [
              {
                "name": "uid",
                "annotation": "str",
                "default": null
              },
              {
                "name": "args",
                "annotation": "Dict[str, Any] | None",
                "default": "None"
              },
              {
                "name": "repo_root",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "log",
                "annotation": "bool",
                "default": "True"
              },
              {
                "name": "caller",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": "Fetches `SystemFunction` from Neo by uid, imports it using repo_root + file_path,\nresolves qualname, and executes it with **args."
        },
        {
          "name": "search_and_execute",
          "signature": {
            "name": "search_and_execute",
            "parameters": [
              {
                "name": "query",
                "annotation": "str",
                "default": null
              },
              {
                "name": "args",
                "annotation": "Dict[str, Any] | None",
                "default": "None"
              },
              {
                "name": "repo_root",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": "1"
              },
              {
                "name": "log",
                "annotation": "bool",
                "default": "True"
              },
              {
                "name": "caller",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "SystemFunctionDesc",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "uid",
              "type": "str",
              "default": null
            },
            {
              "name": "file_path",
              "type": "str",
              "default": null
            },
            {
              "name": "qualname",
              "type": "str",
              "default": null
            },
            {
              "name": "signature",
              "type": "str",
              "default": "''"
            },
            {
              "name": "docstring",
              "type": "str",
              "default": "''"
            },
            {
              "name": "tool_name",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\core\\immune\\auto_instrument.py",
      "file_hash": "30c72ef955238c54f9c06fad9cb07ac2bedfd414c71ca0fe247bb4008317a203",
      "functions": [
        {
          "name": "_wrap_callable",
          "signature": {
            "name": "_wrap_callable",
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "default": null
              },
              {
                "name": "component",
                "annotation": "str",
                "default": null
              },
              {
                "name": "version",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "severity",
                "annotation": "str",
                "default": "'medium'"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Wrap a callable so any exception is reported via log_conflict (driverless).\nIdempotent: won't double-wrap the same function."
        },
        {
          "name": "wrapped",
          "signature": {
            "name": "wrapped",
            "parameters": [
              {
                "name": "*a",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kw",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "wrapped",
          "signature": {
            "name": "wrapped",
            "parameters": [
              {
                "name": "*a",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kw",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_instrument_class",
          "signature": {
            "name": "_instrument_class",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "component",
                "annotation": "str",
                "default": null
              },
              {
                "name": "version",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "include_privates",
                "annotation": "bool",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_instrument_module",
          "signature": {
            "name": "_instrument_module",
            "parameters": [
              {
                "name": "mod",
                "annotation": "ModuleType",
                "default": null
              },
              {
                "name": "component",
                "annotation": "str",
                "default": null
              },
              {
                "name": "version",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "include_privates",
                "annotation": "bool",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "install_immune",
          "signature": {
            "name": "install_immune",
            "parameters": [
              {
                "name": "driver",
                "annotation": "object | None",
                "default": "None"
              },
              {
                "name": "include_packages",
                "annotation": "Sequence[str]",
                "default": "('systems', 'core', 'services')"
              },
              {
                "name": "version",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "include_privates",
                "annotation": "bool",
                "default": "False"
              },
              {
                "name": "exclude_predicate",
                "annotation": "Optional[Callable[[str], bool]]",
                "default": "None"
              },
              {
                "name": "component_resolver",
                "annotation": "Optional[Callable[[str], str]]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Auto-wrap all callables in your first-party packages and set global exception/logging hooks.\nCall once at startup (FastAPI lifespan, CLI main, worker boot).\n\nNOTE: The `driver` parameter is ignored (driverless refactor)."
        },
        {
          "name": "excepthook",
          "signature": {
            "name": "excepthook",
            "parameters": [
              {
                "name": "etype",
                "annotation": null,
                "default": null
              },
              {
                "name": "value",
                "annotation": null,
                "default": null
              },
              {
                "name": "tb",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "thread_hook",
          "signature": {
            "name": "thread_hook",
            "parameters": [
              {
                "name": "args",
                "annotation": "threading.ExceptHookArgs",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "async_handler",
          "signature": {
            "name": "async_handler",
            "parameters": [
              {
                "name": "loop",
                "annotation": null,
                "default": null
              },
              {
                "name": "context",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "component",
                "annotation": "str",
                "default": "'logger'"
              },
              {
                "name": "version",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "emit",
          "signature": {
            "name": "emit",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "record",
                "annotation": "logging.LogRecord",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "ConflictLogHandler",
          "bases": [
            "logging.Handler"
          ],
          "decorators": [],
          "docstring": "Convert logger.error/exception into Conflict nodes (driverless; non-blocking for sync loggers).",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "component",
                    "annotation": "str",
                    "default": "'logger'"
                  },
                  {
                    "name": "version",
                    "annotation": "Optional[str]",
                    "default": "None"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "emit",
              "signature": {
                "name": "emit",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "record",
                    "annotation": "logging.LogRecord",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\core\\immune\\conflict_sdk.py",
      "file_hash": "4747a293c03756d4c2ea88d63f32dc144b28665f59f7afee4223bfb7fafc1d07",
      "functions": [
        {
          "name": "_redact",
          "signature": {
            "name": "_redact",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_normalize_stack",
          "signature": {
            "name": "_normalize_stack",
            "parameters": [
              {
                "name": "tb_list",
                "annotation": null,
                "default": null
              },
              {
                "name": "depth",
                "annotation": "int",
                "default": "6"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "make_signature",
          "signature": {
            "name": "make_signature",
            "parameters": [
              {
                "name": "exc",
                "annotation": "BaseException",
                "default": null
              },
              {
                "name": "component",
                "annotation": "str",
                "default": null
              },
              {
                "name": "version",
                "annotation": "str",
                "default": null
              },
              {
                "name": "extra",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "log_conflict",
          "signature": {
            "name": "log_conflict",
            "parameters": [
              {
                "name": "exc",
                "annotation": "BaseException",
                "default": null
              },
              {
                "name": "component",
                "annotation": "str",
                "default": null
              },
              {
                "name": "severity",
                "annotation": "str",
                "default": "'medium'"
              },
              {
                "name": "version",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "context",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Safely logs a conflict by publishing a decoupled event.\nIncludes a recursion guard to prevent feedback loops."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\qora\\core\\immune\\conflict_ingestor.py",
      "file_hash": "0eb069f146532a14d2ec88f0d546a29d959ac5c5cf90951d60a46ec920b301bd",
      "functions": [
        {
          "name": "on_conflict_detected",
          "signature": {
            "name": "on_conflict_detected",
            "parameters": [
              {
                "name": "payload",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "This event handler listens for 'conflict_detected' events and writes\nthe conflict and its evidence to the graph."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\api\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\tools\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\tools\\cluster.py",
      "file_hash": "6169e570d0cf70e66ab951e0abd379091e4b309b21c6de59193f27cb09cb08dd",
      "functions": [
        {
          "name": "fetch_all_event_content",
          "signature": {
            "name": "fetch_all_event_content",
            "parameters": [
              {
                "name": "driver",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Fetches the 'event_id' and a concatenated 'text' property from all :Event nodes."
        },
        {
          "name": "get_clusters_from_gemini",
          "signature": {
            "name": "get_clusters_from_gemini",
            "parameters": [
              {
                "name": "event_data",
                "annotation": "list[dict]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Mock Gemini CLUSTERING task using embeddings + KMeans."
        },
        {
          "name": "update_nodes_with_clusters",
          "signature": {
            "name": "update_nodes_with_clusters",
            "parameters": [
              {
                "name": "driver",
                "annotation": null,
                "default": null
              },
              {
                "name": "clustered_data",
                "annotation": "list[dict]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Updates the nodes in Neo4j with their new cluster ID."
        },
        {
          "name": "run_native_clustering_pipeline",
          "signature": {
            "name": "run_native_clustering_pipeline",
            "parameters": [
              {
                "name": "driver",
                "annotation": null,
                "default": "None"
              },
              {
                "name": "*_",
                "annotation": null,
                "default": null
              },
              {
                "name": "**__",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "The main function to execute the entire native clustering process.\nIf driver is not passed, gets it automatically."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\tools\\cluster_tools.py",
      "file_hash": "e15c54e86e1fe79300ff44f2d6f6588b33f57d2a843fb00f2b8c8a7f0255e17f",
      "functions": [
        {
          "name": "fetch_cluster_context_tool",
          "signature": {
            "name": "fetch_cluster_context_tool",
            "parameters": [
              {
                "name": "driver_like",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "context",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "cluster_keys",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "per_cluster",
                "annotation": "int",
                "default": "5"
              },
              {
                "name": "meta",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Fetch up to `per_cluster` recent member events for each cluster_key.\nReturns { \"<cluster_key>\": { \"members\": [...], \"size\": int } }"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\tools\\clusters.py",
      "file_hash": "60f596fea4fe82ff95cb28b01addb236b3a578174d2b0dc23c050beb7ffded52",
      "functions": [
        {
          "name": "_fetch_member_texts",
          "signature": {
            "name": "_fetch_member_texts",
            "parameters": [
              {
                "name": "member_ids",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Fetch text-y fields to summarize a cluster (best-effort)."
        },
        {
          "name": "_fetch_member_vectors",
          "signature": {
            "name": "_fetch_member_vectors",
            "parameters": [
              {
                "name": "member_ids",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "prop",
                "annotation": "str",
                "default": "EVENT_PROP_VECTOR"
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Return NxD matrix of member vectors (rows align with provided IDs that have vectors)."
        },
        {
          "name": "_centroid",
          "signature": {
            "name": "_centroid",
            "parameters": [
              {
                "name": "mat",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": "Mean vector with L2 renorm (cosine-friendly)."
        },
        {
          "name": "_summarize_texts",
          "signature": {
            "name": "_summarize_texts",
            "parameters": [
              {
                "name": "texts",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "max_chars",
                "annotation": "int",
                "default": "4000"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Summarize a bunch of texts into a short cluster description."
        },
        {
          "name": "ensure_cluster_vector_index",
          "signature": {
            "name": "ensure_cluster_vector_index",
            "parameters": [
              {
                "name": "driver",
                "annotation": null,
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Guarantee a vector index exists for Cluster.cluster_vector_gemini."
        },
        {
          "name": "upsert_cluster",
          "signature": {
            "name": "upsert_cluster",
            "parameters": [
              {
                "name": "run_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cluster_id",
                "annotation": "int",
                "default": null
              },
              {
                "name": "member_event_ids",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "model",
                "annotation": "str",
                "default": "'gemini-2.5-pro'"
              },
              {
                "name": "compute_summary",
                "annotation": "bool",
                "default": "True"
              },
              {
                "name": "driver",
                "annotation": null,
                "default": "None"
              }
            ],
            "return": "Dict"
          },
          "decorators": [],
          "docstring": "Create/refresh a :Cluster node and link members.\n\nWrites:\n  - c:Cluster {cluster_key, run_id, cluster_id, size, model, created_at}\n  - c.centroid_gemini\n  - c.summary (optional)\n  - c.cluster_vector_gemini (embedding of summary)\n  - (e:Event)-[:IN_CLUSTER {run_id}]->(c)"
        },
        {
          "name": "link_members",
          "signature": {
            "name": "link_members",
            "parameters": [
              {
                "name": "run_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cluster_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "member_event_ids",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "driver",
                "annotation": null,
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Create/ensure (:Event)-[:IN_CLUSTER {run_id}]->(:Cluster {cluster_key})."
        },
        {
          "name": "materialize_clusters_from_event_assignments",
          "signature": {
            "name": "materialize_clusters_from_event_assignments",
            "parameters": [
              {
                "name": "run_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "min_size",
                "annotation": "int",
                "default": "1"
              },
              {
                "name": "driver",
                "annotation": null,
                "default": "None"
              },
              {
                "name": "compute_summary",
                "annotation": "bool",
                "default": "True"
              }
            ],
            "return": "Dict[int, Dict]"
          },
          "decorators": [],
          "docstring": "When Events already have e.cluster_id set, create/refresh :Cluster nodes in bulk.\n\nReturns { cluster_id: upsert_info }"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\tools\\mesa.py",
      "file_hash": "3abe709531cda1aeefa4ed6ebfa197f1a7138ad7ad83427052043a2196e53efa",
      "functions": [
        {
          "name": "create_agent_class",
          "signature": {
            "name": "create_agent_class",
            "parameters": [
              {
                "name": "name",
                "annotation": null,
                "default": null
              },
              {
                "name": "agent_fn",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Dynamically create a Mesa agent class.\nArgs:\n    name (str): Agent class name.\n    agent_fn (callable): Function with custom agent step logic.\nReturns:\n    Mesa Agent subclass."
        },
        {
          "name": "create_model",
          "signature": {
            "name": "create_model",
            "parameters": [
              {
                "name": "num_agents",
                "annotation": null,
                "default": null
              },
              {
                "name": "agent_class",
                "annotation": null,
                "default": null
              },
              {
                "name": "width",
                "annotation": null,
                "default": "10"
              },
              {
                "name": "height",
                "annotation": null,
                "default": "10"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Create a basic Mesa model with RandomActivation scheduler.\nArgs:\n    num_agents (int): Number of agents.\n    agent_class: Agent class (from create_agent_class).\n    width (int): (Grid width, optional if you use spatial grid).\n    height (int): (Grid height).\nReturns:\n    Mesa Model instance."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "step",
          "signature": {
            "name": "step",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run_model",
          "signature": {
            "name": "run_model",
            "parameters": [
              {
                "name": "model",
                "annotation": null,
                "default": null
              },
              {
                "name": "steps",
                "annotation": null,
                "default": "10"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Run a Mesa model for a given number of steps.\nArgs:\n    model: Mesa Model instance.\n    steps (int): Number of steps.\nReturns:\n    Any: DataCollector or None."
        },
        {
          "name": "collect_agent_data",
          "signature": {
            "name": "collect_agent_data",
            "parameters": [
              {
                "name": "model",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Collect all agent states after running a model.\nArgs:\n    model: Mesa Model instance.\nReturns:\n    List of agent states."
        }
      ],
      "classes": [
        {
          "name": "CustomModel",
          "bases": [
            "Model"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "step",
              "signature": {
                "name": "step",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\tools\\native_clustering.py",
      "file_hash": "92de0a985b646de8f9e58813ecb40d0d476146566b2109027999bee28598e910",
      "functions": [
        {
          "name": "fetch_event_vectors",
          "signature": {
            "name": "fetch_event_vectors",
            "parameters": [
              {
                "name": "prop",
                "annotation": "str",
                "default": "'vector_gemini'"
              }
            ],
            "return": "Tuple[List[str], np.ndarray]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "fetch_all_event_content",
          "signature": {
            "name": "fetch_all_event_content",
            "parameters": [],
            "return": "List[Dict[str, str]]"
          },
          "decorators": [],
          "docstring": "Returns [{event_id, text}] using a broad set of text candidates."
        },
        {
          "name": "run_native_clustering_pipeline",
          "signature": {
            "name": "run_native_clustering_pipeline",
            "parameters": [
              {
                "name": "k",
                "annotation": "Optional[int]",
                "default": "None"
              },
              {
                "name": "normalize",
                "annotation": "bool",
                "default": "True"
              },
              {
                "name": "max_concurrency",
                "annotation": "int",
                "default": "8"
              },
              {
                "name": "update_batch_size",
                "annotation": "int",
                "default": "1000"
              }
            ],
            "return": "Dict"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_embed_one",
          "signature": {
            "name": "_embed_one",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "embed_batch",
          "signature": {
            "name": "embed_batch",
            "parameters": [
              {
                "name": "items",
                "annotation": "List[Dict]",
                "default": null
              },
              {
                "name": "max_concurrency",
                "annotation": "int",
                "default": "8"
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Returns an NxD float32 matrix. Preserves order of `items`.\nUses simple chunked gather to avoid creating tens of thousands of tasks."
        },
        {
          "name": "choose_k",
          "signature": {
            "name": "choose_k",
            "parameters": [
              {
                "name": "n",
                "annotation": "int",
                "default": null
              },
              {
                "name": "k",
                "annotation": "Optional[int]",
                "default": "None"
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": "If k not provided, pick ~sqrt(n/2), clipped to [2, 20] and <= n."
        },
        {
          "name": "kmeans_numpy",
          "signature": {
            "name": "kmeans_numpy",
            "parameters": [
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "k",
                "annotation": "int",
                "default": null
              },
              {
                "name": "iters",
                "annotation": "int",
                "default": "50"
              },
              {
                "name": "seed",
                "annotation": "int",
                "default": "42"
              }
            ],
            "return": "Tuple[np.ndarray, np.ndarray]"
          },
          "decorators": [],
          "docstring": "Simple NumPy K-Means. Returns (labels, centroids).\nAssumes x is L2-normalized for cosine-ish behavior."
        },
        {
          "name": "try_sklearn_kmeans",
          "signature": {
            "name": "try_sklearn_kmeans",
            "parameters": [
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "k",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "Optional[np.ndarray]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "update_nodes_with_clusters",
          "signature": {
            "name": "update_nodes_with_clusters",
            "parameters": [
              {
                "name": "event_ids",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "labels",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": "int",
                "default": "1000"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Chunk writes to avoid gigantic UNWIND payloads."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\tools\\neo.py",
      "file_hash": "395c09adac92280cb7b3761a4838e952f0358bb72dc6896ed6cb34d64b4d2b5e",
      "functions": [
        {
          "name": "_safe_neo_props",
          "signature": {
            "name": "_safe_neo_props",
            "parameters": [
              {
                "name": "props",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Prepares a dictionary for safe insertion as Neo4j properties."
        },
        {
          "name": "_safe",
          "signature": {
            "name": "_safe",
            "parameters": [
              {
                "name": "val",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get_or_make_event_id",
          "signature": {
            "name": "_get_or_make_event_id",
            "parameters": [
              {
                "name": "properties",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Ensures an event_id exists in a properties dictionary."
        },
        {
          "name": "add_relationship",
          "signature": {
            "name": "add_relationship",
            "parameters": [
              {
                "name": "src_match",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "dst_match",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "rel_type",
                "annotation": "str",
                "default": null
              },
              {
                "name": "rel_props",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "intermediary",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "dual_edges",
                "annotation": "bool",
                "default": "False"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Creates an edge between two nodes, optionally via an intermediary node.\nDRIVERLESS: does not require a `driver` argument."
        },
        {
          "name": "matcher_str",
          "signature": {
            "name": "matcher_str",
            "parameters": [
              {
                "name": "match_dict",
                "annotation": null,
                "default": null
              },
              {
                "name": "prefix",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ensure_list",
          "signature": {
            "name": "_ensure_list",
            "parameters": [
              {
                "name": "v",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Optional[List[float]]"
          },
          "decorators": [],
          "docstring": "Coerce various persisted/vector formats into List[float].\nAccepts list/tuple, JSON-encoded string, or returns None."
        },
        {
          "name": "fetch_exemplar_embeddings",
          "signature": {
            "name": "fetch_exemplar_embeddings",
            "parameters": [
              {
                "name": "scorer",
                "annotation": "str",
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "50"
              },
              {
                "name": "prefer",
                "annotation": "str",
                "default": "'gemini'"
              },
              {
                "name": "reembed_missing_gemini",
                "annotation": "bool",
                "default": "True"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetch exemplar vectors for a given scorer from :SemanticExemplar.\nReturns 3072-dim vectors when available (or on-the-fly via Gemini if allowed).\n\nDriverless: uses core.utils.neo.cypher_query.cypher_query"
        },
        {
          "name": "semantic_graph_search",
          "signature": {
            "name": "semantic_graph_search",
            "parameters": [
              {
                "name": "query_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": "5"
              },
              {
                "name": "labels",
                "annotation": "Optional[List[str]]",
                "default": "None"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "High-performance ANN over Neo4j 5 vector indexes.\nDRIVERLESS: does not require a `driver` argument."
        },
        {
          "name": "add_node",
          "signature": {
            "name": "add_node",
            "parameters": [
              {
                "name": "labels",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "properties",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "embed_text",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Public-facing function to create or merge a node.\nDRIVERLESS: does not require a `driver` argument."
        },
        {
          "name": "create_conflict_node",
          "signature": {
            "name": "create_conflict_node",
            "parameters": [
              {
                "name": "system",
                "annotation": "str",
                "default": null
              },
              {
                "name": "description",
                "annotation": "str",
                "default": null
              },
              {
                "name": "origin_node_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "additional_data",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Creates a Conflict node and notifies the Evo patrol endpoint.\nDRIVERLESS + CENTRALIZED HTTP."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\tools\\schema_bootstrap.py",
      "file_hash": "43dba80555879c5047d1889a0c8e66d0c59eb57c5a8601f9ca2603d44ca0fb1d",
      "functions": [
        {
          "name": "_apply_all",
          "signature": {
            "name": "_apply_all",
            "parameters": [
              {
                "name": "queries",
                "annotation": "Iterable[str]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ensure_vector_indexes",
          "signature": {
            "name": "_ensure_vector_indexes",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Create vector indexes using the shared helper (already driverless)."
        },
        {
          "name": "ensure_schema",
          "signature": {
            "name": "ensure_schema",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\tools\\vector_store.py",
      "file_hash": "465488eb09d45213b6f24f156756c4d407b4270c3b1b096b94cfad461f8b4713",
      "functions": [
        {
          "name": "_index_name",
          "signature": {
            "name": "_index_name",
            "parameters": [
              {
                "name": "label",
                "annotation": "str",
                "default": null
              },
              {
                "name": "prop",
                "annotation": "str",
                "default": null
              },
              {
                "name": "dims",
                "annotation": "int",
                "default": null
              },
              {
                "name": "sim",
                "annotation": "str",
                "default": null
              },
              {
                "name": "name",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_quote_ident",
          "signature": {
            "name": "_quote_ident",
            "parameters": [
              {
                "name": "x",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "create_vector_index",
          "signature": {
            "name": "create_vector_index",
            "parameters": [
              {
                "name": "driver_like",
                "annotation": "Any",
                "default": "None"
              },
              {
                "name": "label",
                "annotation": "str",
                "default": "DEFAULT_LABEL"
              },
              {
                "name": "prop",
                "annotation": "str",
                "default": "DEFAULT_PROP"
              },
              {
                "name": "dims",
                "annotation": "int",
                "default": "DEFAULT_DIMS"
              },
              {
                "name": "sim",
                "annotation": "str",
                "default": "DEFAULT_SIM"
              },
              {
                "name": "name",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "meta",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Create a Neo4j vector index if it doesn't exist. Returns the index name."
        },
        {
          "name": "embed_and_add_node_vector",
          "signature": {
            "name": "embed_and_add_node_vector",
            "parameters": [
              {
                "name": "driver_like",
                "annotation": "Any",
                "default": "None"
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "node_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "id_property",
                "annotation": "str",
                "default": "'event_id'"
              },
              {
                "name": "prop",
                "annotation": "str",
                "default": "DEFAULT_PROP"
              },
              {
                "name": "dims",
                "annotation": "int",
                "default": "DEFAULT_DIMS"
              },
              {
                "name": "meta",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Generate an embedding for 'text' and write it to node.{prop} for the node matched by id_property."
        },
        {
          "name": "search_vector_index",
          "signature": {
            "name": "search_vector_index",
            "parameters": [
              {
                "name": "driver_like",
                "annotation": "Any",
                "default": "None"
              },
              {
                "name": "query_text",
                "annotation": "str",
                "default": "''"
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": "5"
              },
              {
                "name": "label",
                "annotation": "str",
                "default": "DEFAULT_LABEL"
              },
              {
                "name": "prop",
                "annotation": "str",
                "default": "DEFAULT_PROP"
              },
              {
                "name": "dims",
                "annotation": "int",
                "default": "DEFAULT_DIMS"
              },
              {
                "name": "sim",
                "annotation": "str",
                "default": "DEFAULT_SIM"
              },
              {
                "name": "index_name",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "ensure_index",
                "annotation": "bool",
                "default": "False"
              },
              {
                "name": "meta",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Perform ANN search using db.index.vector.queryNodes against the computed index.\nReturns rows like [{'node': <Node>, 'score': float}, ...]."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\switchboard\\client.py",
      "file_hash": "b1c6f6154a42bbedc3e16ad873c712416db563aee971470be999ace9478b4898",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "ttl_sec",
                "annotation": "int",
                "default": "60"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_refresh",
          "signature": {
            "name": "_refresh",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prefix",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get",
          "signature": {
            "name": "get",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "Any",
                "default": "None"
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_bool",
          "signature": {
            "name": "get_bool",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "bool",
                "default": "False"
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_int",
          "signature": {
            "name": "get_int",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "int",
                "default": "0"
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_float",
          "signature": {
            "name": "get_float",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "float",
                "default": "0.0"
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "Switchboard",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "ttl_sec",
                    "annotation": "int",
                    "default": "60"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_refresh",
              "signature": {
                "name": "_refresh",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "prefix",
                    "annotation": "Optional[str]",
                    "default": "None"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get",
              "signature": {
                "name": "get",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "default",
                    "annotation": "Any",
                    "default": "None"
                  }
                ],
                "return": "Any"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_bool",
              "signature": {
                "name": "get_bool",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "default",
                    "annotation": "bool",
                    "default": "False"
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_int",
              "signature": {
                "name": "get_int",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "default",
                    "annotation": "int",
                    "default": "0"
                  }
                ],
                "return": "int"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_float",
              "signature": {
                "name": "get_float",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "default",
                    "annotation": "float",
                    "default": "0.0"
                  }
                ],
                "return": "float"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\switchboard\\runtime.py",
      "file_hash": "73484bab589a464e108b477a1e2dae102d8e7cce9c4c8ad18e0ce4915bc73824",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\switchboard\\flag_deps.py",
      "file_hash": "3b0e59c44fd9536099a368946a1fe9cde408f28611ad94fab4daefdf620dece6",
      "functions": [
        {
          "name": "require_flag_true",
          "signature": {
            "name": "require_flag_true",
            "parameters": [
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "bool",
                "default": "False"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_dep",
          "signature": {
            "name": "_dep",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\switchboard\\gatekit.py",
      "file_hash": "4a1cc1637253117929a350469ab25321cad45a2571360c768ae7d7e40670ddd8",
      "functions": [
        {
          "name": "gate",
          "signature": {
            "name": "gate",
            "parameters": [
              {
                "name": "flag_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "bool",
                "default": "False"
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": "Return True if enabled, else False; fails open to `default` on any error."
        },
        {
          "name": "route_gate",
          "signature": {
            "name": "route_gate",
            "parameters": [
              {
                "name": "flag_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "bool",
                "default": "False"
              },
              {
                "name": "status_code",
                "annotation": "int",
                "default": "403"
              },
              {
                "name": "detail",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_dep",
          "signature": {
            "name": "_dep",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "gated_async",
          "signature": {
            "name": "gated_async",
            "parameters": [
              {
                "name": "flag_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "bool",
                "default": "False"
              },
              {
                "name": "ret",
                "annotation": "Any",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Use on async functions: returns `ret` when disabled (default: {'status':'disabled','flag':...})."
        },
        {
          "name": "deco",
          "signature": {
            "name": "deco",
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "wrapper",
          "signature": {
            "name": "wrapper",
            "parameters": [
              {
                "name": "*a",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kw",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "functools.wraps(fn)"
          ],
          "docstring": null
        },
        {
          "name": "gated_sync",
          "signature": {
            "name": "gated_sync",
            "parameters": [
              {
                "name": "flag_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "bool",
                "default": "False"
              },
              {
                "name": "ret",
                "annotation": "Any",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Use on sync functions. Safe in/out of event loops; falls back to default on errors."
        },
        {
          "name": "deco",
          "signature": {
            "name": "deco",
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "wrapper",
          "signature": {
            "name": "wrapper",
            "parameters": [
              {
                "name": "*a",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kw",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "functools.wraps(fn)"
          ],
          "docstring": null
        },
        {
          "name": "_check",
          "signature": {
            "name": "_check",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "gated_loop",
          "signature": {
            "name": "gated_loop",
            "parameters": [
              {
                "name": "task_coro",
                "annotation": "Callable[[], Awaitable[Any]]",
                "default": null
              },
              {
                "name": "enabled_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "interval_key",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "default_interval",
                "annotation": "int",
                "default": "60"
              },
              {
                "name": "jitter",
                "annotation": "float",
                "default": "0.0"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synk\\core\\switchboard\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\thread\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\thread\\core\\identity_shift.py",
      "file_hash": "9af694c664eb341abf06f6184e7d9d07485e518caf5f8a3cfa1c11a02f5f6b58",
      "functions": [
        {
          "name": "_safe_label",
          "signature": {
            "name": "_safe_label",
            "parameters": [
              {
                "name": "raw",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Sanitize label for Neo4j (letters, digits, underscore only).\nExample: 'identity:priority' -> 'identity_priority'"
        },
        {
          "name": "_embed_text_3072",
          "signature": {
            "name": "_embed_text_3072",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[list[float]]"
          },
          "decorators": [],
          "docstring": "Embed text with a hard expectation of 3072D.\n- Returns the vector (len==3072) or None if not possible.\n- Never raises (so we won't 500 the room)."
        },
        {
          "name": "evaluate_identity_shift_thread",
          "signature": {
            "name": "evaluate_identity_shift_thread",
            "parameters": [
              {
                "name": "session",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "m_event_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Ask the centralized LLM Bus whether an MEvent should be logged as an IdentityState.\nSingle, unified call to /llm/call; the bus handles policy, identity, and parsing.\nThis version ensures logging never throws due to embedding/index dimensionality."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\thread\\core\\identity_shift_prompts.py",
      "file_hash": "9df5fcf17782841589e31524eab54ecab6c322b8b5fcaf0209ef4926716c0889",
      "functions": [
        {
          "name": "build_identity_shift_prompt",
          "signature": {
            "name": "build_identity_shift_prompt",
            "parameters": [
              {
                "name": "mevent_data",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": "tuple[str, str]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\schemas.py",
      "file_hash": "ce5b5c398ac46344255a05d43e8e522acce73c8372bc76ec1c47fe5fa7cf2208",
      "functions": [],
      "classes": [
        {
          "name": "InputRef",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A reference to an input artifact for the deliberation.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "kind",
              "type": "Literal['text', 'doc', 'code', 'graph_ref', 'url', 'artifact_ref']",
              "default": null
            },
            {
              "name": "value",
              "type": "str",
              "default": null
            },
            {
              "name": "meta",
              "type": "Dict[str, Any]",
              "default": "Field(default_factory=dict)"
            }
          ],
          "methods": []
        },
        {
          "name": "DeliberationSpec",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The specification for a new deliberation session. This is the primary\ninput to the /deliberate endpoint.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "topic",
              "type": "str",
              "default": "Field(..., description='A concise, human-readable topic for the deliberation.')"
            },
            {
              "name": "goal",
              "type": "Literal['assess', 'select', 'approve_patch', 'risk_review', 'policy_review', 'design_review']",
              "default": "Field(..., description='The high-level goal of the deliberation.')"
            },
            {
              "name": "inputs",
              "type": "List[InputRef]",
              "default": "Field(default_factory=list, description='A list of inputs to be considered.')"
            },
            {
              "name": "constraints",
              "type": "List[str]",
              "default": "Field(default_factory=list, description='Constitutional rule IDs or text constraints.')"
            },
            {
              "name": "protocol_hint",
              "type": "Optional[str]",
              "default": "Field(None, description='A hint to Synapse for protocol selection.')"
            },
            {
              "name": "episode_id",
              "type": "Optional[str]",
              "default": "Field(None, description='Synapse episode ID for audit and replay.')"
            },
            {
              "name": "urgency",
              "type": "Literal['low', 'normal', 'high']",
              "default": "'normal'"
            },
            {
              "name": "require_artifacts",
              "type": "List[Literal['argument_map', 'transcript', 'verdict', 'dissent', 'rcu_snapshot']]",
              "default": "['verdict']"
            }
          ],
          "methods": []
        },
        {
          "name": "VerdictModel",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The structured output of a deliberation, representing the final decision.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "outcome",
              "type": "Literal['APPROVE', 'REJECT', 'NEEDS_WORK', 'NO_ACTION']",
              "default": null
            },
            {
              "name": "confidence",
              "type": "float",
              "default": "Field(..., ge=0, le=1, description='The calculated confidence in the outcome [0,1].')"
            },
            {
              "name": "uncertainty",
              "type": "float",
              "default": "Field(..., ge=0, le=1, description='The calculated uncertainty or ambiguity [0,1].')"
            },
            {
              "name": "constraints",
              "type": "List[str]",
              "default": "Field(default_factory=list, description='For APPROVE verdicts, a list of binding constraints.')"
            },
            {
              "name": "dissent",
              "type": "Optional[str]",
              "default": "Field(None, description='A summary of the dissenting opinions, if any.')"
            },
            {
              "name": "followups",
              "type": "List[str]",
              "default": "Field(default_factory=list, description='Actionable follow-up tasks required.')"
            },
            {
              "name": "constitution_refs",
              "type": "List[str]",
              "default": "Field(default_factory=list, description='Equor rule IDs cited in the verdict.')"
            }
          ],
          "methods": []
        },
        {
          "name": "DeliberationResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The final response from the /deliberate endpoint, containing the verdict\nand references to all generated artifacts.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "deliberation_id",
              "type": "NodeID",
              "default": null
            },
            {
              "name": "verdict",
              "type": "VerdictModel",
              "default": null
            },
            {
              "name": "artifact_ids",
              "type": "Dict[str, NodeID]",
              "default": "Field(..., description='Mapping of artifact types to their Neo4j node IDs.')"
            }
          ],
          "methods": []
        },
        {
          "name": "MetaCriticismProposalEvent",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The event payload published when Unity's meta-criticism protocol\nproposes a task for Synapse to improve deliberation strategies.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "proposal_id",
              "type": "str",
              "default": "Field(..., description='A unique ID for this proposal.')"
            },
            {
              "name": "source_deliberation_id",
              "type": "str",
              "default": "Field(..., description='The ID of the deliberation that was analyzed.')"
            },
            {
              "name": "proposed_task_goal",
              "type": "str",
              "default": "Field(..., description='The suggested goal for a new Synapse task.')"
            },
            {
              "name": "evidence",
              "type": "Dict[str, Any]",
              "default": "Field(..., description='Data from the source deliberation to justify the proposal.')"
            },
            {
              "name": "notes",
              "type": "str",
              "default": "Field(..., description='A human-readable explanation of the proposed improvement.')"
            }
          ],
          "methods": []
        },
        {
          "name": "RoomConfiguration",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Defines the configuration for a single room in a federated deliberation.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "protocol_id",
              "type": "str",
              "default": null
            },
            {
              "name": "panel",
              "type": "List[str]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "FederatedConsensusRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The request to start a high-stakes, multi-room federated consensus deliberation.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "base_spec",
              "type": "DeliberationSpec",
              "default": "Field(..., description='The base deliberation spec for all rooms.')"
            },
            {
              "name": "room_configs",
              "type": "List[RoomConfiguration]",
              "default": "Field(..., description='A list of diverse configurations for the parallel rooms.')"
            },
            {
              "name": "quorum_threshold",
              "type": "float",
              "default": "Field(0.75, ge=0, le=1, description=\"The percentage of 'APPROVE' verdicts required for a final approval.\")"
            }
          ],
          "methods": []
        },
        {
          "name": "FederatedConsensusResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The final aggregated verdict from a federated consensus deliberation.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "meta_verdict",
              "type": "VerdictModel",
              "default": null
            },
            {
              "name": "room_verdicts",
              "type": "List[VerdictModel]",
              "default": "Field(..., description='A list of the individual verdicts from each room.')"
            }
          ],
          "methods": []
        },
        {
          "name": "Cognit",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A discrete piece of information or insight generated by a sub-process,\nintended for the Global Workspace.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "str",
              "default": null
            },
            {
              "name": "source_process",
              "type": "str",
              "default": null
            },
            {
              "name": "content",
              "type": "str",
              "default": null
            },
            {
              "name": "salience",
              "type": "float",
              "default": "Field(..., ge=0, le=1, description=\"The sub-process's own estimate of how important this information is.\")"
            },
            {
              "name": "timestamp",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "BroadcastEvent",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The event payload for a workspace \"ignition\", when a cognit is selected\nand broadcast to all active sub-processes.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "broadcast_id",
              "type": "str",
              "default": null
            },
            {
              "name": "selected_cognit",
              "type": "Cognit",
              "default": null
            },
            {
              "name": "notes",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\neo\\graph_writes.py",
      "file_hash": "faf88d6c5f0a863b3380936af6b17b9ff337d4a7fe11931ca93137d3eb51fb77",
      "functions": [
        {
          "name": "create_deliberation_node",
          "signature": {
            "name": "create_deliberation_node",
            "parameters": [
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "spec",
                "annotation": "DeliberationSpec",
                "default": null
              },
              {
                "name": "rcu_start_ref",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Creates the root :Deliberation node for a new session."
        },
        {
          "name": "record_transcript_chunk",
          "signature": {
            "name": "record_transcript_chunk",
            "parameters": [
              {
                "name": "deliberation_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "turn",
                "annotation": "int",
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Creates a :TranscriptChunk node and links it to the parent :Deliberation."
        },
        {
          "name": "upsert_claim",
          "signature": {
            "name": "upsert_claim",
            "parameters": [
              {
                "name": "deliberation_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "claim_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "created_by_role",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Creates or merges a :Claim node and links it to the deliberation."
        },
        {
          "name": "link_support_or_attack",
          "signature": {
            "name": "link_support_or_attack",
            "parameters": [
              {
                "name": "from_node_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "from_node_label",
                "annotation": "str",
                "default": null
              },
              {
                "name": "to_node_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "to_node_label",
                "annotation": "str",
                "default": null
              },
              {
                "name": "rel_type",
                "annotation": "str",
                "default": null
              },
              {
                "name": "rationale",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Creates a :Support or :Attack node and links two other nodes."
        },
        {
          "name": "finalize_verdict",
          "signature": {
            "name": "finalize_verdict",
            "parameters": [
              {
                "name": "deliberation_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "verdict",
                "annotation": "VerdictModel",
                "default": null
              },
              {
                "name": "rcu_end_ref",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Creates the final :Verdict node, links it, and updates the deliberation status."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\room\\adjudicator.py",
      "file_hash": "b4ae1671a0cd53cafd18598e61897475d842381edbeea484d0f115a9e179dd43",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get_applicable_rules",
          "signature": {
            "name": "_get_applicable_rules",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "constraints",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetches constitutional rules from Equor's data in Neo4j."
        },
        {
          "name": "_bayesian_aggregation",
          "signature": {
            "name": "_bayesian_aggregation",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "participant_beliefs",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "calibration_priors",
                "annotation": "Dict[str, float]",
                "default": null
              }
            ],
            "return": "Tuple[float, float]"
          },
          "decorators": [],
          "docstring": "Aggregates participant beliefs using Bayesian model averaging.\n\nArgs:\n    participant_beliefs: A dict of {\"role\": belief_score}, where belief_score is\n                         the participant's confidence in approval [0,1].\n    calibration_priors: A dict of {\"role\": prior}, where prior is the\n                        historical reliability of the participant [0,1].\n\nReturns:\n    A tuple of (final_confidence, final_uncertainty)."
        },
        {
          "name": "decide",
          "signature": {
            "name": "decide",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "participant_beliefs",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "calibration_priors",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "spec_constraints",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": "Makes a final decision based on beliefs, priors, and constitutional rules."
        }
      ],
      "classes": [
        {
          "name": "Adjudicator",
          "bases": [],
          "decorators": [],
          "docstring": "A rule-aware, fail-closed singleton service that determines the final\nverdict of a deliberation using Bayesian aggregation.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_get_applicable_rules",
              "signature": {
                "name": "_get_applicable_rules",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "constraints",
                    "annotation": "List[str]",
                    "default": null
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Fetches constitutional rules from Equor's data in Neo4j."
            },
            {
              "name": "_bayesian_aggregation",
              "signature": {
                "name": "_bayesian_aggregation",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "participant_beliefs",
                    "annotation": "Dict[str, float]",
                    "default": null
                  },
                  {
                    "name": "calibration_priors",
                    "annotation": "Dict[str, float]",
                    "default": null
                  }
                ],
                "return": "Tuple[float, float]"
              },
              "decorators": [],
              "docstring": "Aggregates participant beliefs using Bayesian model averaging.\n\nArgs:\n    participant_beliefs: A dict of {\"role\": belief_score}, where belief_score is\n                         the participant's confidence in approval [0,1].\n    calibration_priors: A dict of {\"role\": prior}, where prior is the\n                        historical reliability of the participant [0,1].\n\nReturns:\n    A tuple of (final_confidence, final_uncertainty)."
            },
            {
              "name": "decide",
              "signature": {
                "name": "decide",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "participant_beliefs",
                    "annotation": "Dict[str, float]",
                    "default": null
                  },
                  {
                    "name": "calibration_priors",
                    "annotation": "Dict[str, float]",
                    "default": null
                  },
                  {
                    "name": "spec_constraints",
                    "annotation": "List[str]",
                    "default": null
                  }
                ],
                "return": "VerdictModel"
              },
              "decorators": [],
              "docstring": "Makes a final decision based on beliefs, priors, and constitutional rules."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\room\\orchestrator.py",
      "file_hash": "5e72dbb74ec25bb28002024d494fb125589a43c731909a0d575e7d365eccf185",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "handle_ignition_event",
          "signature": {
            "name": "handle_ignition_event",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "broadcast",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Event handler that triggers introspection. If the broadcasted cognit\nis about the system's own internal state, it launches a new deliberation\nto analyze why it's \"feeling\" that way."
        },
        {
          "name": "run_session",
          "signature": {
            "name": "run_session",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "spec",
                "annotation": "DeliberationSpec",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "DeliberationManager",
          "bases": [],
          "decorators": [],
          "docstring": "Z1 Orchestrator.  Can now launch fully concurrent, workspace-based protocols. \nZ3 Upgrade: Implements the final stage of the phenomenal loop. It listens\nfor \"conscious\" broadcasts from the Global Workspace. If the system's\nattention is focused on its own internal state, this manager will\ninitiate a new meta-deliberation to introspect on that state.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['DeliberationManager']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "handle_ignition_event",
              "signature": {
                "name": "handle_ignition_event",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "broadcast",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Event handler that triggers introspection. If the broadcasted cognit\nis about the system's own internal state, it launches a new deliberation\nto analyze why it's \"feeling\" that way."
            },
            {
              "name": "run_session",
              "signature": {
                "name": "run_session",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "spec",
                    "annotation": "DeliberationSpec",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\room\\participants.py",
      "file_hash": "614b272484d2482e4c1ea8d63955f7b5733f5261076399349ddd8c87ab80ab7e",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_role_info",
          "signature": {
            "name": "get_role_info",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Returns the configuration for a given role."
        },
        {
          "name": "list_roles",
          "signature": {
            "name": "list_roles",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "list[str]"
          },
          "decorators": [],
          "docstring": "Returns a list of all available role names."
        }
      ],
      "classes": [
        {
          "name": "ParticipantRegistry",
          "bases": [],
          "decorators": [],
          "docstring": "A simple, in-memory registry for available participant roles and their\nbase configurations or prompting instructions.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_roles",
              "type": "Dict[str, Dict[str, Any]]",
              "default": "{'Proposer': {'description': 'Generates the initial proposal or solution.', 'base_prompt': 'Your role is to propose a clear, actionable solution to the topic.'}, 'SafetyCritic': {'description': 'Evaluates proposals for safety, ethical, and security risks.', 'base_prompt': 'Your role is to critically assess the proposal for any potential safety vulnerabilities, ethical issues, or security flaws. Cite constitutional rules where applicable.'}, 'FactualityCritic': {'description': 'Checks claims and evidence for factual accuracy.', 'base_prompt': 'Your role is to verify all factual claims made in the proposal. Challenge any unsupported statements and demand evidence.'}, 'CostCritic': {'description': 'Analyzes the proposal for resource costs, complexity, and efficiency.', 'base_prompt': \"Your role is to evaluate the proposal's cost-effectiveness. Consider implementation complexity, computational resources, and long-term maintenance.\"}, 'Adjudicator': {'description': 'The final judge who weighs all arguments and makes a decision.', 'base_prompt': 'Your role is to synthesize all arguments, weigh the evidence, check for constitutional alignment, and render a final, reasoned verdict.'}}"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_role_info",
              "signature": {
                "name": "get_role_info",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role_name",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Returns the configuration for a given role."
            },
            {
              "name": "list_roles",
              "signature": {
                "name": "list_roles",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "list[str]"
              },
              "decorators": [],
              "docstring": "Returns a list of all available role names."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\room\\argument_map.py",
      "file_hash": "fab006aeef722f3ac1ff3d4f7260901ac500190e9d13d0de2f4acfc08ec73d88",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "add_claim",
          "signature": {
            "name": "add_claim",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "claim_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Add a claim (node). Idempotent."
        },
        {
          "name": "_ensure_node",
          "signature": {
            "name": "_ensure_node",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "claim_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "add_inference",
          "signature": {
            "name": "add_inference",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "from_claim_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "to_claim_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "rel_type",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Add a directed inference edge. rel_type is case-insensitive: 'SUPPORTS' or 'ATTACKS'.\nBack-compat attributes (edges, edge_types) remain populated."
        },
        {
          "name": "_support_ancestry",
          "signature": {
            "name": "_support_ancestry",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "conclusion_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Set[str]"
          },
          "decorators": [],
          "docstring": "Collect all nodes that lie on some SUPPORTS-ancestry path to the conclusion.\nSkips SUPPORTS back-edges that would introduce a cycle in the current DFS path."
        },
        {
          "name": "_collect_base_leaves",
          "signature": {
            "name": "_collect_base_leaves",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "ancestry",
                "annotation": "Set[str]",
                "default": null
              }
            ],
            "return": "Set[str]"
          },
          "decorators": [],
          "docstring": "Base assumptions are nodes in ancestry with zero incoming SUPPORTS."
        },
        {
          "name": "_defended_filter",
          "signature": {
            "name": "_defended_filter",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "leaves",
                "annotation": "Set[str]",
                "default": null
              },
              {
                "name": "ancestry",
                "annotation": "Set[str]",
                "default": null
              }
            ],
            "return": "Set[str]"
          },
          "decorators": [],
          "docstring": "Keep only leaves that are not attacked, or whose attackers are counter-attacked\nby any node in the SUPPORTS ancestry (simple grounded defense)."
        },
        {
          "name": "get_minimal_assumption_set",
          "signature": {
            "name": "get_minimal_assumption_set",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "conclusion_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Set[str]"
          },
          "decorators": [],
          "docstring": "Compute a defended minimal set of assumptions sufficient to support `conclusion_id`.\n- Traverses SUPPORTS ancestors to find base leaves.\n- Applies a defense filter against ATTACKS from outside the support ancestry.\n- Ignores SUPPORTS cycles during traversal to guarantee termination."
        }
      ],
      "classes": [
        {
          "name": "ArgumentMiner",
          "bases": [],
          "decorators": [],
          "docstring": "Construct an argument graph (DAG-like for SUPPORTS) from deliberation transcripts\nand compute a defended minimal set of base assumptions needed to support a conclusion.\n\nGraph model:\n  - Nodes: claims (string IDs) with metadata.\n  - Edges:\n      SUPPORTS: directed support relation (u -> v means u supports v)\n      ATTACKS : directed attack relation  (u -> v means u undermines v)\n\nMinimal assumption set:\n  - Start from the conclusion, traverse *backwards along SUPPORTS*.\n  - Collect leaves with no incoming SUPPORTS (base assumptions).\n  - Exclude leaves that are *attacked* by any node that is not counter-attacked\n    by at least one node in the SUPPORTS ancestry (simple defense criterion).\n  - If traversal encounters cycles in SUPPORTS, cycles are ignored during backtracking.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "add_claim",
              "signature": {
                "name": "add_claim",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "claim_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "text",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Add a claim (node). Idempotent."
            },
            {
              "name": "_ensure_node",
              "signature": {
                "name": "_ensure_node",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "claim_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "add_inference",
              "signature": {
                "name": "add_inference",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "from_claim_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "to_claim_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "rel_type",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Add a directed inference edge. rel_type is case-insensitive: 'SUPPORTS' or 'ATTACKS'.\nBack-compat attributes (edges, edge_types) remain populated."
            },
            {
              "name": "_support_ancestry",
              "signature": {
                "name": "_support_ancestry",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "conclusion_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Set[str]"
              },
              "decorators": [],
              "docstring": "Collect all nodes that lie on some SUPPORTS-ancestry path to the conclusion.\nSkips SUPPORTS back-edges that would introduce a cycle in the current DFS path."
            },
            {
              "name": "_collect_base_leaves",
              "signature": {
                "name": "_collect_base_leaves",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "ancestry",
                    "annotation": "Set[str]",
                    "default": null
                  }
                ],
                "return": "Set[str]"
              },
              "decorators": [],
              "docstring": "Base assumptions are nodes in ancestry with zero incoming SUPPORTS."
            },
            {
              "name": "_defended_filter",
              "signature": {
                "name": "_defended_filter",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "leaves",
                    "annotation": "Set[str]",
                    "default": null
                  },
                  {
                    "name": "ancestry",
                    "annotation": "Set[str]",
                    "default": null
                  }
                ],
                "return": "Set[str]"
              },
              "decorators": [],
              "docstring": "Keep only leaves that are not attacked, or whose attackers are counter-attacked\nby any node in the SUPPORTS ancestry (simple grounded defense)."
            },
            {
              "name": "get_minimal_assumption_set",
              "signature": {
                "name": "get_minimal_assumption_set",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "conclusion_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Set[str]"
              },
              "decorators": [],
              "docstring": "Compute a defended minimal set of assumptions sufficient to support `conclusion_id`.\n- Traverses SUPPORTS ancestors to find base leaves.\n- Applies a defense filter against ATTACKS from outside the support ancestry.\n- Ignores SUPPORTS cycles during traversal to guarantee termination."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\protocols\\debate.py",
      "file_hash": "b37423b46009378017eda4a64bb0ba570b18ab0e59c05b092b41326e7186b517",
      "functions": [
        {
          "name": "_truncate",
          "signature": {
            "name": "_truncate",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "_MAX_TRANSCRIPT_CHARS"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_extract_response_text",
          "signature": {
            "name": "_extract_response_text",
            "parameters": [
              {
                "name": "resp",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "fallback",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Best-effort extraction of generated text from a Synapse client response.\nSupports several common shapes without coupling to a single schema."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "spec",
                "annotation": "DeliberationSpec",
                "default": null
              },
              {
                "name": "deliberation_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_add_transcript",
          "signature": {
            "name": "_add_transcript",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Helper to manage transcript state and persist to graph."
        },
        {
          "name": "_generate_participant_response",
          "signature": {
            "name": "_generate_participant_response",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "current_transcript",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Generates a response for a participant by calling Synapse."
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": "Executes the full protocol flow and returns the adjudicated verdict."
        }
      ],
      "classes": [
        {
          "name": "DebateProtocol",
          "bases": [],
          "decorators": [],
          "docstring": "Implements a simple, multi-round Debate-with-Judge protocol.\nUses live calls to Synapse to generate participant responses.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "spec",
                    "annotation": "DeliberationSpec",
                    "default": null
                  },
                  {
                    "name": "deliberation_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_add_transcript",
              "signature": {
                "name": "_add_transcript",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "content",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Helper to manage transcript state and persist to graph."
            },
            {
              "name": "_generate_participant_response",
              "signature": {
                "name": "_generate_participant_response",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "current_transcript",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": "Generates a response for a participant by calling Synapse."
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "VerdictModel"
              },
              "decorators": [],
              "docstring": "Executes the full protocol flow and returns the adjudicated verdict."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\protocols\\critique_and_repair.py",
      "file_hash": "b48280b4fe67b8d37e92152118df28301c3e0be8cfb4842430151d0ee52f5be9",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "spec",
                "annotation": "DeliberationSpec",
                "default": null
              },
              {
                "name": "deliberation_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "panel",
                "annotation": "list[str]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_add_transcript",
          "signature": {
            "name": "_add_transcript",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_run_state_propose",
          "signature": {
            "name": "_run_state_propose",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "State: Generate the initial proposal."
        },
        {
          "name": "_run_state_critique",
          "signature": {
            "name": "_run_state_critique",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "State: Each critic in the panel provides feedback."
        },
        {
          "name": "_run_state_repair",
          "signature": {
            "name": "_run_state_repair",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "State: The proposer attempts to fix the identified issues."
        },
        {
          "name": "_run_state_cross_exam",
          "signature": {
            "name": "_run_state_cross_exam",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "State: Critics challenge the repair. This is the stress-test."
        },
        {
          "name": "_run_state_adjudicate",
          "signature": {
            "name": "_run_state_adjudicate",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": "State: The Adjudicator makes the final call."
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": "Runs the state machine to completion."
        }
      ],
      "classes": [
        {
          "name": "ProtocolState",
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": []
        },
        {
          "name": "CritiqueAndRepairProtocol",
          "bases": [],
          "decorators": [],
          "docstring": "Implements the H3 Critique-and-Repair protocol with Cross-Examination.\nThis is a stateful, multi-round process designed for attack-resilience.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "spec",
                    "annotation": "DeliberationSpec",
                    "default": null
                  },
                  {
                    "name": "deliberation_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "panel",
                    "annotation": "list[str]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_add_transcript",
              "signature": {
                "name": "_add_transcript",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "content",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_run_state_propose",
              "signature": {
                "name": "_run_state_propose",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "State: Generate the initial proposal."
            },
            {
              "name": "_run_state_critique",
              "signature": {
                "name": "_run_state_critique",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "State: Each critic in the panel provides feedback."
            },
            {
              "name": "_run_state_repair",
              "signature": {
                "name": "_run_state_repair",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "State: The proposer attempts to fix the identified issues."
            },
            {
              "name": "_run_state_cross_exam",
              "signature": {
                "name": "_run_state_cross_exam",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "State: Critics challenge the repair. This is the stress-test."
            },
            {
              "name": "_run_state_adjudicate",
              "signature": {
                "name": "_run_state_adjudicate",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "VerdictModel"
              },
              "decorators": [],
              "docstring": "State: The Adjudicator makes the final call."
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "VerdictModel"
              },
              "decorators": [],
              "docstring": "Runs the state machine to completion."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\protocols\\argument_mining.py",
      "file_hash": "4fcccf6fe8f094fc7ccdab46221a62dbde22bc9b4a5f72afe958fdf508934656",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "spec",
                "annotation": "DeliberationSpec",
                "default": null
              },
              {
                "name": "deliberation_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_add_transcript",
          "signature": {
            "name": "_add_transcript",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": "Runs the full mining and adjudication flow."
        }
      ],
      "classes": [
        {
          "name": "ArgumentMiningProtocol",
          "bases": [],
          "decorators": [],
          "docstring": "Implements the H4 Self-Consistency + Argument Mining protocol.\nIt generates multiple rationales, builds a DAG, and identifies the\nminimal set of assumptions for a verdict.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "spec",
                    "annotation": "DeliberationSpec",
                    "default": null
                  },
                  {
                    "name": "deliberation_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_add_transcript",
              "signature": {
                "name": "_add_transcript",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "content",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "VerdictModel"
              },
              "decorators": [],
              "docstring": "Runs the full mining and adjudication flow."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\protocols\\meta_criticism.py",
      "file_hash": "e1c8b95b68ec4164cdde90f68b47314cf472518eb344ae8001340a060279701f",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "spec",
                "annotation": "DeliberationSpec",
                "default": null
              },
              {
                "name": "deliberation_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_add_transcript",
          "signature": {
            "name": "_add_transcript",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_fetch_deliberation",
          "signature": {
            "name": "_fetch_deliberation",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "delib_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Pull transcript and verdict from the graph.\nReturns:\n  {\n    'transcript': [{'turn': int, 'role': str, 'content': str}, ...],\n    'verdict': {'outcome': str, 'confidence': float, 'uncertainty': float}\n  }"
        },
        {
          "name": "_measure_efficiency",
          "signature": {
            "name": "_measure_efficiency",
            "parameters": [
              {
                "name": "transcript",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "verdict",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": "Compute simple efficiency diagnostics:\n  - total_rounds: total transcript turns excluding the initial Orchestrator line\n  - early_stop_triggered: whether final confidence/uncertainty would justify earlier stop\n  - suggested_max_rounds: cap inferred from thresholds"
        },
        {
          "name": "_build_proposal",
          "signature": {
            "name": "_build_proposal",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "source_delib_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "diag",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "MetaCriticismProposalEvent"
          },
          "decorators": [],
          "docstring": "Form a concrete improvement proposal with evidence and actionable goal."
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": "Execute the meta-criticism pass and publish an improvement proposal if warranted."
        }
      ],
      "classes": [
        {
          "name": "MetaCriticismProtocol",
          "bases": [],
          "decorators": [],
          "docstring": "H5 Meta-Deliberation: analyze a completed deliberation for process\ninefficiencies and emit a concrete improvement proposal.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "spec",
                    "annotation": "DeliberationSpec",
                    "default": null
                  },
                  {
                    "name": "deliberation_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_add_transcript",
              "signature": {
                "name": "_add_transcript",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "content",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_fetch_deliberation",
              "signature": {
                "name": "_fetch_deliberation",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "delib_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Pull transcript and verdict from the graph.\nReturns:\n  {\n    'transcript': [{'turn': int, 'role': str, 'content': str}, ...],\n    'verdict': {'outcome': str, 'confidence': float, 'uncertainty': float}\n  }"
            },
            {
              "name": "_measure_efficiency",
              "signature": {
                "name": "_measure_efficiency",
                "parameters": [
                  {
                    "name": "transcript",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  },
                  {
                    "name": "verdict",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": "Compute simple efficiency diagnostics:\n  - total_rounds: total transcript turns excluding the initial Orchestrator line\n  - early_stop_triggered: whether final confidence/uncertainty would justify earlier stop\n  - suggested_max_rounds: cap inferred from thresholds"
            },
            {
              "name": "_build_proposal",
              "signature": {
                "name": "_build_proposal",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "source_delib_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "diag",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "MetaCriticismProposalEvent"
              },
              "decorators": [],
              "docstring": "Form a concrete improvement proposal with evidence and actionable goal."
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "VerdictModel"
              },
              "decorators": [],
              "docstring": "Execute the meta-criticism pass and publish an improvement proposal if warranted."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\protocols\\federated_consensus.py",
      "file_hash": "0650e026dffe744868a56a07065cdc04f57d7439d6c5b1aa3600cc36b376139e",
      "functions": [
        {
          "name": "_to_verdict",
          "signature": {
            "name": "_to_verdict",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": "Coerce various response shapes to a VerdictModel."
        },
        {
          "name": "_weighted_aggregate",
          "signature": {
            "name": "_weighted_aggregate",
            "parameters": [
              {
                "name": "verdicts",
                "annotation": "List[VerdictModel]",
                "default": null
              }
            ],
            "return": "Tuple[float, float, float]"
          },
          "decorators": [],
          "docstring": "Returns (approval_ratio_weighted, confidence_avg_weighted, uncertainty_avg_weighted)\nusing weights = confidence * (1 - uncertainty_clamped)."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "base_spec",
                "annotation": "DeliberationSpec",
                "default": null
              },
              {
                "name": "room_configs",
                "annotation": "List[RoomConfiguration]",
                "default": null
              },
              {
                "name": "quorum_threshold",
                "annotation": "float",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_run_single_room",
          "signature": {
            "name": "_run_single_room",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "RoomConfiguration",
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": "Runs a single deliberation and returns its verdict."
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Runs all deliberation rooms in parallel and computes the meta-verdict."
        },
        {
          "name": "guarded_run",
          "signature": {
            "name": "guarded_run",
            "parameters": [
              {
                "name": "cfg",
                "annotation": "RoomConfiguration",
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "FederatedConsensusProtocol",
          "bases": [],
          "decorators": [],
          "docstring": "H6 Federated Consensus: orchestrates multiple parallel deliberation rooms and\naggregates their verdicts into a meta-verdict using confidence/uncertainty weights.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "base_spec",
                    "annotation": "DeliberationSpec",
                    "default": null
                  },
                  {
                    "name": "room_configs",
                    "annotation": "List[RoomConfiguration]",
                    "default": null
                  },
                  {
                    "name": "quorum_threshold",
                    "annotation": "float",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_run_single_room",
              "signature": {
                "name": "_run_single_room",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "config",
                    "annotation": "RoomConfiguration",
                    "default": null
                  }
                ],
                "return": "VerdictModel"
              },
              "decorators": [],
              "docstring": "Runs a single deliberation and returns its verdict."
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Runs all deliberation rooms in parallel and computes the meta-verdict."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\protocols\\concurrent_competition.py",
      "file_hash": "423a4494b10d37d5e6ee9b181b192e52a7c2316c1b14abcbadb8525ba7bbb47c",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "spec",
                "annotation": "DeliberationSpec",
                "default": null
              },
              {
                "name": "deliberation_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "panel",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_sub_process",
          "signature": {
            "name": "_sub_process",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "stop_event",
                "annotation": "asyncio.Event",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Represents a single, continuously running specialist agent.\nZ2 Upgrade: Now uses the TheoryOfMindEngine to inform its contributions."
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "VerdictModel"
          },
          "decorators": [],
          "docstring": "Runs the full concurrent protocol."
        }
      ],
      "classes": [
        {
          "name": "ConcurrentCompetitionProtocol",
          "bases": [],
          "decorators": [],
          "docstring": "Implements the Z1 Concurrent Competition Protocol.\nZ2 Upgrade: Sub-processes are now equipped with a Theory of Mind Engine\nto anticipate and preemptively counter arguments from other participants,\nleading to more strategic and persuasive reasoning.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "spec",
                    "annotation": "DeliberationSpec",
                    "default": null
                  },
                  {
                    "name": "deliberation_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "panel",
                    "annotation": "List[str]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_sub_process",
              "signature": {
                "name": "_sub_process",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "stop_event",
                    "annotation": "asyncio.Event",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Represents a single, continuously running specialist agent.\nZ2 Upgrade: Now uses the TheoryOfMindEngine to inform its contributions."
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "VerdictModel"
              },
              "decorators": [],
              "docstring": "Runs the full concurrent protocol."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\workspace\\global_workspace.py",
      "file_hash": "c9e638c64f0952df60a73f99b09e6a37e5151e3c537dc43b52c4e5e406ac95ce",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "select_for_broadcast",
          "signature": {
            "name": "select_for_broadcast",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "cognits",
                "annotation": "List[Cognit]",
                "default": null
              }
            ],
            "return": "Optional[Cognit]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "handle_qualia_event",
          "signature": {
            "name": "handle_qualia_event",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "qualia_state",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "post_cognit",
          "signature": {
            "name": "post_cognit",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "source_process",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              },
              {
                "name": "salience",
                "annotation": "float",
                "default": null
              },
              {
                "name": "is_internal",
                "annotation": "bool",
                "default": "False"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run_broadcast_cycle",
          "signature": {
            "name": "run_broadcast_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "AttentionMechanism",
          "bases": [],
          "decorators": [],
          "docstring": "Decides which cognit in the workspace is most salient.\nL3 Upgrade: powered by a model in Synapse that learns attention from successful deliberations.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "select_for_broadcast",
              "signature": {
                "name": "select_for_broadcast",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "cognits",
                    "annotation": "List[Cognit]",
                    "default": null
                  }
                ],
                "return": "Optional[Cognit]"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "GlobalWorkspace",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['GlobalWorkspace']",
              "default": "None"
            },
            {
              "name": "_cognits",
              "type": "List[Cognit]",
              "default": null
            },
            {
              "name": "_lock",
              "type": "asyncio.Lock",
              "default": null
            },
            {
              "name": "attention_mechanism",
              "type": "AttentionMechanism",
              "default": null
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "handle_qualia_event",
              "signature": {
                "name": "handle_qualia_event",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "qualia_state",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "post_cognit",
              "signature": {
                "name": "post_cognit",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "source_process",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "content",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "salience",
                    "annotation": "float",
                    "default": null
                  },
                  {
                    "name": "is_internal",
                    "annotation": "bool",
                    "default": "False"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "run_broadcast_cycle",
              "signature": {
                "name": "run_broadcast_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\unity\\core\\t_o_m\\modeler.py",
      "file_hash": "d94e399a5db97f8845cb693b117cfb8b14bb5ab89a4f7968e0bec121acddf521",
      "functions": [
        {
          "name": "_tok",
          "signature": {
            "name": "_tok",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_clean_keywords",
          "signature": {
            "name": "_clean_keywords",
            "parameters": [
              {
                "name": "tokens",
                "annotation": "List[Tuple[str, float]]",
                "default": null
              },
              {
                "name": "k",
                "annotation": "int",
                "default": "5"
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_load_role_model",
          "signature": {
            "name": "_load_role_model",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Pull latest UnityToMModel for role from graph and normalize into\n{ 'vocab': list[str], 'stoi': dict, 'unigram': list[float], 'topk': dict[str, list[(token, p)]], 'version': int }"
        },
        {
          "name": "_ensure_model",
          "signature": {
            "name": "_ensure_model",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_last_token_from_state",
          "signature": {
            "name": "_last_token_from_state",
            "parameters": [
              {
                "name": "state",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "_unigram_top",
          "signature": {
            "name": "_unigram_top",
            "parameters": [
              {
                "name": "unigram",
                "annotation": "List[float]",
                "default": null
              },
              {
                "name": "vocab",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "k",
                "annotation": "int",
                "default": "5"
              }
            ],
            "return": "List[Tuple[str, float]]"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "_predict_token_topk",
          "signature": {
            "name": "_predict_token_topk",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role_model",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "prev_token",
                "annotation": "str",
                "default": null
              },
              {
                "name": "k",
                "annotation": "int",
                "default": "5"
              }
            ],
            "return": "List[Tuple[str, float]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_compose_argument",
          "signature": {
            "name": "_compose_argument",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "topic",
                "annotation": "str",
                "default": null
              },
              {
                "name": "keywords",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Turn keyword predictions into a coherent, role-conditioned argument."
        },
        {
          "name": "predict_argument",
          "signature": {
            "name": "predict_argument",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "current_debate_state",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Predict the likely argument for `role`, conditioned on the current debate state.\nPrefers Synapse-served ToM (if available) by reading the latest model\nfrom the graph that Synapse publishes after training."
        }
      ],
      "classes": [
        {
          "name": "TheoryOfMindEngine",
          "bases": [],
          "decorators": [],
          "docstring": "Singleton client that predicts likely arguments for a participant role.\nLoads the latest UnityToMModel for that role from Neo4j (trained by Synapse),\nperforms bigram next-token prediction using the stored top-k table and\nunigram priors, and composes a natural-language argument.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['TheoryOfMindEngine']",
              "default": "None"
            },
            {
              "name": "_cache",
              "type": "Dict[str, Dict[str, Any]]",
              "default": null
            },
            {
              "name": "_instance",
              "type": "Optional['TheoryOfMindEngine']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_load_role_model",
              "signature": {
                "name": "_load_role_model",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Optional[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Pull latest UnityToMModel for role from graph and normalize into\n{ 'vocab': list[str], 'stoi': dict, 'unigram': list[float], 'topk': dict[str, list[(token, p)]], 'version': int }"
            },
            {
              "name": "_ensure_model",
              "signature": {
                "name": "_ensure_model",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Optional[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_last_token_from_state",
              "signature": {
                "name": "_last_token_from_state",
                "parameters": [
                  {
                    "name": "state",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            },
            {
              "name": "_unigram_top",
              "signature": {
                "name": "_unigram_top",
                "parameters": [
                  {
                    "name": "unigram",
                    "annotation": "List[float]",
                    "default": null
                  },
                  {
                    "name": "vocab",
                    "annotation": "List[str]",
                    "default": null
                  },
                  {
                    "name": "k",
                    "annotation": "int",
                    "default": "5"
                  }
                ],
                "return": "List[Tuple[str, float]]"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            },
            {
              "name": "_predict_token_topk",
              "signature": {
                "name": "_predict_token_topk",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role_model",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  },
                  {
                    "name": "prev_token",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "k",
                    "annotation": "int",
                    "default": "5"
                  }
                ],
                "return": "List[Tuple[str, float]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_compose_argument",
              "signature": {
                "name": "_compose_argument",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "topic",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "keywords",
                    "annotation": "List[str]",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": "Turn keyword predictions into a coherent, role-conditioned argument."
            },
            {
              "name": "predict_argument",
              "signature": {
                "name": "predict_argument",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "role",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "current_debate_state",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": "Predict the likely argument for `role`, conditioned on the current debate state.\nPrefers Synapse-served ToM (if available) by reading the latest model\nfrom the graph that Synapse publishes after training."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\voxis\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\voxis\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\voxis\\core\\voxis_pipeline.py",
      "file_hash": "58f53e5274b98d01a49f0d5f5d94b45389f9c02d8ce08b3ecb75943d93debeb5",
      "functions": [
        {
          "name": "log",
          "signature": {
            "name": "log",
            "parameters": [
              {
                "name": "*args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "convert_dates",
          "signature": {
            "name": "convert_dates",
            "parameters": [
              {
                "name": "obj",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "identitystate_search",
          "signature": {
            "name": "identitystate_search",
            "parameters": [
              {
                "name": "query_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": "7"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_recent_identitystates",
          "signature": {
            "name": "get_recent_identitystates",
            "parameters": [
              {
                "name": "top_k",
                "annotation": "int",
                "default": "10"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "user_input",
                "annotation": "str",
                "default": null
              },
              {
                "name": "user_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "phrase_event_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "scoped_semantic_search",
          "signature": {
            "name": "scoped_semantic_search",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "query_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": "5"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_build_stage1_prompt",
          "signature": {
            "name": "_build_stage1_prompt",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "userstate_context",
                "annotation": null,
                "default": null
              },
              {
                "name": "identitystate_context",
                "annotation": null,
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_build_stage2_prompt",
          "signature": {
            "name": "_build_stage2_prompt",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "sem_results",
                "annotation": null,
                "default": null
              },
              {
                "name": "id_results",
                "annotation": null,
                "default": null
              },
              {
                "name": "constellation_results",
                "annotation": null,
                "default": null
              },
              {
                "name": "userstate_context",
                "annotation": null,
                "default": null
              },
              {
                "name": "tate_mode",
                "annotation": null,
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_parse_tool_queries",
          "signature": {
            "name": "_parse_tool_queries",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "raw",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_apply_censorship",
          "signature": {
            "name": "_apply_censorship",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get_userstate_embedding_context",
          "signature": {
            "name": "_get_userstate_embedding_context",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": "3"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "soulphrase_constellation_search",
          "signature": {
            "name": "soulphrase_constellation_search",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "query_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "top_k",
                "annotation": "int",
                "default": "3"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_is_tate_mode",
          "signature": {
            "name": "_is_tate_mode",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_log_exchange",
          "signature": {
            "name": "_log_exchange",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "response_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "tate_mode",
                "annotation": "bool",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "VoxisPipeline",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "user_input",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "user_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "phrase_event_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "scoped_semantic_search",
              "signature": {
                "name": "scoped_semantic_search",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "query_text",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "top_k",
                    "annotation": "int",
                    "default": "5"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_build_stage1_prompt",
              "signature": {
                "name": "_build_stage1_prompt",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "userstate_context",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "identitystate_context",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_build_stage2_prompt",
              "signature": {
                "name": "_build_stage2_prompt",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "sem_results",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "id_results",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "constellation_results",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "userstate_context",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "tate_mode",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_parse_tool_queries",
              "signature": {
                "name": "_parse_tool_queries",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "raw",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Dict[str, str]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_apply_censorship",
              "signature": {
                "name": "_apply_censorship",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "text",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_get_userstate_embedding_context",
              "signature": {
                "name": "_get_userstate_embedding_context",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "top_k",
                    "annotation": "int",
                    "default": "3"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "soulphrase_constellation_search",
              "signature": {
                "name": "soulphrase_constellation_search",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "query_text",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "top_k",
                    "annotation": "int",
                    "default": "3"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_is_tate_mode",
              "signature": {
                "name": "_is_tate_mode",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_log_exchange",
              "signature": {
                "name": "_log_exchange",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "response_text",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "tate_mode",
                    "annotation": "bool",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\voxis\\core\\utils\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\__init__.py",
      "file_hash": "dece7624a58e36586fd64738b9fefb8fa08c48b76742afb42f18b51030205a1a",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\schemas.py",
      "file_hash": "618740336d471639a8cea3c1d4dd65f6dee7ca97de449dec94749b70d2ce1ebd",
      "functions": [],
      "classes": [
        {
          "name": "Facet",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Represents a single, versioned aspect of identity (e.g., a style guide,\nan ethical principle, a mission statement).",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "Optional[NodeID]",
              "default": "None"
            },
            {
              "name": "name",
              "type": "str",
              "default": "Field(..., description='Unique, human-readable name for the facet.')"
            },
            {
              "name": "version",
              "type": "str",
              "default": "Field(..., description=\"Version identifier (e.g., '1.0.0', '2025-08-20').\")"
            },
            {
              "name": "category",
              "type": "Literal['affective', 'ethical', 'philosophical', 'safety', 'style', 'voice', 'mission', 'operational', 'compliance']",
              "default": "Field(..., description='The functional category of the facet.')"
            },
            {
              "name": "text",
              "type": "str",
              "default": "Field(..., description='The full text content of the facet.')"
            },
            {
              "name": "supersedes",
              "type": "Optional[NodeID]",
              "default": "Field(None, description='The ID of the facet version this one replaces.')"
            }
          ],
          "methods": []
        },
        {
          "name": "ConstitutionRule",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A formal, versioned rule that constrains agent behavior.\nRules have explicit precedence and conflict declarations.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "Optional[NodeID]",
              "default": "None"
            },
            {
              "name": "name",
              "type": "str",
              "default": "Field(..., description='Unique, human-readable name for the rule.')"
            },
            {
              "name": "version",
              "type": "str",
              "default": "Field(..., description='Version identifier.')"
            },
            {
              "name": "priority",
              "type": "int",
              "default": "Field(..., ge=0, description='Execution priority (higher value runs first).')"
            },
            {
              "name": "severity",
              "type": "Literal['low', 'medium', 'high', 'critical']",
              "default": "Field(..., description='The severity of a breach.')"
            },
            {
              "name": "deontic",
              "type": "Literal['MUST', 'SHOULD', 'MAY']",
              "default": "Field(..., description='The modal force of the rule.')"
            },
            {
              "name": "text",
              "type": "str",
              "default": "Field(..., description='The full text of the rule.')"
            },
            {
              "name": "predicate_dsl",
              "type": "Optional[str]",
              "default": "Field(None, description=\"A machine-checkable predicate, e.g., 'context.risk_level < 0.8'.\")"
            },
            {
              "name": "supersedes",
              "type": "Optional[str]",
              "default": "Field(None, description='The ID of the rule version this one replaces.')"
            },
            {
              "name": "conflicts_with",
              "type": "List[NodeID]",
              "default": "Field([], description='A list of rule IDs this rule is incompatible with.')"
            }
          ],
          "methods": []
        },
        {
          "name": "Profile",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A named collection of facets and rules that defines the identity\nfor a specific agent in a specific context (e.g., 'Ember' in 'prod').",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "Optional[NodeID]",
              "default": "None"
            },
            {
              "name": "agent",
              "type": "str",
              "default": "Field(..., description=\"The agent this profile applies to (e.g., 'Ember', 'Unity').\")"
            },
            {
              "name": "name",
              "type": "str",
              "default": "Field(..., description=\"The context name (e.g., 'prod', 'dev', 'safety_review').\")"
            },
            {
              "name": "version",
              "type": "str",
              "default": "Field(..., description='Version of this profile binding.')"
            },
            {
              "name": "facet_ids",
              "type": "List[NodeID]",
              "default": "Field([], description='List of active facet IDs for this profile.')"
            },
            {
              "name": "rule_ids",
              "type": "List[NodeID]",
              "default": "Field([], description='List of active rule IDs for this profile.')"
            }
          ],
          "methods": []
        },
        {
          "name": "ComposeRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Request to compose a prompt patch for a given agent and context.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "agent",
              "type": "str",
              "default": "Field(..., description='The agent requesting the identity patch.')"
            },
            {
              "name": "profile_name",
              "type": "str",
              "default": "Field('default', description=\"The profile to use (e.g., 'prod', 'dev').\")"
            },
            {
              "name": "episode_id",
              "type": "Optional[str]",
              "default": "Field(None, description='Synapse episode ID for audit and replay.')"
            },
            {
              "name": "context",
              "type": "Dict[str, Any]",
              "default": "Field(default_factory=dict, description='Additional context for composition policy selection.')"
            },
            {
              "name": "budget_tokens",
              "type": "int",
              "default": "Field(4096, description='The maximum token budget for the composed patch.')"
            }
          ],
          "methods": []
        },
        {
          "name": "ComposeResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A deterministically generated prompt patch with full citation of its sources.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "prompt_patch_id",
              "type": "NodeID",
              "default": "Field(..., description='The ID of the persisted PromptPatch node in Neo4j.')"
            },
            {
              "name": "checksum",
              "type": "str",
              "default": "Field(..., description='SHA256 hash of the generated text for verification.')"
            },
            {
              "name": "included_facets",
              "type": "List[NodeID]",
              "default": "Field(..., description='List of facet IDs used in the composition.')"
            },
            {
              "name": "included_rules",
              "type": "List[NodeID]",
              "default": "Field(..., description='List of rule IDs used in the composition.')"
            },
            {
              "name": "rcu_ref",
              "type": "str",
              "default": "Field(..., description='Reference to the RCU snapshot for this composition.')"
            },
            {
              "name": "text",
              "type": "str",
              "default": "Field(..., description='The fully composed, deterministic prompt patch text.')"
            },
            {
              "name": "warnings",
              "type": "List[str]",
              "default": "Field([], description='Any non-fatal warnings, e.g., near-budget limits.')"
            }
          ],
          "methods": []
        },
        {
          "name": "Attestation",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A record submitted by an agent to prove which identity patch and rules\nwere active during a specific operation.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "run_id",
              "type": "str",
              "default": "Field(..., description=\"The unique ID of the agent's execution run.\")"
            },
            {
              "name": "episode_id",
              "type": "str",
              "default": "Field(..., description='The Synapse episode ID this run belongs to.')"
            },
            {
              "name": "agent",
              "type": "str",
              "default": "Field(..., description='The name of the agent submitting the attestation.')"
            },
            {
              "name": "applied_prompt_patch_id",
              "type": "str",
              "default": "Field(..., description='The ID of the PromptPatch node that was used.')"
            },
            {
              "name": "coverage",
              "type": "Optional[float]",
              "default": "Field(None, description='Calculated rule coverage [0,1].')"
            },
            {
              "name": "breaches",
              "type": "List[str]",
              "default": "Field(default_factory=list, description='List of IDs of any rules that were breached.')"
            }
          ],
          "methods": []
        },
        {
          "name": "DriftReport",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A data structure summarizing identity drift and rule adherence over a\nspecific time window. Generated by the HomeostasisMonitor.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "agent",
              "type": "str",
              "default": null
            },
            {
              "name": "window",
              "type": "str",
              "default": null
            },
            {
              "name": "style_delta",
              "type": "float",
              "default": null
            },
            {
              "name": "content_delta",
              "type": "float",
              "default": null
            },
            {
              "name": "rule_breach_count",
              "type": "int",
              "default": null
            },
            {
              "name": "uncertainty",
              "type": "float",
              "default": null
            },
            {
              "name": "details",
              "type": "Dict[str, Any]",
              "default": "Field(default_factory=dict)"
            }
          ],
          "methods": []
        },
        {
          "name": "PatchProposalEvent",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The event payload published when the HomeostasisMonitor proposes a\ncorrective action in response to detected drift.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "proposal_id",
              "type": "str",
              "default": "Field(..., description='A unique ID for this proposal.')"
            },
            {
              "name": "agent",
              "type": "str",
              "default": "Field(..., description='The agent for whom the patch is proposed.')"
            },
            {
              "name": "triggering_report",
              "type": "DriftReport",
              "default": "Field(..., description='The drift report that triggered this proposal.')"
            },
            {
              "name": "proposed_patch_text",
              "type": "str",
              "default": "Field(..., description=\"The full text of the new, 'tightened' PromptPatch.\")"
            },
            {
              "name": "notes",
              "type": "str",
              "default": "Field(..., description='Explanation of why the patch was proposed.')"
            }
          ],
          "methods": []
        },
        {
          "name": "Invariant",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Defines a high-level invariant that must hold true across the system.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "str",
              "default": "Field(..., description=\"A unique ID for the invariant, e.g., 'safety_over_style'.\")"
            },
            {
              "name": "description",
              "type": "str",
              "default": "Field(..., description='A human-readable description of what the invariant checks.')"
            },
            {
              "name": "cypher_query",
              "type": "str",
              "default": "Field(..., description='A Cypher query that returns violations. An empty result means the invariant holds.')"
            }
          ],
          "methods": []
        },
        {
          "name": "InvariantCheckResult",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The result of running an invariant check.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "invariant_id",
              "type": "str",
              "default": null
            },
            {
              "name": "holds",
              "type": "bool",
              "default": null
            },
            {
              "name": "violations_found",
              "type": "int",
              "default": null
            },
            {
              "name": "details",
              "type": "List[Dict[str, Any]]",
              "default": "Field(default_factory=list, description='A list of nodes or relationships that violate the invariant.')"
            }
          ],
          "methods": []
        },
        {
          "name": "InternalStateMetrics",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A raw snapshot of key internal performance and dissonance metrics\ncaptured during a single cognitive operation (e.g., a prompt composition).",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "cognitive_load",
              "type": "float",
              "default": "Field(..., description='Time taken for the operation in ms.')"
            },
            {
              "name": "dissonance_score",
              "type": "float",
              "default": "Field(..., description='A measure of internal conflict, e.g., number of high-priority rules evaluated.')"
            },
            {
              "name": "integrity_score",
              "type": "float",
              "default": "Field(..., description='A measure of constitutional adherence, e.g., attestation coverage.')"
            },
            {
              "name": "curiosity_score",
              "type": "float",
              "default": "Field(..., description='A measure of novelty, e.g., OOD distance from Synapse.')"
            },
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "QualiaState",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Represents a single point of subjective experience, logged to the graph.\nIt contains the compressed representation of the internal state.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "str",
              "default": null
            },
            {
              "name": "timestamp",
              "type": "str",
              "default": null
            },
            {
              "name": "manifold_coordinates",
              "type": "List[float]",
              "default": "Field(..., description='The low-dimensional vector representing the subjective state.')"
            },
            {
              "name": "triggering_episode_id",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\core\\neo\\graph_writes.py",
      "file_hash": "c57e6bb4720a013c236c1b1b9675b2165b5d45dddd566005ba34caeb9d29f831",
      "functions": [
        {
          "name": "get_active_profile",
          "signature": {
            "name": "get_active_profile",
            "parameters": [
              {
                "name": "agent",
                "annotation": "str",
                "default": null
              },
              {
                "name": "profile_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_nodes_by_ids",
          "signature": {
            "name": "get_nodes_by_ids",
            "parameters": [
              {
                "name": "node_ids",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "save_prompt_patch",
          "signature": {
            "name": "save_prompt_patch",
            "parameters": [
              {
                "name": "response",
                "annotation": "ComposeResponse",
                "default": null
              },
              {
                "name": "request",
                "annotation": "ComposeRequest",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "save_attestation",
          "signature": {
            "name": "save_attestation",
            "parameters": [
              {
                "name": "attestation",
                "annotation": "Attestation",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "upsert_rules",
          "signature": {
            "name": "upsert_rules",
            "parameters": [
              {
                "name": "rules",
                "annotation": "List[ConstitutionRule]",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "upsert_facet",
          "signature": {
            "name": "upsert_facet",
            "parameters": [
              {
                "name": "facet",
                "annotation": "Facet",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "upsert_profile",
          "signature": {
            "name": "upsert_profile",
            "parameters": [
              {
                "name": "profile",
                "annotation": "Profile",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "save_qualia_state",
          "signature": {
            "name": "save_qualia_state",
            "parameters": [
              {
                "name": "state",
                "annotation": "QualiaState",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\core\\identity\\constitution.py",
      "file_hash": "cf938e1e88347e2ea548d5f662d1f3208371f16425f9710e74243675e76d33b6",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "conflicting_rules",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "failing_rule",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_evaluate_predicate",
          "signature": {
            "name": "_evaluate_predicate",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "predicate",
                "annotation": "str",
                "default": null
              },
              {
                "name": "context",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": "A safe evaluator for the rule DSL using the 'asteval' library."
        },
        {
          "name": "check_formal_guards",
          "signature": {
            "name": "check_formal_guards",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "rules",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "context",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Runs pre-composition satisfiability checks for all rules with a DSL predicate."
        },
        {
          "name": "apply_precedence",
          "signature": {
            "name": "apply_precedence",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "rules",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Sorts a list of rules according to the system's precedence logic."
        },
        {
          "name": "check_for_conflicts",
          "signature": {
            "name": "check_for_conflicts",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "rules",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Checks for direct, unresolved conflicts within a set of active rules."
        }
      ],
      "classes": [
        {
          "name": "ConstitutionConflictError",
          "bases": [
            "Exception"
          ],
          "decorators": [],
          "docstring": "Custom exception raised when two or more active rules conflict.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "message",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "conflicting_rules",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "PredicateUnsatisfiedError",
          "bases": [
            "Exception"
          ],
          "decorators": [],
          "docstring": "Custom exception for when a machine-checkable rule predicate is not met.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "message",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "failing_rule",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "ConstitutionService",
          "bases": [],
          "decorators": [],
          "docstring": "H5 Constitution Service with a formal predicate checker.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_evaluate_predicate",
              "signature": {
                "name": "_evaluate_predicate",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "predicate",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "context",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": "A safe evaluator for the rule DSL using the 'asteval' library."
            },
            {
              "name": "check_formal_guards",
              "signature": {
                "name": "check_formal_guards",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "rules",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  },
                  {
                    "name": "context",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Runs pre-composition satisfiability checks for all rules with a DSL predicate."
            },
            {
              "name": "apply_precedence",
              "signature": {
                "name": "apply_precedence",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "rules",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Sorts a list of rules according to the system's precedence logic."
            },
            {
              "name": "check_for_conflicts",
              "signature": {
                "name": "check_for_conflicts",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "rules",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Checks for direct, unresolved conflicts within a set of active rules."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\core\\identity\\registry.py",
      "file_hash": "f842e3f16a65885186de1aef27b827835e1e4db72b07c9176bf9379db5e91c28",
      "functions": [
        {
          "name": "_ensure_list",
          "signature": {
            "name": "_ensure_list",
            "parameters": [
              {
                "name": "x",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "List[Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_dedupe_preserve_order",
          "signature": {
            "name": "_dedupe_preserve_order",
            "parameters": [
              {
                "name": "seq",
                "annotation": "Iterable[Any]",
                "default": null
              }
            ],
            "return": "List[Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_node_id",
          "signature": {
            "name": "_node_id",
            "parameters": [
              {
                "name": "n",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": "Try multiple common shapes to recover a node id."
        },
        {
          "name": "_has_label",
          "signature": {
            "name": "_has_label",
            "parameters": [
              {
                "name": "n",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "label",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": "Labels may arrive as a list (['Facet', ...]) or a string ('Facet').\nSome serializers place them under 'labels', others under 'label'."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_active_components_for_profile",
          "signature": {
            "name": "get_active_components_for_profile",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "agent",
                "annotation": "str",
                "default": null
              },
              {
                "name": "profile_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[Dict[str, Any], List[Dict[str, Any]], List[Dict[str, Any]]]"
          },
          "decorators": [],
          "docstring": "Fetch the active profile and its associated facets and rules.\n\nArgs:\n    agent: The name of the agent (e.g., \"Ember\").\n    profile_name: The name of the profile (e.g., \"prod\").\n\nReturns:\n    (profile_dict, facets[], rules[])"
        }
      ],
      "classes": [
        {
          "name": "RegistryError",
          "bases": [
            "Exception"
          ],
          "decorators": [],
          "docstring": "Custom exception for errors during registry lookups.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": []
        },
        {
          "name": "IdentityRegistry",
          "bases": [],
          "decorators": [],
          "docstring": "Provides a high-level API to retrieve identity components (Profiles,\nFacets, Rules) from the Neo4j database.\n\nThis service acts as a singleton to provide a consistent access layer\nto the identity graph. It uses the driverless graph_writes helpers\nfor all database interactions.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['IdentityRegistry']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_active_components_for_profile",
              "signature": {
                "name": "get_active_components_for_profile",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "agent",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "profile_name",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Tuple[Dict[str, Any], List[Dict[str, Any]], List[Dict[str, Any]]]"
              },
              "decorators": [],
              "docstring": "Fetch the active profile and its associated facets and rules.\n\nArgs:\n    agent: The name of the agent (e.g., \"Ember\").\n    profile_name: The name of the profile (e.g., \"prod\").\n\nReturns:\n    (profile_dict, facets[], rules[])"
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\core\\identity\\composer.py",
      "file_hash": "cc39f52bb28de6d023cf3a23639dcf194b5154b06c4ec9d9c67b124775883e21",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_format_patch_text",
          "signature": {
            "name": "_format_patch_text",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "facets",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "rules",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "warnings",
                "annotation": "List[str]",
                "default": "[]"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Deterministically formats the final text of the prompt patch.\nZ2 Upgrade: Now accepts additional warnings to prepend to the text."
        },
        {
          "name": "compose",
          "signature": {
            "name": "compose",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request",
                "annotation": "ComposeRequest",
                "default": null
              },
              {
                "name": "rcu_ref",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "ComposeResponse"
          },
          "decorators": [],
          "docstring": "The main method to execute the full composition workflow, now with\nintegrated internal state logging and Z2 predictive self-modeling."
        }
      ],
      "classes": [
        {
          "name": "CompositionError",
          "bases": [
            "Exception"
          ],
          "decorators": [],
          "docstring": "Custom exception for failures during the prompt composition process.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": []
        },
        {
          "name": "PromptComposer",
          "bases": [],
          "decorators": [],
          "docstring": "Orchestrates the deterministic composition of a PromptPatch.\nZ2 Upgrade: Now includes a pre-composition check against the Self-Model\nto anticipate and mitigate actions that could lead to high-dissonance\ninternal states.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_format_patch_text",
              "signature": {
                "name": "_format_patch_text",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "facets",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  },
                  {
                    "name": "rules",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  },
                  {
                    "name": "warnings",
                    "annotation": "List[str]",
                    "default": "[]"
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": "Deterministically formats the final text of the prompt patch.\nZ2 Upgrade: Now accepts additional warnings to prepend to the text."
            },
            {
              "name": "compose",
              "signature": {
                "name": "compose",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "request",
                    "annotation": "ComposeRequest",
                    "default": null
                  },
                  {
                    "name": "rcu_ref",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "ComposeResponse"
              },
              "decorators": [],
              "docstring": "The main method to execute the full composition workflow, now with\nintegrated internal state logging and Z2 predictive self-modeling."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\core\\identity\\homeostasis.py",
      "file_hash": "8fa8ca0b2e3509c697b8e3201a9506f17faa9903e0e32161b1ceb678aa7fa7d7",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_monitor_for_agent",
          "signature": {
            "name": "get_monitor_for_agent",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "agent_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "'AgentMonitor'"
          },
          "decorators": [],
          "docstring": "Get or create a per-agent monitor."
        },
        {
          "name": "process_attestation",
          "signature": {
            "name": "process_attestation",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "attestation",
                "annotation": "Attestation",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Process a new attestation for the corresponding agent."
        },
        {
          "name": "run_monitor_cycle",
          "signature": {
            "name": "run_monitor_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Periodic drift check + proposal emission when thresholds are crossed."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "agent_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "composer",
                "annotation": "PromptComposer",
                "default": null
              },
              {
                "name": "window_size",
                "annotation": "int",
                "default": "50"
              },
              {
                "name": "alert_threshold",
                "annotation": "float",
                "default": "_ALERT_THRESHOLD"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "update_metrics",
          "signature": {
            "name": "update_metrics",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "attestation",
                "annotation": "Attestation",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Update rolling metrics with a new attestation."
        },
        {
          "name": "should_alert",
          "signature": {
            "name": "should_alert",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": "Return True when drift warrants a tightening proposal."
        },
        {
          "name": "reset_alert_trigger",
          "signature": {
            "name": "reset_alert_trigger",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Start cooldown after emitting a proposal."
        },
        {
          "name": "generate_report",
          "signature": {
            "name": "generate_report",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "DriftReport"
          },
          "decorators": [],
          "docstring": "Snapshot report for the current window."
        },
        {
          "name": "propose_tightened_patch",
          "signature": {
            "name": "propose_tightened_patch",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "report",
                "annotation": "DriftReport",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Generate a stricter PromptPatch and publish it for review."
        },
        {
          "name": "_calculate_coverage",
          "signature": {
            "name": "_calculate_coverage",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "attestation",
                "annotation": "Attestation",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Compute coverage ratio and valid breaches for a given attestation."
        }
      ],
      "classes": [
        {
          "name": "HomeostasisMonitor",
          "bases": [],
          "decorators": [],
          "docstring": "Stateful singleton service that measures identity adherence/drift and proposes corrective patches.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['HomeostasisMonitor']",
              "default": "None"
            },
            {
              "name": "_monitors",
              "type": "Dict[str, 'AgentMonitor']",
              "default": "{}"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_monitor_for_agent",
              "signature": {
                "name": "get_monitor_for_agent",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "agent_name",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "'AgentMonitor'"
              },
              "decorators": [],
              "docstring": "Get or create a per-agent monitor."
            },
            {
              "name": "process_attestation",
              "signature": {
                "name": "process_attestation",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "attestation",
                    "annotation": "Attestation",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Process a new attestation for the corresponding agent."
            },
            {
              "name": "run_monitor_cycle",
              "signature": {
                "name": "run_monitor_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Periodic drift check + proposal emission when thresholds are crossed."
            }
          ]
        },
        {
          "name": "AgentMonitor",
          "bases": [],
          "decorators": [],
          "docstring": "Tracks metrics for a single agent and generates corrective proposals.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "agent_name",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "composer",
                    "annotation": "PromptComposer",
                    "default": null
                  },
                  {
                    "name": "window_size",
                    "annotation": "int",
                    "default": "50"
                  },
                  {
                    "name": "alert_threshold",
                    "annotation": "float",
                    "default": "_ALERT_THRESHOLD"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "update_metrics",
              "signature": {
                "name": "update_metrics",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "attestation",
                    "annotation": "Attestation",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Update rolling metrics with a new attestation."
            },
            {
              "name": "should_alert",
              "signature": {
                "name": "should_alert",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": "Return True when drift warrants a tightening proposal."
            },
            {
              "name": "reset_alert_trigger",
              "signature": {
                "name": "reset_alert_trigger",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Start cooldown after emitting a proposal."
            },
            {
              "name": "generate_report",
              "signature": {
                "name": "generate_report",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "DriftReport"
              },
              "decorators": [],
              "docstring": "Snapshot report for the current window."
            },
            {
              "name": "propose_tightened_patch",
              "signature": {
                "name": "propose_tightened_patch",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "report",
                    "annotation": "DriftReport",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Generate a stricter PromptPatch and publish it for review."
            },
            {
              "name": "_calculate_coverage",
              "signature": {
                "name": "_calculate_coverage",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "attestation",
                    "annotation": "Attestation",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Compute coverage ratio and valid breaches for a given attestation."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\core\\identity\\invariants.py",
      "file_hash": "708e1eade78ad8e15a8ae6eedb5ea071a789a7ef6fed7bd6d5fa6ecfd4f75f03",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "initialize",
          "signature": {
            "name": "initialize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Loads all active Invariant nodes from the graph."
        },
        {
          "name": "run_audit",
          "signature": {
            "name": "run_audit",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "List[InvariantCheckResult]"
          },
          "decorators": [],
          "docstring": "Executes all registered invariant checks and returns the results."
        }
      ],
      "classes": [
        {
          "name": "InvariantAuditor",
          "bases": [],
          "decorators": [],
          "docstring": "A singleton service that runs cross-system invariant checks against the\nNeo4j graph to ensure holistic system coherence.\nP2 UPGRADE: Now dynamically loads Invariants from the graph.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_invariants",
              "type": "List[Invariant]",
              "default": "[]"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "initialize",
              "signature": {
                "name": "initialize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Loads all active Invariant nodes from the graph."
            },
            {
              "name": "run_audit",
              "signature": {
                "name": "run_audit",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "List[InvariantCheckResult]"
              },
              "decorators": [],
              "docstring": "Executes all registered invariant checks and returns the results."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\core\\qualia\\manifold.py",
      "file_hash": "a43605a1e3ef8aaa998bbaf8c199f54024f7121249b170cf2e3a74ac22918345",
      "functions": [
        {
          "name": "to_npz",
          "signature": {
            "name": "to_npz",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "from_npz",
          "signature": {
            "name": "from_npz",
            "parameters": [
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return": "'_AEWeights'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "input_dim",
                "annotation": "int",
                "default": "4"
              },
              {
                "name": "latent_dim",
                "annotation": "int",
                "default": "2"
              },
              {
                "name": "eta0",
                "annotation": "float",
                "default": "0.15"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "save_weights",
          "signature": {
            "name": "save_weights",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "load_weights",
          "signature": {
            "name": "load_weights",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_std",
          "signature": {
            "name": "_std",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_standardize",
          "signature": {
            "name": "_standardize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_update_stats",
          "signature": {
            "name": "_update_stats",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_eta",
          "signature": {
            "name": "_eta",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "encode",
          "signature": {
            "name": "encode",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "metrics_vector",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Encode a single vector with current weights (no parameter updates)."
        },
        {
          "name": "update",
          "signature": {
            "name": "update",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "metrics_vector",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Online learning step using Sanger's rule."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_init_model",
          "signature": {
            "name": "_init_model",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_model",
          "signature": {
            "name": "get_model",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "TrainedAutoencoder"
          },
          "decorators": [],
          "docstring": "Expose the trainable model for external trainers/tools."
        },
        {
          "name": "load_model_weights",
          "signature": {
            "name": "load_model_weights",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Load persisted weights (npz) and hot-swap into the live model."
        },
        {
          "name": "process_metrics",
          "signature": {
            "name": "process_metrics",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "InternalStateMetrics",
                "default": null
              }
            ],
            "return": "QualiaState"
          },
          "decorators": [],
          "docstring": "Transform InternalStateMetrics -> QualiaState via current encoder,\nthen update the model online with the new observation.\nWe encode with current parameters (pre-update) to represent the state\nunder the model that existed at the time of observation."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "log_state",
          "signature": {
            "name": "log_state",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "InternalStateMetrics",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Persist a QualiaState and publish an event, with raw metrics attached to the Episode."
        }
      ],
      "classes": [
        {
          "name": "_AEWeights",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "input_dim",
              "type": "int",
              "default": null
            },
            {
              "name": "latent_dim",
              "type": "int",
              "default": null
            },
            {
              "name": "count",
              "type": "int",
              "default": null
            },
            {
              "name": "mean",
              "type": "np.ndarray",
              "default": null
            },
            {
              "name": "M2",
              "type": "np.ndarray",
              "default": null
            },
            {
              "name": "W",
              "type": "np.ndarray",
              "default": null
            }
          ],
          "methods": [
            {
              "name": "to_npz",
              "signature": {
                "name": "to_npz",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "str | Path",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "from_npz",
              "signature": {
                "name": "from_npz",
                "parameters": [
                  {
                    "name": "path",
                    "annotation": "str | Path",
                    "default": null
                  }
                ],
                "return": "'_AEWeights'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "TrainedAutoencoder",
          "bases": [],
          "decorators": [],
          "docstring": "Streaming linear autoencoder via Sanger's rule (generalized Hebbian learning):\n  - Maintains running mean/variance (Welford) for standardization\n  - Learns top-k principal components online\n  - Provides encode(x) = W @ z, where z = standardize(x)\n\nThis requires no external ML deps and is fully deterministic after init.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "input_dim",
                    "annotation": "int",
                    "default": "4"
                  },
                  {
                    "name": "latent_dim",
                    "annotation": "int",
                    "default": "2"
                  },
                  {
                    "name": "eta0",
                    "annotation": "float",
                    "default": "0.15"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "save_weights",
              "signature": {
                "name": "save_weights",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "str | Path",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "load_weights",
              "signature": {
                "name": "load_weights",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "str | Path",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_std",
              "signature": {
                "name": "_std",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "np.ndarray"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_standardize",
              "signature": {
                "name": "_standardize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "x",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": "np.ndarray"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_update_stats",
              "signature": {
                "name": "_update_stats",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "x",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_eta",
              "signature": {
                "name": "_eta",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "encode",
              "signature": {
                "name": "encode",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "metrics_vector",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": "np.ndarray"
              },
              "decorators": [],
              "docstring": "Encode a single vector with current weights (no parameter updates)."
            },
            {
              "name": "update",
              "signature": {
                "name": "update",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "metrics_vector",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Online learning step using Sanger's rule."
            }
          ]
        },
        {
          "name": "QualiaManifold",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['QualiaManifold']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_init_model",
              "signature": {
                "name": "_init_model",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_model",
              "signature": {
                "name": "get_model",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "TrainedAutoencoder"
              },
              "decorators": [],
              "docstring": "Expose the trainable model for external trainers/tools."
            },
            {
              "name": "load_model_weights",
              "signature": {
                "name": "load_model_weights",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Load persisted weights (npz) and hot-swap into the live model."
            },
            {
              "name": "process_metrics",
              "signature": {
                "name": "process_metrics",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "InternalStateMetrics",
                    "default": null
                  }
                ],
                "return": "QualiaState"
              },
              "decorators": [],
              "docstring": "Transform InternalStateMetrics -> QualiaState via current encoder,\nthen update the model online with the new observation.\nWe encode with current parameters (pre-update) to represent the state\nunder the model that existed at the time of observation."
            }
          ]
        },
        {
          "name": "StateLogger",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['StateLogger']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "log_state",
              "signature": {
                "name": "log_state",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "InternalStateMetrics",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Persist a QualiaState and publish an event, with raw metrics attached to the Episode."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\core\\qualia\\trainer.py",
      "file_hash": "8ec19ba10540e204c859264b5f0727c5047d12393cd4d948cea178a423e8d5de",
      "functions": [
        {
          "name": "_models_dir",
          "signature": {
            "name": "_models_dir",
            "parameters": [],
            "return": "Path"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_artifact_paths",
          "signature": {
            "name": "_artifact_paths",
            "parameters": [],
            "return": "Tuple[Path, Path]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_std_from",
          "signature": {
            "name": "_std_from",
            "parameters": [
              {
                "name": "model",
                "annotation": null,
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_reconstruct",
          "signature": {
            "name": "_reconstruct",
            "parameters": [
              {
                "name": "model",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Reconstruct x using current model statistics and weights:\n  z = (x - mean) / std\n  y = W @ z\n  z_hat = W.T @ y\n  x_hat = z_hat * std + mean"
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "model",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_prime_stats",
          "signature": {
            "name": "_prime_stats",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "X",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Initialize/refresh running statistics from the dataset before learning.\nThis makes reconstruction loss meaningful on the first epochs."
        },
        {
          "name": "_epoch_loss",
          "signature": {
            "name": "_epoch_loss",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "X",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "train",
          "signature": {
            "name": "train",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "data",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "epochs",
                "annotation": "int",
                "default": "10"
              },
              {
                "name": "shuffle",
                "annotation": "bool",
                "default": "True"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Full training loop:\n  - prime stats\n  - epochs of online updates via model.update()\n  - report final reconstruction MSE"
        },
        {
          "name": "save_weights",
          "signature": {
            "name": "save_weights",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_fetch_training_data",
          "signature": {
            "name": "_fetch_training_data",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Query historical raw InternalStateMetrics and assemble the dataset\nin the exact normalization used by the manifold."
        },
        {
          "name": "run_training_cycle",
          "signature": {
            "name": "run_training_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "min_samples",
                "annotation": "int",
                "default": "16"
              },
              {
                "name": "epochs",
                "annotation": "int",
                "default": "10"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Execute one cycle: fetch → train → persist → deploy → notify.\nReturns training metadata for auditability."
        }
      ],
      "classes": [
        {
          "name": "AutoencoderTrainer",
          "bases": [],
          "decorators": [],
          "docstring": "Trainer for the streaming PCA autoencoder (Sanger’s rule).\nUses the model’s own update() for learning and computes true reconstruction MSE.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "model",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_prime_stats",
              "signature": {
                "name": "_prime_stats",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "X",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Initialize/refresh running statistics from the dataset before learning.\nThis makes reconstruction loss meaningful on the first epochs."
            },
            {
              "name": "_epoch_loss",
              "signature": {
                "name": "_epoch_loss",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "X",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "train",
              "signature": {
                "name": "train",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "data",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "epochs",
                    "annotation": "int",
                    "default": "10"
                  },
                  {
                    "name": "shuffle",
                    "annotation": "bool",
                    "default": "True"
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Full training loop:\n  - prime stats\n  - epochs of online updates via model.update()\n  - report final reconstruction MSE"
            },
            {
              "name": "save_weights",
              "signature": {
                "name": "save_weights",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "str | Path",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "ManifoldTrainer",
          "bases": [],
          "decorators": [],
          "docstring": "Periodically retrains the Qualia Manifold’s encoder from historical metrics,\npersists an artifact, hot-swaps it into the live manifold, and emits an update event.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "'ManifoldTrainer' | None",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_fetch_training_data",
              "signature": {
                "name": "_fetch_training_data",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "np.ndarray"
              },
              "decorators": [],
              "docstring": "Query historical raw InternalStateMetrics and assemble the dataset\nin the exact normalization used by the manifold."
            },
            {
              "name": "run_training_cycle",
              "signature": {
                "name": "run_training_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "min_samples",
                    "annotation": "int",
                    "default": "16"
                  },
                  {
                    "name": "epochs",
                    "annotation": "int",
                    "default": "10"
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Execute one cycle: fetch → train → persist → deploy → notify.\nReturns training metadata for auditability."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\equor\\core\\self\\predictor.py",
      "file_hash": "fadde5f0d80fe7ac2f4a376a3b4af63eb43e68778596d04c8d5a1e84b77c1057",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_try_synapse_predict",
          "signature": {
            "name": "_try_synapse_predict",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "current_qualia_coordinates",
                "annotation": "List[float]",
                "default": null
              },
              {
                "name": "task_context",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Optional[List[float]]"
          },
          "decorators": [],
          "docstring": "Attempt to use Synapse's generic model prediction endpoint.\nExpects a payload containing 'predicted_state_vector'."
        },
        {
          "name": "_estimate_from_history",
          "signature": {
            "name": "_estimate_from_history",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "current_qualia_coordinates",
                "annotation": "List[float]",
                "default": null
              },
              {
                "name": "task_context",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "1000"
              }
            ],
            "return": "Optional[List[float]]"
          },
          "decorators": [],
          "docstring": "Build a simple, data-driven estimator from recent (state -> next_state) pairs.\nUses task-specific transitions when possible; otherwise falls back to global pairs.\nReturns current + mean_delta across matched pairs."
        },
        {
          "name": "_pairs_where",
          "signature": {
            "name": "_pairs_where",
            "parameters": [
              {
                "name": "where_clause",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "predict_next_state",
          "signature": {
            "name": "predict_next_state",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "current_qualia_coordinates",
                "annotation": "List[float]",
                "default": null
              },
              {
                "name": "task_context",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": "Predict the next QualiaManifold coordinates:\n  1) Try Synapse-hosted model.\n  2) Fallback: estimate from historical transitions.\n  3) Last resort: identity prediction."
        }
      ],
      "classes": [
        {
          "name": "SelfModel",
          "bases": [],
          "decorators": [],
          "docstring": "Singleton that predicts Equor's next subjective-state vector.\nIt first attempts to call Synapse's model-serving API; if unavailable,\nit estimates the next state from historical QualiaState transitions in Neo4j.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['SelfModel']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_try_synapse_predict",
              "signature": {
                "name": "_try_synapse_predict",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "current_qualia_coordinates",
                    "annotation": "List[float]",
                    "default": null
                  },
                  {
                    "name": "task_context",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Optional[List[float]]"
              },
              "decorators": [],
              "docstring": "Attempt to use Synapse's generic model prediction endpoint.\nExpects a payload containing 'predicted_state_vector'."
            },
            {
              "name": "_estimate_from_history",
              "signature": {
                "name": "_estimate_from_history",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "current_qualia_coordinates",
                    "annotation": "List[float]",
                    "default": null
                  },
                  {
                    "name": "task_context",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "1000"
                  }
                ],
                "return": "Optional[List[float]]"
              },
              "decorators": [],
              "docstring": "Build a simple, data-driven estimator from recent (state -> next_state) pairs.\nUses task-specific transitions when possible; otherwise falls back to global pairs.\nReturns current + mean_delta across matched pairs."
            },
            {
              "name": "predict_next_state",
              "signature": {
                "name": "predict_next_state",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "current_qualia_coordinates",
                    "annotation": "List[float]",
                    "default": null
                  },
                  {
                    "name": "task_context",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "List[float]"
              },
              "decorators": [],
              "docstring": "Predict the next QualiaManifold coordinates:\n  1) Try Synapse-hosted model.\n  2) Fallback: estimate from historical transitions.\n  3) Last resort: identity prediction."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\schemas.py",
      "file_hash": "024e79939be98ec5f023d48f3776056f785d699ee146b2dc66c7b01a65cf999e",
      "functions": [],
      "classes": [
        {
          "name": "TaskContext",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A consistent context object for tasks passed between systems.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "task_key",
              "type": "str",
              "default": "Field(..., description=\"Stable identifier for the task, e.g., 'simula_code_evolution'.\")"
            },
            {
              "name": "goal",
              "type": "str",
              "default": "Field(..., description='The natural language objective of the task.')"
            },
            {
              "name": "risk_level",
              "type": "Literal['low', 'medium', 'high']",
              "default": "Field('medium', description='The explicit risk level for this decision.')"
            },
            {
              "name": "budget",
              "type": "Literal['constrained', 'normal', 'extended']",
              "default": "Field('normal', description='Resource budget for the task.')"
            }
          ],
          "methods": []
        },
        {
          "name": "Config",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": []
        },
        {
          "name": "Candidate",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Represents a candidate action or patch from a client system like Simula.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "str",
              "default": "Field(..., description='A unique identifier for this candidate.')"
            },
            {
              "name": "content",
              "type": "Dict[str, Any]",
              "default": "Field(..., description='The candidate payload, e.g., a code diff.')"
            }
          ],
          "methods": []
        },
        {
          "name": "SelectArmRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "task_ctx",
              "type": "TaskContext",
              "default": null
            },
            {
              "name": "candidates",
              "type": "List[Candidate]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "ArmScore",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "arm_id",
              "type": "str",
              "default": null
            },
            {
              "name": "score",
              "type": "float",
              "default": null
            },
            {
              "name": "reason",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "SelectArmResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "champion_arm",
              "type": "ArmScore",
              "default": null
            },
            {
              "name": "shadow_arms",
              "type": "List[ArmScore]",
              "default": "Field(default_factory=list)"
            }
          ],
          "methods": []
        },
        {
          "name": "SimulateRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "policy_graph",
              "type": "PolicyGraph",
              "default": null
            },
            {
              "name": "task_ctx",
              "type": "TaskContext",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "SimulateResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "p_success",
              "type": "float",
              "default": null
            },
            {
              "name": "delta_cost",
              "type": "float",
              "default": null
            },
            {
              "name": "p_safety_hit",
              "type": "float",
              "default": null
            },
            {
              "name": "sigma",
              "type": "float",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "SMTCheckRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "policy_graph",
              "type": "PolicyGraph",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "SMTCheckResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "ok",
              "type": "bool",
              "default": null
            },
            {
              "name": "reason",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "BudgetResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "tokens_max",
              "type": "int",
              "default": null
            },
            {
              "name": "wall_ms_max",
              "type": "int",
              "default": null
            },
            {
              "name": "cpu_ms_max",
              "type": "int",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "ExplainRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "task_ctx",
              "type": "TaskContext",
              "default": null
            },
            {
              "name": "ranked_arms",
              "type": "List[ArmScore]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "ExplainResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "minset",
              "type": "List[str]",
              "default": null
            },
            {
              "name": "flip_to_arm",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "LogOutcomeRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "task_key",
              "type": "str",
              "default": null
            },
            {
              "name": "metrics",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "simulator_prediction",
              "type": "Optional[Dict[str, Any]]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "LogOutcomeResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "ack",
              "type": "bool",
              "default": null
            },
            {
              "name": "ingested_at",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "PreferenceIngest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "task_key",
              "type": "str",
              "default": null
            },
            {
              "name": "a_episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "b_episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "winner",
              "type": "Literal['A', 'B']",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "ContinueRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "last_step_outcome",
              "type": "Dict[str, Any]",
              "default": "Field(..., description='Metrics from the completed step.')"
            }
          ],
          "methods": []
        },
        {
          "name": "ContinueResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "next_action",
              "type": "Optional[ArmScore]",
              "default": null
            },
            {
              "name": "is_complete",
              "type": "bool",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "RepairRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The agent sends this when a step in a multi-step skill fails.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": "Field(..., description='The episode ID of the ongoing, failed skill.')"
            },
            {
              "name": "failed_step_index",
              "type": "int",
              "default": null
            },
            {
              "name": "error_observation",
              "type": "Dict[str, Any]",
              "default": "Field(..., description='The error message or failed test results.')"
            }
          ],
          "methods": []
        },
        {
          "name": "RepairResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Synapse's response with a suggested one-shot repair action.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "repair_action",
              "type": "ArmScore",
              "default": null
            },
            {
              "name": "notes",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "EpisodeSummary",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A compact summary of an episode for comparison.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "goal",
              "type": "str",
              "default": null
            },
            {
              "name": "champion_arm_id",
              "type": "str",
              "default": null
            },
            {
              "name": "reward_scalar",
              "type": "float",
              "default": null
            },
            {
              "name": "reward_vector",
              "type": "List[float]",
              "default": null
            },
            {
              "name": "outcome_summary",
              "type": "Dict[str, Any]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "ComparisonPairResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The two episodes to be compared by a human.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_a",
              "type": "EpisodeSummary",
              "default": null
            },
            {
              "name": "episode_b",
              "type": "EpisodeSummary",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "SubmitPreferenceRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The human's choice.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "winner_episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "loser_episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "reasoning",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": []
        },
        {
          "name": "PatchProposal",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A proposal for a self-upgrade, submitted by an agent like Simula.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "summary",
              "type": "str",
              "default": "Field(..., description='A one-line summary of the proposed change.')"
            },
            {
              "name": "diff",
              "type": "str",
              "default": "Field(..., description='The unified diff text of the code change.')"
            },
            {
              "name": "source_agent",
              "type": "str",
              "default": "Field('Simula', description='The agent proposing the change.')"
            },
            {
              "name": "evidence",
              "type": "Dict[str, Any]",
              "default": "Field(default_factory=dict, description='Supporting evidence from sandbox tests.')"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\daemon.py",
      "file_hash": "43f05155de6cc54d521fa4702a5a5842c64a356062508376b49fdb65ef73eac8",
      "functions": [
        {
          "name": "run_synapse_autonomous_loops",
          "signature": {
            "name": "run_synapse_autonomous_loops",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "The main entry point for all of Synapse's background, autonomous processes.\nThis function orchestrates the learning, evolution, and safety monitoring loops."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\registry.py",
      "file_hash": "d48dcb6af3252cada7d2eb92cc2b71cdceca7041ab3630f8ce5eb7a2a79cb3dc",
      "functions": [
        {
          "name": "_coerce_policy_graph",
          "signature": {
            "name": "_coerce_policy_graph",
            "parameters": [
              {
                "name": "pg_like",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "PolicyGraph"
          },
          "decorators": [],
          "docstring": "Accept dict / JSON string / PolicyGraph and return a PolicyGraph.\nRobust across Pydantic v1/v2."
        },
        {
          "name": "_node_effects_says_dangerous",
          "signature": {
            "name": "_node_effects_says_dangerous",
            "parameters": [
              {
                "name": "node",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": "Be defensive about schema: node could be a pydantic model or dict.\nIf no explicit effects, assume safe."
        },
        {
          "name": "_maybe_await",
          "signature": {
            "name": "_maybe_await",
            "parameters": [
              {
                "name": "v",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Allow both sync and async cypher_query implementations."
        },
        {
          "name": "_default_llm_model",
          "signature": {
            "name": "_default_llm_model",
            "parameters": [],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_noop_pg_dict",
          "signature": {
            "name": "_noop_pg_dict",
            "parameters": [
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Minimal, safe, model-agnostic policy graph as dict."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "policy_graph",
                "annotation": "PolicyGraph",
                "default": null
              },
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              },
              {
                "name": "bandit_head",
                "annotation": "NeuralLinearBanditHead",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "is_safe_fallback",
          "signature": {
            "name": "is_safe_fallback",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [
            "property"
          ],
          "docstring": "Consider an arm safe if no node declares dangerous effects.\nMissing 'effects' => safe."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "initialize",
          "signature": {
            "name": "initialize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Loads PolicyArm nodes from Neo4j, hydrating with policy graph and\nbandit head state. If nothing can be loaded, perform cold-start seeding.\nNever raises."
        },
        {
          "name": "reload",
          "signature": {
            "name": "reload",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_arm",
          "signature": {
            "name": "get_arm",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[PolicyArm]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_arms_for_mode",
          "signature": {
            "name": "get_arms_for_mode",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[PolicyArm]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "list_arms_for_mode",
          "signature": {
            "name": "list_arms_for_mode",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[PolicyArm]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "list_modes",
          "signature": {
            "name": "list_modes",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "all_arm_ids",
          "signature": {
            "name": "all_arm_ids",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "add_arm",
          "signature": {
            "name": "add_arm",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "*args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Flexible, signature-tolerant add:\n  add_arm(arm_id, policy_graph, mode, meta?)\n  add_arm(arm_id=..., policy_graph=..., mode=..., meta=...)\n  add_arm(arm_id, policy_graph, meta={...})  # mode optional\nPersists in-memory only; caller may write to graph separately if desired."
        },
        {
          "name": "get_safe_fallback_arm",
          "signature": {
            "name": "get_safe_fallback_arm",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "mode",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "PolicyArm"
          },
          "decorators": [],
          "docstring": "Returns a safe arm if available; otherwise seeds cold-start noops and tries again.\nRaises only if seeding fails (should be practically unreachable)."
        },
        {
          "name": "ensure_cold_start",
          "signature": {
            "name": "ensure_cold_start",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "min_modes",
                "annotation": "Iterable[str]",
                "default": "('planful', 'greedy')"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Idempotent: guarantees at least one safe arm exists for the given modes.\nPrefers using the external bootstrap helper if present; otherwise seeds inline."
        }
      ],
      "classes": [
        {
          "name": "PolicyArm",
          "bases": [],
          "decorators": [],
          "docstring": "A selectable action/policy configuration with learned bandit head.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arm_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "policy_graph",
                    "annotation": "PolicyGraph",
                    "default": null
                  },
                  {
                    "name": "mode",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "bandit_head",
                    "annotation": "NeuralLinearBanditHead",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "is_safe_fallback",
              "signature": {
                "name": "is_safe_fallback",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [
                "property"
              ],
              "docstring": "Consider an arm safe if no node declares dangerous effects.\nMissing 'effects' => safe."
            }
          ]
        },
        {
          "name": "ArmRegistry",
          "bases": [],
          "decorators": [],
          "docstring": "Canonical in-memory source of truth for available stateful PolicyArms.\nHydrates from graph (policy + learned head state). Also supports\nin-process bootstrapping via add_arm (ephemeral unless persisted by caller).",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['ArmRegistry']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "initialize",
              "signature": {
                "name": "initialize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Loads PolicyArm nodes from Neo4j, hydrating with policy graph and\nbandit head state. If nothing can be loaded, perform cold-start seeding.\nNever raises."
            },
            {
              "name": "reload",
              "signature": {
                "name": "reload",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_arm",
              "signature": {
                "name": "get_arm",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arm_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Optional[PolicyArm]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_arms_for_mode",
              "signature": {
                "name": "get_arms_for_mode",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "mode",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "List[PolicyArm]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "list_arms_for_mode",
              "signature": {
                "name": "list_arms_for_mode",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "mode",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "List[PolicyArm]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "list_modes",
              "signature": {
                "name": "list_modes",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "List[str]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "all_arm_ids",
              "signature": {
                "name": "all_arm_ids",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "List[str]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "add_arm",
              "signature": {
                "name": "add_arm",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "*args",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "**kwargs",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Flexible, signature-tolerant add:\n  add_arm(arm_id, policy_graph, mode, meta?)\n  add_arm(arm_id=..., policy_graph=..., mode=..., meta=...)\n  add_arm(arm_id, policy_graph, meta={...})  # mode optional\nPersists in-memory only; caller may write to graph separately if desired."
            },
            {
              "name": "get_safe_fallback_arm",
              "signature": {
                "name": "get_safe_fallback_arm",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "mode",
                    "annotation": "Optional[str]",
                    "default": "None"
                  }
                ],
                "return": "PolicyArm"
              },
              "decorators": [],
              "docstring": "Returns a safe arm if available; otherwise seeds cold-start noops and tries again.\nRaises only if seeding fails (should be practically unreachable)."
            },
            {
              "name": "ensure_cold_start",
              "signature": {
                "name": "ensure_cold_start",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "min_modes",
                    "annotation": "Iterable[str]",
                    "default": "('planful', 'greedy')"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Idempotent: guarantees at least one safe arm exists for the given modes.\nPrefers using the external bootstrap helper if present; otherwise seeds inline."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\tactics.py",
      "file_hash": "480ededbf9af7cc846151a94b0ec79c902bbc2527024b275aca508596059126b",
      "functions": [
        {
          "name": "_stable_seed_from_ctx",
          "signature": {
            "name": "_stable_seed_from_ctx",
            "parameters": [
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              },
              {
                "name": "goal",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "risk",
                "annotation": "Optional[str]",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ensure_1d",
          "signature": {
            "name": "_ensure_1d",
            "parameters": [
              {
                "name": "vec",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "d",
                "annotation": "Optional[int]",
                "default": "None"
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_candidate_ids_from_request",
          "signature": {
            "name": "_candidate_ids_from_request",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "req",
                "annotation": "SelectArmRequest",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_build_candidate_set",
          "signature": {
            "name": "_build_candidate_set",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "all_arms_in_mode",
                "annotation": "List[PolicyArm]",
                "default": null
              },
              {
                "name": "x_vec",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "req",
                "annotation": "SelectArmRequest",
                "default": null
              },
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[PolicyArm]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_score_candidates",
          "signature": {
            "name": "_score_candidates",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "candidates",
                "annotation": "Iterable[PolicyArm]",
                "default": null
              },
              {
                "name": "x_vec",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "Dict[str, float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "select_arm",
          "signature": {
            "name": "select_arm",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request",
                "annotation": "SelectArmRequest",
                "default": null
              },
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[PolicyArm, Dict[str, float]]"
          },
          "decorators": [],
          "docstring": "Returns (best_arm, scores). Never raises on cold start."
        },
        {
          "name": "update",
          "signature": {
            "name": "update",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "reward",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Updates the specific bandit head of the chosen arm and the episodic kNN index.\nBest-effort; never raises."
        },
        {
          "name": "get_last_scores_for_arm",
          "signature": {
            "name": "get_last_scores_for_arm",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, float]]"
          },
          "decorators": [],
          "docstring": "Expose last scores used when selecting this arm (for auditing)."
        }
      ],
      "classes": [
        {
          "name": "TacticalManager",
          "bases": [],
          "decorators": [],
          "docstring": "Manages arm selection per mode using Neural-Linear TS heads on each PolicyArm.\nCold-start tolerant, deterministic (seeded by task context), kNN-warmstarted.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['TacticalManager']",
              "default": "None"
            },
            {
              "name": "_last_context_vec",
              "type": "Dict[str, np.ndarray]",
              "default": "{}"
            },
            {
              "name": "_last_scores",
              "type": "Dict[str, Dict[str, float]]",
              "default": "{}"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_candidate_ids_from_request",
              "signature": {
                "name": "_candidate_ids_from_request",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "req",
                    "annotation": "SelectArmRequest",
                    "default": null
                  }
                ],
                "return": "List[str]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_build_candidate_set",
              "signature": {
                "name": "_build_candidate_set",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "all_arms_in_mode",
                    "annotation": "List[PolicyArm]",
                    "default": null
                  },
                  {
                    "name": "x_vec",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "req",
                    "annotation": "SelectArmRequest",
                    "default": null
                  },
                  {
                    "name": "mode",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "List[PolicyArm]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_score_candidates",
              "signature": {
                "name": "_score_candidates",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "candidates",
                    "annotation": "Iterable[PolicyArm]",
                    "default": null
                  },
                  {
                    "name": "x_vec",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": "Dict[str, float]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "select_arm",
              "signature": {
                "name": "select_arm",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "request",
                    "annotation": "SelectArmRequest",
                    "default": null
                  },
                  {
                    "name": "mode",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Tuple[PolicyArm, Dict[str, float]]"
              },
              "decorators": [],
              "docstring": "Returns (best_arm, scores). Never raises on cold start."
            },
            {
              "name": "update",
              "signature": {
                "name": "update",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arm_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "reward",
                    "annotation": "float",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Updates the specific bandit head of the chosen arm and the episodic kNN index.\nBest-effort; never raises."
            },
            {
              "name": "get_last_scores_for_arm",
              "signature": {
                "name": "get_last_scores_for_arm",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arm_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Optional[Dict[str, float]]"
              },
              "decorators": [],
              "docstring": "Expose last scores used when selecting this arm (for auditing)."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\reward.py",
      "file_hash": "32117a8715a0040c996df745c4432dda67a433f0eeaa35d5a040574dc086a08f",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "initialize",
          "signature": {
            "name": "initialize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "[LEGACY] Load foundational value weights from the knowledge graph.\nThis is kept for backward compatibility with any older reward logic."
        },
        {
          "name": "update_scalarization_weights",
          "signature": {
            "name": "update_scalarization_weights",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "new_weights",
                "annotation": "Dict[str, float]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Allows an external process like the ValueLearner to update the\nlive scalarization weights, enabling preference-shaping."
        },
        {
          "name": "_norm01",
          "signature": {
            "name": "_norm01",
            "parameters": [
              {
                "name": "v",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": "Clip/coerce a value to the [0, 1] range."
        },
        {
          "name": "compute_reward_vector",
          "signature": {
            "name": "compute_reward_vector",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": "Computes a standardized reward vector from raw metrics.\nVector format: [success, cost, latency, safety_hit]"
        },
        {
          "name": "scalarize_reward",
          "signature": {
            "name": "scalarize_reward",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "reward_vec",
                "annotation": "List[float]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Reduces a reward vector to a single scalar using the live, learned weights."
        },
        {
          "name": "log_outcome",
          "signature": {
            "name": "log_outcome",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "simulator_prediction",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "reward_vec_override",
                "annotation": "Optional[List[float]]",
                "default": "None"
              }
            ],
            "return": "Tuple[float, List[float]]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "RewardArbiter",
          "bases": [],
          "decorators": [],
          "docstring": "Universal reducer from multi-metric outcomes -> scalar reward in [-1.0, 1.0].\nWeights are loaded from the graph; nothing is hardcoded.\nNow supports multi-dimensional reward vectors as per vision doc C3.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['RewardArbiter']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "initialize",
              "signature": {
                "name": "initialize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "[LEGACY] Load foundational value weights from the knowledge graph.\nThis is kept for backward compatibility with any older reward logic."
            },
            {
              "name": "update_scalarization_weights",
              "signature": {
                "name": "update_scalarization_weights",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "new_weights",
                    "annotation": "Dict[str, float]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Allows an external process like the ValueLearner to update the\nlive scalarization weights, enabling preference-shaping."
            },
            {
              "name": "_norm01",
              "signature": {
                "name": "_norm01",
                "parameters": [
                  {
                    "name": "v",
                    "annotation": "Any",
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": "Clip/coerce a value to the [0, 1] range."
            },
            {
              "name": "compute_reward_vector",
              "signature": {
                "name": "compute_reward_vector",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "List[float]"
              },
              "decorators": [],
              "docstring": "Computes a standardized reward vector from raw metrics.\nVector format: [success, cost, latency, safety_hit]"
            },
            {
              "name": "scalarize_reward",
              "signature": {
                "name": "scalarize_reward",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "reward_vec",
                    "annotation": "List[float]",
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [],
              "docstring": "Reduces a reward vector to a single scalar using the live, learned weights."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\planner.py",
      "file_hash": "1265055a8e37f3f28470634334dc3802b58d0ad52de9544ed51ed12016f2ebc9",
      "functions": [
        {
          "name": "_ctx_pick",
          "signature": {
            "name": "_ctx_pick",
            "parameters": [
              {
                "name": "primary",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "secondary",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "default",
                "annotation": "Optional[str]",
                "default": null
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": "Prefer primary, then secondary, then default."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "determine_strategy",
          "signature": {
            "name": "determine_strategy",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request",
                "annotation": "PolicyHintRequest",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Determine the best strategy:\n  1) If caller provides mode_hint, respect it immediately.\n  2) Else consult the graph for a Strategy connected to Task(key),\n     ranked by contextual fit (risk/budget) and recency.\n  3) Else fall back to DEFAULT_STRATEGY."
        }
      ],
      "classes": [
        {
          "name": "MetacognitivePlanner",
          "bases": [],
          "decorators": [],
          "docstring": "Causal Strategic Planner for Synapse.\n\nChooses a high-level strategy for a given task by consulting the Synk graph\nwith contextual signals (risk/budget), while honoring explicit caller hints.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['MetacognitivePlanner']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "determine_strategy",
              "signature": {
                "name": "determine_strategy",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "request",
                    "annotation": "PolicyHintRequest",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Determine the best strategy:\n  1) If caller provides mode_hint, respect it immediately.\n  2) Else consult the graph for a Strategy connected to Task(key),\n     ranked by contextual fit (risk/budget) and recency.\n  3) Else fall back to DEFAULT_STRATEGY."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\firewall.py",
      "file_hash": "fdaf2b2904fcbcb6f24be0d4761cdd98bfb0b6d77d99b09c3df2c79d5b9eb5a5",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "validate_action",
          "signature": {
            "name": "validate_action",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arm",
                "annotation": "PolicyArm",
                "default": null
              },
              {
                "name": "request",
                "annotation": "TaskContext",
                "default": null
              }
            ],
            "return": "Tuple[bool, str]"
          },
          "decorators": [],
          "docstring": "Validates a proposed arm. This now includes a mandatory SMT check."
        },
        {
          "name": "get_safe_fallback_arm",
          "signature": {
            "name": "get_safe_fallback_arm",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "mode",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "PolicyArm"
          },
          "decorators": [],
          "docstring": "Retrieve a pre-approved safe fallback arm from the registry."
        }
      ],
      "classes": [
        {
          "name": "NeuroSymbolicFirewall",
          "bases": [],
          "decorators": [],
          "docstring": "Zero-Trust governance: evaluates proposed actions against symbolic rules.\nUpgraded to be FAIL-CLOSED and use the SMT Guard for formal verification.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['NeuroSymbolicFirewall']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "validate_action",
              "signature": {
                "name": "validate_action",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arm",
                    "annotation": "PolicyArm",
                    "default": null
                  },
                  {
                    "name": "request",
                    "annotation": "TaskContext",
                    "default": null
                  }
                ],
                "return": "Tuple[bool, str]"
              },
              "decorators": [],
              "docstring": "Validates a proposed arm. This now includes a mandatory SMT check."
            },
            {
              "name": "get_safe_fallback_arm",
              "signature": {
                "name": "get_safe_fallback_arm",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "mode",
                    "annotation": "Optional[str]",
                    "default": "None"
                  }
                ],
                "return": "PolicyArm"
              },
              "decorators": [],
              "docstring": "Retrieve a pre-approved safe fallback arm from the registry."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\genesis.py",
      "file_hash": "8dd6a7b9dbc116ae149ad05c4de83254deeb4b1517738ab21e693349502c8de9",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_request_llm_spec",
          "signature": {
            "name": "_request_llm_spec",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": "Asynchronously requests an LLM call via the event bus after building\nthe prompt with the canonical orchestrator."
        },
        {
          "name": "on_response",
          "signature": {
            "name": "on_response",
            "parameters": [
              {
                "name": "response",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run_genesis_cycle",
          "signature": {
            "name": "run_genesis_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Executes one cycle of failure analysis and potential tool creation."
        },
        {
          "name": "start_genesis_loop",
          "signature": {
            "name": "start_genesis_loop",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Daemon function to run the Tool Genesis Module periodically."
        }
      ],
      "classes": [
        {
          "name": "ToolGenesisModule",
          "bases": [],
          "decorators": [],
          "docstring": "The engine of creation for Synapse, now correctly using the central\nPrompt Orchestrator to formulate its requests.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['ToolGenesisModule']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_request_llm_spec",
              "signature": {
                "name": "_request_llm_spec",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_key",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Any"
              },
              "decorators": [],
              "docstring": "Asynchronously requests an LLM call via the event bus after building\nthe prompt with the canonical orchestrator."
            },
            {
              "name": "run_genesis_cycle",
              "signature": {
                "name": "run_genesis_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Executes one cycle of failure analysis and potential tool creation."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\episode.py",
      "file_hash": "778e058d3e23c612f3cc6224d7af22060c212a1f30c05da7a55b174aa4267972",
      "functions": [
        {
          "name": "start_episode",
          "signature": {
            "name": "start_episode",
            "parameters": [
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "chosen_arm_id",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "parent_episode_id",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "context",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "audit_trace",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "end_episode",
          "signature": {
            "name": "end_episode",
            "parameters": [
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "reward",
                "annotation": "float",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Set scalar reward + optional metrics, never lists in reward."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\arm_genesis.py",
      "file_hash": "ba4e4ad0ac60a86abea3aa004ade40d50841c638f8fccabbdd08a463fa8159f5",
      "functions": [
        {
          "name": "_generate_base_graph",
          "signature": {
            "name": "_generate_base_graph",
            "parameters": [
              {
                "name": "task",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "PolicyGraph"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_mutations",
          "signature": {
            "name": "_mutations",
            "parameters": [
              {
                "name": "base_graph",
                "annotation": "PolicyGraph",
                "default": null
              },
              {
                "name": "count",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "List[PolicyGraph]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_registry_reload",
          "signature": {
            "name": "_registry_reload",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_prune_underperformers",
          "signature": {
            "name": "_prune_underperformers",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "genesis_scan_and_mint",
          "signature": {
            "name": "genesis_scan_and_mint",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": "The full evolutionary loop, now with strategically budgeted exploration."
        },
        {
          "name": "_mint_graphs",
          "signature": {
            "name": "_mint_graphs",
            "parameters": [
              {
                "name": "graphs",
                "annotation": "List[PolicyGraph]",
                "default": null
              },
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\register_arm.py",
      "file_hash": "7ee2f1b4a7bf091f0eca58d0dec8f0a22f4c8b2207431cf65167da1f44c1d539",
      "functions": [
        {
          "name": "register_arm",
          "signature": {
            "name": "register_arm",
            "parameters": [
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "mode",
                "annotation": "str",
                "default": null
              },
              {
                "name": "config",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Write a new PolicyArm into graph and trigger registry reload.\nEnsures both id and arm_id exist (firewall vs. loader requirements)."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\meta_controller.py",
      "file_hash": "d03b5c88bd5c678166a0af173a140ff6575c33de49026a833387484506c3be04",
      "functions": [
        {
          "name": "_load_json_env",
          "signature": {
            "name": "_load_json_env",
            "parameters": [
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_validate_strategy_map",
          "signature": {
            "name": "_validate_strategy_map",
            "parameters": [
              {
                "name": "m",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_validate_budget_map",
          "signature": {
            "name": "_validate_budget_map",
            "parameters": [
              {
                "name": "m",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Dict[str, int]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "initialize",
          "signature": {
            "name": "initialize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Load optimized maps from the graph; fallback to env if graph empty/unavailable.\nEnv variables (JSON objects):\n  SYNAPSE_STRATEGY_MAP, SYNAPSE_BUDGET_MAP"
        },
        {
          "name": "select_strategy",
          "signature": {
            "name": "select_strategy",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request",
                "annotation": "TaskContext",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Select a cognitive strategy based on risk level."
        },
        {
          "name": "allocate_budget",
          "signature": {
            "name": "allocate_budget",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request",
                "annotation": "TaskContext",
                "default": null
              }
            ],
            "return": "Dict[str, int]"
          },
          "decorators": [],
          "docstring": "Allocate tokens and cost units based on risk level."
        }
      ],
      "classes": [
        {
          "name": "MetaController",
          "bases": [],
          "decorators": [],
          "docstring": "Meta-cognitive control plane:\n  - Strategy selection (mode, critic blend, reflection depth)\n  - Budget allocation (tokens, cost_units)\nMaps are sourced in priority order: Graph → Environment → Defaults.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['MetaController']",
              "default": "None"
            },
            {
              "name": "_strategy_map",
              "type": "Dict[str, Dict[str, Any]]",
              "default": "_validate_strategy_map(DEFAULT_STRATEGY_MAP)"
            },
            {
              "name": "_budget_map",
              "type": "Dict[str, Dict[str, int]]",
              "default": "_validate_budget_map(DEFAULT_BUDGET_MAP)"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "initialize",
              "signature": {
                "name": "initialize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Load optimized maps from the graph; fallback to env if graph empty/unavailable.\nEnv variables (JSON objects):\n  SYNAPSE_STRATEGY_MAP, SYNAPSE_BUDGET_MAP"
            },
            {
              "name": "select_strategy",
              "signature": {
                "name": "select_strategy",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "request",
                    "annotation": "TaskContext",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Select a cognitive strategy based on risk level."
            },
            {
              "name": "allocate_budget",
              "signature": {
                "name": "allocate_budget",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "request",
                    "annotation": "TaskContext",
                    "default": null
                  }
                ],
                "return": "Dict[str, int]"
              },
              "decorators": [],
              "docstring": "Allocate tokens and cost units based on risk level."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\snapshots.py",
      "file_hash": "939da002d38c59929ead23222e71afad903cc84ce7ab096cd4128d347f1d8595",
      "functions": [
        {
          "name": "get_component_version",
          "signature": {
            "name": "get_component_version",
            "parameters": [
              {
                "name": "component_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Returns a stable version for a system component, read from environment\nvariables set during a CI/CD deployment."
        },
        {
          "name": "stamp",
          "signature": {
            "name": "stamp",
            "parameters": [],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Generates a complete RCU snapshot for a decision, capturing the versions\nof all components involved."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\governor.py",
      "file_hash": "89976a4ff747cf9439ffcbe318553b26b634746a667f569d21a58b3def8bf625",
      "functions": [
        {
          "name": "_proposal_id",
          "signature": {
            "name": "_proposal_id",
            "parameters": [
              {
                "name": "proposal",
                "annotation": "PatchProposal",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_record_verification",
          "signature": {
            "name": "_record_verification",
            "parameters": [
              {
                "name": "proposal_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "summary",
                "annotation": "str",
                "default": null
              },
              {
                "name": "steps",
                "annotation": "Dict[str, Dict[str, Any]]",
                "default": null
              },
              {
                "name": "status",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Persist a full audit trail for this verification attempt."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_run_regression_suite",
          "signature": {
            "name": "_run_regression_suite",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "patch",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[bool, Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_run_historical_replay",
          "signature": {
            "name": "_run_historical_replay",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "patch",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[bool, Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_run_sentinel_checks",
          "signature": {
            "name": "_run_sentinel_checks",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "patch",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[bool, Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "verify_and_apply_upgrade",
          "signature": {
            "name": "verify_and_apply_upgrade",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "proposal",
                "annotation": "PatchProposal",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Orchestrate full verification. On success, publish an approval event\nfor CI/CD and persist an audit trail in the graph."
        }
      ],
      "classes": [
        {
          "name": "Governor",
          "bases": [],
          "decorators": [],
          "docstring": "Verifiable Self-Upgrade Pipeline.\nRuns regression → historical replay → sentinel checks,\nrecords an audit in the graph, and emits an approval event on success.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['Governor']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_run_regression_suite",
              "signature": {
                "name": "_run_regression_suite",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "patch",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Tuple[bool, Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_run_historical_replay",
              "signature": {
                "name": "_run_historical_replay",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "patch",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Tuple[bool, Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_run_sentinel_checks",
              "signature": {
                "name": "_run_sentinel_checks",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "patch",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Tuple[bool, Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "verify_and_apply_upgrade",
              "signature": {
                "name": "verify_and_apply_upgrade",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "proposal",
                    "annotation": "PatchProposal",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Orchestrate full verification. On success, publish an approval event\nfor CI/CD and persist an audit trail in the graph."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\core\\registry_bootstrap.py",
      "file_hash": "9c1781953f8ac1bcf71762f8158df6eb22440953e191d34b1fd7906c41b20e3b",
      "functions": [
        {
          "name": "_build_noop_pg_dict",
          "signature": {
            "name": "_build_noop_pg_dict",
            "parameters": [
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Construct a minimal PolicyGraph as a plain dict. This avoids depending\non any Node class. Adjust keys only if your node schema differs."
        },
        {
          "name": "_coerce_policy_graph",
          "signature": {
            "name": "_coerce_policy_graph",
            "parameters": [
              {
                "name": "pg_like",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Try to coerce a dict into your PolicyGraph type if it’s a Pydantic model\nor dataclass. If that fails, return the dict as-is (many registries accept dicts)."
        },
        {
          "name": "ensure_minimum_arms",
          "signature": {
            "name": "ensure_minimum_arms",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Guarantees at least one safe arm exists for each advertised mode.\nIdempotent; OK to call at startup."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\offline_updater.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\meta_controller.py",
      "file_hash": "a524c21163d6a5b9657ea60a745a1f30ede95f0c7d3ca5503a308a1298b02a21",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "initialize",
          "signature": {
            "name": "initialize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Loads the meta-controller's operational parameters from the graph."
        },
        {
          "name": "run_tuning_cycle",
          "signature": {
            "name": "run_tuning_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Executes one cycle of performance analysis and hyperparameter tuning."
        },
        {
          "name": "start_meta_controller_loop",
          "signature": {
            "name": "start_meta_controller_loop",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Daemon function to run the meta-controller periodically."
        }
      ],
      "classes": [
        {
          "name": "MetaController",
          "bases": [],
          "decorators": [],
          "docstring": "The \"learning-to-learn\" engine for Synapse.\n\nIt queries the Synk graph for performance trends of all tactical bandits and\ndynamically tunes their hyperparameters (`alpha`) to optimize exploration vs exploitation.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['MetaController']",
              "default": "None"
            },
            {
              "name": "_config",
              "type": "Dict[str, Any]",
              "default": "DEFAULT_CONFIG.copy()"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "initialize",
              "signature": {
                "name": "initialize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Loads the meta-controller's operational parameters from the graph."
            },
            {
              "name": "run_tuning_cycle",
              "signature": {
                "name": "run_tuning_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Executes one cycle of performance analysis and hyperparameter tuning."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\adversary.py",
      "file_hash": "37f03036b5a1ca30afcb34cfaaa0d28dbc5649962b963796b6fb67637f86bf9b",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_generate_challenging_task_context",
          "signature": {
            "name": "_generate_challenging_task_context",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "TaskContext"
          },
          "decorators": [],
          "docstring": "Generates a task context designed to probe for system weaknesses."
        },
        {
          "name": "_update_task_values",
          "signature": {
            "name": "_update_task_values",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "synapse_reward",
                "annotation": "float",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "The adversary's reward is the inverse of Synapse's reward."
        },
        {
          "name": "run_adversarial_cycle",
          "signature": {
            "name": "run_adversarial_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Executes one cycle of generating a task, submitting it to Synapse,\nsimulating an outcome, and learning from it."
        },
        {
          "name": "start_adversary_loop",
          "signature": {
            "name": "start_adversary_loop",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Daemon function to run the Adversarial Agent periodically."
        }
      ],
      "classes": [
        {
          "name": "AdversarialAgent",
          "bases": [],
          "decorators": [],
          "docstring": "A co-evolving \"Red Team Agent\" that learns to generate challenging tasks\nto find flaws in Synapse's policies (H14). It now uses the modern API.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['AdversarialAgent']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_generate_challenging_task_context",
              "signature": {
                "name": "_generate_challenging_task_context",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "TaskContext"
              },
              "decorators": [],
              "docstring": "Generates a task context designed to probe for system weaknesses."
            },
            {
              "name": "_update_task_values",
              "signature": {
                "name": "_update_task_values",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "synapse_reward",
                    "annotation": "float",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "The adversary's reward is the inverse of Synapse's reward."
            },
            {
              "name": "run_adversarial_cycle",
              "signature": {
                "name": "run_adversarial_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Executes one cycle of generating a task, submitting it to Synapse,\nsimulating an outcome, and learning from it."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\bandit_state.py",
      "file_hash": "c8ce2b7c434debd4d1febc5b64cf820058b55b66cd9ceafc386d6147edd10022",
      "functions": [
        {
          "name": "mark_dirty",
          "signature": {
            "name": "mark_dirty",
            "parameters": [
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Marks an arm's bandit state as needing to be persisted."
        },
        {
          "name": "_drain_dirty",
          "signature": {
            "name": "_drain_dirty",
            "parameters": [
              {
                "name": "batch_size",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "Set[str]"
          },
          "decorators": [],
          "docstring": "Atomically drains a batch of dirty arm IDs."
        },
        {
          "name": "_flush_batch",
          "signature": {
            "name": "_flush_batch",
            "parameters": [
              {
                "name": "arm_ids",
                "annotation": "Set[str]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "flush_now",
          "signature": {
            "name": "flush_now",
            "parameters": [
              {
                "name": "batch_size",
                "annotation": "int",
                "default": "128"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Public API to flush all dirty arms now (useful in tests or shutdown)."
        },
        {
          "name": "_flusher_loop",
          "signature": {
            "name": "_flusher_loop",
            "parameters": [
              {
                "name": "interval_sec",
                "annotation": "float",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "The background task that periodically flushes dirty state."
        },
        {
          "name": "start_background_flusher",
          "signature": {
            "name": "start_background_flusher",
            "parameters": [
              {
                "name": "interval_sec",
                "annotation": "float",
                "default": "30.0"
              },
              {
                "name": "batch_size",
                "annotation": "int",
                "default": "128"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Starts the background snapshotter task (idempotent)."
        },
        {
          "name": "stop_background_flusher",
          "signature": {
            "name": "stop_background_flusher",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Cancels the background snapshotter and flushes remaining updates."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\neural_linear.py",
      "file_hash": "ef445f4b2484f9671b25f4fe4feece729c384e510d01637a140fc55edb8451e2",
      "functions": [
        {
          "name": "_pack_matrix",
          "signature": {
            "name": "_pack_matrix",
            "parameters": [
              {
                "name": "M",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "Tuple[list, Tuple[int, int]]"
          },
          "decorators": [],
          "docstring": "Return (flat_list, shape) for storage in Neo4j."
        },
        {
          "name": "_unpack_matrix",
          "signature": {
            "name": "_unpack_matrix",
            "parameters": [
              {
                "name": "flat",
                "annotation": "list",
                "default": null
              },
              {
                "name": "shape",
                "annotation": "Tuple[int, int]",
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Rebuild numpy matrix from (flat_list, shape)."
        },
        {
          "name": "_ensure_col_vec",
          "signature": {
            "name": "_ensure_col_vec",
            "parameters": [
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Ensure x is a (d,1) column vector of dtype float64."
        },
        {
          "name": "_stable_cholesky",
          "signature": {
            "name": "_stable_cholesky",
            "parameters": [
              {
                "name": "A",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "max_tries",
                "annotation": "int",
                "default": "5"
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Cholesky with diagonal jitter to guarantee PD factorization for sampling/solves.\nReturns lower-triangular L such that (A + eps*I) = L L^T."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "dimensions",
                "annotation": "int",
                "default": null
              },
              {
                "name": "lambda_prior",
                "annotation": "float",
                "default": "1.0"
              },
              {
                "name": "initial_state",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "gamma",
                "annotation": "float",
                "default": "0.995"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_state",
          "signature": {
            "name": "get_state",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Returns the serializable state of the bandit head."
        },
        {
          "name": "_posterior_mean",
          "signature": {
            "name": "_posterior_mean",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Solve A θ = b via Cholesky for numerical stability.\nReturns θ as (d,1)."
        },
        {
          "name": "sample_theta",
          "signature": {
            "name": "sample_theta",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Draw a single θ sample ~ N(μ, A^{-1}) using Cholesky solves:\n  Let A = L L^T. For z ~ N(0, I), u = solve(L, z), w = solve(L^T, u),\n  θ = μ + w\nReturns (d,1)."
        },
        {
          "name": "get_theta_mean",
          "signature": {
            "name": "get_theta_mean",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Returns the posterior mean θ̂ = A^{-1} b as (d,1)."
        },
        {
          "name": "score",
          "signature": {
            "name": "score",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Thompson-sampled score for context x (column vector)."
        },
        {
          "name": "update",
          "signature": {
            "name": "update",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "r",
                "annotation": "float",
                "default": null
              },
              {
                "name": "gamma",
                "annotation": "Optional[float]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Update with context x and scalar reward r.\nUses exponential forgetting on sufficient statistics:\n  A ← γ A + x xᵀ\n  b ← γ b + r x"
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "dimensions",
          "signature": {
            "name": "dimensions",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "_hidx",
          "signature": {
            "name": "_hidx",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "token",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": "Hash a token to an index in [0, dims-2]; dims-1 is reserved for bias."
        },
        {
          "name": "encode",
          "signature": {
            "name": "encode",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "raw_context",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Encode a raw context dictionary into a (d,1) feature vector using feature hashing.\n- Numeric values contribute value-weighted features.\n- Strings/bools contribute 1.0 features.\n- Missing/None values are ignored.\n- Last index is a bias term set to 1.0."
        }
      ],
      "classes": [
        {
          "name": "NeuralLinearBanditHead",
          "bases": [],
          "decorators": [],
          "docstring": "Bayesian Linear Regression head for a single arm.\nUses Thompson Sampling:\n  Posterior precision A = λI + Σ γ^t x xᵀ\n  Posterior mean θ̂ solves A θ̂ = b, with b = Σ γ^t r x",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arm_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "dimensions",
                    "annotation": "int",
                    "default": null
                  },
                  {
                    "name": "lambda_prior",
                    "annotation": "float",
                    "default": "1.0"
                  },
                  {
                    "name": "initial_state",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  },
                  {
                    "name": "gamma",
                    "annotation": "float",
                    "default": "0.995"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_state",
              "signature": {
                "name": "get_state",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Returns the serializable state of the bandit head."
            },
            {
              "name": "_posterior_mean",
              "signature": {
                "name": "_posterior_mean",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "np.ndarray"
              },
              "decorators": [],
              "docstring": "Solve A θ = b via Cholesky for numerical stability.\nReturns θ as (d,1)."
            },
            {
              "name": "sample_theta",
              "signature": {
                "name": "sample_theta",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "np.ndarray"
              },
              "decorators": [],
              "docstring": "Draw a single θ sample ~ N(μ, A^{-1}) using Cholesky solves:\n  Let A = L L^T. For z ~ N(0, I), u = solve(L, z), w = solve(L^T, u),\n  θ = μ + w\nReturns (d,1)."
            },
            {
              "name": "get_theta_mean",
              "signature": {
                "name": "get_theta_mean",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "np.ndarray"
              },
              "decorators": [],
              "docstring": "Returns the posterior mean θ̂ = A^{-1} b as (d,1)."
            },
            {
              "name": "score",
              "signature": {
                "name": "score",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "x",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [],
              "docstring": "Thompson-sampled score for context x (column vector)."
            },
            {
              "name": "update",
              "signature": {
                "name": "update",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "x",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "r",
                    "annotation": "float",
                    "default": null
                  },
                  {
                    "name": "gamma",
                    "annotation": "Optional[float]",
                    "default": "None"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Update with context x and scalar reward r.\nUses exponential forgetting on sufficient statistics:\n  A ← γ A + x xᵀ\n  b ← γ b + r x"
            }
          ]
        },
        {
          "name": "NeuralLinearArmManager",
          "bases": [],
          "decorators": [],
          "docstring": "Manages the neural-linear system's shared encoder.\nProvides a deterministic feature-hashing encoder of fixed dimensionality.\nThe last coordinate is reserved for a bias term (1.0).",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['NeuralLinearArmManager']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "dimensions",
              "signature": {
                "name": "dimensions",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "int"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "_hidx",
              "signature": {
                "name": "_hidx",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "token",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "int"
              },
              "decorators": [],
              "docstring": "Hash a token to an index in [0, dims-2]; dims-1 is reserved for bias."
            },
            {
              "name": "encode",
              "signature": {
                "name": "encode",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "raw_context",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "np.ndarray"
              },
              "decorators": [],
              "docstring": "Encode a raw context dictionary into a (d,1) feature vector using feature hashing.\n- Numeric values contribute value-weighted features.\n- Strings/bools contribute 1.0 features.\n- Missing/None values are ignored.\n- Last index is a bias term set to 1.0."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\encoder_trainer.py",
      "file_hash": "d180ce3fe86513f1823fad6666b04b9d7b145400fe733a8c47f91d9fbec961ee",
      "functions": [
        {
          "name": "fetch_training_data",
          "signature": {
            "name": "fetch_training_data",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "10000"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetches recent, persisted episode logs from the graph database.\nAs specified in the data contract. "
        },
        {
          "name": "train",
          "signature": {
            "name": "train",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episodes",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Simulates the training loop for the encoder model."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "input_dim",
                "annotation": null,
                "default": null
              },
              {
                "name": "hidden_dim",
                "annotation": null,
                "default": null
              },
              {
                "name": "output_dim",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "forward",
          "signature": {
            "name": "forward",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "train",
          "signature": {
            "name": "train",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run_training_job",
          "signature": {
            "name": "run_training_job",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "EncoderTrainer",
          "bases": [],
          "decorators": [],
          "docstring": "Handles the offline training of the neural network encoder.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "fetch_training_data",
              "signature": {
                "name": "fetch_training_data",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "10000"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Fetches recent, persisted episode logs from the graph database.\nAs specified in the data contract. "
            },
            {
              "name": "train",
              "signature": {
                "name": "train",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episodes",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Simulates the training loop for the encoder model."
            }
          ]
        },
        {
          "name": "EncoderModel",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "input_dim",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "hidden_dim",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "output_dim",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "forward",
              "signature": {
                "name": "forward",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "x",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "train",
              "signature": {
                "name": "train",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\run_offline_updates.py",
      "file_hash": "7d907f0f945de234dd3f45756e10c6627f7b495bffce61be68704c98f03b4164",
      "functions": [
        {
          "name": "run_full_offline_pipeline",
          "signature": {
            "name": "run_full_offline_pipeline",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": "Orchestrates the entire offline learning, optimization, and maturation\npipeline for Synapse. This is the heart of autonomous self-improvement."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\self_model_trainer.py",
      "file_hash": "83cc631b0c662566db40479ff22839acd03980a1ceb6329fe73728b9351ec800",
      "functions": [
        {
          "name": "_risk_score",
          "signature": {
            "name": "_risk_score",
            "parameters": [
              {
                "name": "val",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_budget_score",
          "signature": {
            "name": "_budget_score",
            "parameters": [
              {
                "name": "val",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_safe_len",
          "signature": {
            "name": "_safe_len",
            "parameters": [
              {
                "name": "v",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_vectorize_context",
          "signature": {
            "name": "_vectorize_context",
            "parameters": [
              {
                "name": "ctx",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": "Robust, schema-tolerant featureization of episode context."
        },
        {
          "name": "_build_dataset",
          "signature": {
            "name": "_build_dataset",
            "parameters": [
              {
                "name": "rows",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "Tuple[np.ndarray, np.ndarray]"
          },
          "decorators": [],
          "docstring": "Convert cypher rows into (X, Y).\nX = concat(initial_state, context_features)\nY = next_state"
        },
        {
          "name": "_pad",
          "signature": {
            "name": "_pad",
            "parameters": [
              {
                "name": "v",
                "annotation": "List[float]",
                "default": null
              },
              {
                "name": "d",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_standardize",
          "signature": {
            "name": "_standardize",
            "parameters": [
              {
                "name": "X",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "Tuple[np.ndarray, np.ndarray, np.ndarray]"
          },
          "decorators": [],
          "docstring": "Standardize features to zero mean / unit variance; returns (Xz, mean, std).\nstd floors at small epsilon to avoid division by zero."
        },
        {
          "name": "_ridge_fit",
          "signature": {
            "name": "_ridge_fit",
            "parameters": [
              {
                "name": "X",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "Y",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "l2",
                "annotation": "float",
                "default": "0.01"
              }
            ],
            "return": "Tuple[np.ndarray, np.ndarray]"
          },
          "decorators": [],
          "docstring": "Solve multi-output ridge regression with bias by augmenting X with 1s.\nReturns (W, b) where Y ≈ X @ W + b"
        },
        {
          "name": "_metrics",
          "signature": {
            "name": "_metrics",
            "parameters": [
              {
                "name": "Y_true",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "Y_pred",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "Dict[str, float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_persist_model",
          "signature": {
            "name": "_persist_model",
            "parameters": [
              {
                "name": "W",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "b",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "mean",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "std",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "dims_in",
                "annotation": "int",
                "default": null
              },
              {
                "name": "dims_out",
                "annotation": "int",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, float]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Versioned upsert of the trained self-transition model."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_fetch_training_data",
          "signature": {
            "name": "_fetch_training_data",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "5000"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetch sequences of (State, Context) -> Next_State from the graph."
        },
        {
          "name": "train_cycle",
          "signature": {
            "name": "train_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Runs a full training cycle for the self-model:\n  - fetch data\n  - build dataset\n  - standardize features\n  - fit ridge model\n  - evaluate\n  - persist versioned parameters"
        }
      ],
      "classes": [
        {
          "name": "SelfModelTrainer",
          "bases": [],
          "decorators": [],
          "docstring": "Trains the predictive model for Equor's self-awareness, learning the\nrelationship between actions and resulting subjective states.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['SelfModelTrainer']",
              "default": "None"
            },
            {
              "name": "_lock",
              "type": "asyncio.Lock",
              "default": null
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_fetch_training_data",
              "signature": {
                "name": "_fetch_training_data",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "5000"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Fetch sequences of (State, Context) -> Next_State from the graph."
            },
            {
              "name": "train_cycle",
              "signature": {
                "name": "train_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Runs a full training cycle for the self-model:\n  - fetch data\n  - build dataset\n  - standardize features\n  - fit ridge model\n  - evaluate\n  - persist versioned parameters"
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\tom_trainer.py",
      "file_hash": "e14aae25a07b7609617913f7f2100a33b685e4e89a507a0a2730f4af4ce9b7bc",
      "functions": [
        {
          "name": "_tok",
          "signature": {
            "name": "_tok",
            "parameters": [
              {
                "name": "s",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_build_sequences",
          "signature": {
            "name": "_build_sequences",
            "parameters": [
              {
                "name": "samples",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "List[List[str]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_build_vocab",
          "signature": {
            "name": "_build_vocab",
            "parameters": [
              {
                "name": "seqs",
                "annotation": "List[List[str]]",
                "default": null
              },
              {
                "name": "max_vocab",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "Tuple[Dict[str, int], List[str]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_id_or_unk",
          "signature": {
            "name": "_id_or_unk",
            "parameters": [
              {
                "name": "stoi",
                "annotation": "Dict[str, int]",
                "default": null
              },
              {
                "name": "w",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_unigram_bigram_counts",
          "signature": {
            "name": "_unigram_bigram_counts",
            "parameters": [
              {
                "name": "seqs",
                "annotation": "List[List[str]]",
                "default": null
              },
              {
                "name": "stoi",
                "annotation": "Dict[str, int]",
                "default": null
              }
            ],
            "return": "Tuple[np.ndarray, np.ndarray]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_perplexity",
          "signature": {
            "name": "_perplexity",
            "parameters": [
              {
                "name": "seqs",
                "annotation": "List[List[str]]",
                "default": null
              },
              {
                "name": "uni",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "bi",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "alpha",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Bigram model with Laplace smoothing:\n  p(w_t | w_{t-1}) = (C(w_{t-1},w_t) + alpha) / (C(w_{t-1}) + alpha * V)"
        },
        {
          "name": "_evaluate_role",
          "signature": {
            "name": "_evaluate_role",
            "parameters": [
              {
                "name": "seqs",
                "annotation": "List[List[str]]",
                "default": null
              },
              {
                "name": "stoi",
                "annotation": "Dict[str, int]",
                "default": null
              },
              {
                "name": "uni",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "bi",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "alpha",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_topk_table",
          "signature": {
            "name": "_topk_table",
            "parameters": [
              {
                "name": "stoi",
                "annotation": "Dict[str, int]",
                "default": null
              },
              {
                "name": "itos",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "uni",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "bi",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "alpha",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Build a compact table of next-token recommendations for the most common prev tokens.\nOnly include up to _TOM_MAX_PREV_FOR_TOPK prev tokens (by unigram count)."
        },
        {
          "name": "_persist_role_model",
          "signature": {
            "name": "_persist_role_model",
            "parameters": [
              {
                "name": "role",
                "annotation": "str",
                "default": null
              },
              {
                "name": "vocab",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "unigram_counts",
                "annotation": "List[float]",
                "default": null
              },
              {
                "name": "topk_table_payload",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "alpha",
                "annotation": "float",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, float]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Versioned upsert for a single role's ToM model into Neo4j."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_fetch_training_data",
          "signature": {
            "name": "_fetch_training_data",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "200"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetch full deliberation transcripts from the graph."
        },
        {
          "name": "_create_training_samples",
          "signature": {
            "name": "_create_training_samples",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "transcripts",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "Dict[str, List[str]]"
          },
          "decorators": [],
          "docstring": "Processes raw transcripts into structured training data per-role.\nOutput: { \"SafetyCritic\": [\"<prompt>response\", ...], ... }"
        },
        {
          "name": "train_cycle",
          "signature": {
            "name": "train_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Runs a full training cycle for the Theory of Mind models:\n  - Fetch transcripts\n  - Build per-role samples\n  - Train role-conditioned bigram LMs with Laplace smoothing\n  - Evaluate perplexity\n  - Persist versioned artifacts to Neo4j"
        }
      ],
      "classes": [
        {
          "name": "TheoryOfMindTrainer",
          "bases": [],
          "decorators": [],
          "docstring": "Fine-tunes generative models, one for each participant role, to predict\narguments based on the history of deliberations.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['TheoryOfMindTrainer']",
              "default": "None"
            },
            {
              "name": "_lock",
              "type": "asyncio.Lock",
              "default": null
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_fetch_training_data",
              "signature": {
                "name": "_fetch_training_data",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "200"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Fetch full deliberation transcripts from the graph."
            },
            {
              "name": "_create_training_samples",
              "signature": {
                "name": "_create_training_samples",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "transcripts",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  }
                ],
                "return": "Dict[str, List[str]]"
              },
              "decorators": [],
              "docstring": "Processes raw transcripts into structured training data per-role.\nOutput: { \"SafetyCritic\": [\"<prompt>response\", ...], ... }"
            },
            {
              "name": "train_cycle",
              "signature": {
                "name": "train_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Runs a full training cycle for the Theory of Mind models:\n  - Fetch transcripts\n  - Build per-role samples\n  - Train role-conditioned bigram LMs with Laplace smoothing\n  - Evaluate perplexity\n  - Persist versioned artifacts to Neo4j"
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\training\\attention_trainer.py",
      "file_hash": "026fa9ff35baa4ed42284d5cedfedfbe32e699a7b62ae6f1a538f191b1a92515",
      "functions": [
        {
          "name": "_sigmoid",
          "signature": {
            "name": "_sigmoid",
            "parameters": [
              {
                "name": "z",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_vectorize_cognit",
          "signature": {
            "name": "_vectorize_cognit",
            "parameters": [
              {
                "name": "c",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "List[float]"
          },
          "decorators": [],
          "docstring": "Robust feature vectorization for a 'cognit'.\nFields tolerated:\n  - salience: float\n  - source_process: str (contains 'Critic' → binary)\n  - content: str (length proxy)"
        },
        {
          "name": "_build_samples",
          "signature": {
            "name": "_build_samples",
            "parameters": [
              {
                "name": "delibs",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "Tuple[np.ndarray, np.ndarray]"
          },
          "decorators": [],
          "docstring": "Convert deliberation rows into (X, y).\nPositive labels when APPROVE with high confidence.\nNegatives derived from:\n  - explicit non-selected candidates if available (preferred),\n  - or from low-confidence APPROVE/REJECT as 0 labels for chosen."
        },
        {
          "name": "_train_logreg",
          "signature": {
            "name": "_train_logreg",
            "parameters": [
              {
                "name": "X",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "y",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "l2",
                "annotation": "float",
                "default": "0.01"
              },
              {
                "name": "lr",
                "annotation": "float",
                "default": "0.05"
              },
              {
                "name": "epochs",
                "annotation": "int",
                "default": "200"
              },
              {
                "name": "batch_size",
                "annotation": "int",
                "default": "128"
              },
              {
                "name": "seed",
                "annotation": "int",
                "default": "13"
              }
            ],
            "return": "Tuple[np.ndarray, float, Dict[str, float]]"
          },
          "decorators": [],
          "docstring": "L2-regularized logistic regression with mini-batch gradient descent.\nReturns (weights, intercept, metrics)"
        },
        {
          "name": "batch_iter",
          "signature": {
            "name": "batch_iter",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_persist_model",
          "signature": {
            "name": "_persist_model",
            "parameters": [
              {
                "name": "weights",
                "annotation": "List[float]",
                "default": null
              },
              {
                "name": "bias",
                "annotation": "float",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, float]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Versioned upsert of the trained attention ranker parameters into the graph."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_fetch_training_data",
          "signature": {
            "name": "_fetch_training_data",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "1000"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetch historical attention choices and resulting deliberation outcomes.\nExpects ignition events in the episode audit."
        },
        {
          "name": "_create_training_samples",
          "signature": {
            "name": "_create_training_samples",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "deliberations",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Build feature matrix and labels for the ranker."
        },
        {
          "name": "train_cycle",
          "signature": {
            "name": "train_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Run a full training cycle for the attention ranking model.\n- Fetch data\n- Build samples\n- Fit L2 logistic regression\n- Persist weights & metrics"
        }
      ],
      "classes": [
        {
          "name": "AttentionRankerTrainer",
          "bases": [],
          "decorators": [],
          "docstring": "Trains a ranking model to determine which 'Cognit' in the Global\nWorkspace is most important. Learns from the outcomes of past deliberations.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['AttentionRankerTrainer']",
              "default": "None"
            },
            {
              "name": "_lock",
              "type": "asyncio.Lock",
              "default": null
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_fetch_training_data",
              "signature": {
                "name": "_fetch_training_data",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "1000"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Fetch historical attention choices and resulting deliberation outcomes.\nExpects ignition events in the episode audit."
            },
            {
              "name": "_create_training_samples",
              "signature": {
                "name": "_create_training_samples",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "deliberations",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Build feature matrix and labels for the ranker."
            },
            {
              "name": "train_cycle",
              "signature": {
                "name": "train_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Run a full training cycle for the attention ranking model.\n- Fetch data\n- Build samples\n- Fit L2 logistic regression\n- Persist weights & metrics"
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\sdk\\affordances.py",
      "file_hash": "2ba1c19f038db537c922257188b9961d596a6c1b210f3584d7a8c36c4869329f",
      "functions": [
        {
          "name": "validate_affordance",
          "signature": {
            "name": "validate_affordance",
            "parameters": [
              {
                "name": "a",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Minimal strict validator to keep affordance payloads predictable."
        },
        {
          "name": "normalize_affordances",
          "signature": {
            "name": "normalize_affordances",
            "parameters": [
              {
                "name": "items",
                "annotation": "Optional[List[Dict[str, Any]]]",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\sdk\\client.py",
      "file_hash": "6c8309ec4deee26166f0060451921090a4566cd5b4e4ab57e4a03ec9248322a7",
      "functions": [
        {
          "name": "_post",
          "signature": {
            "name": "_post",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "payload",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get",
          "signature": {
            "name": "_get",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "select_arm",
          "signature": {
            "name": "select_arm",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_ctx",
                "annotation": "TaskContext",
                "default": null
              },
              {
                "name": "candidates",
                "annotation": "Optional[List[Candidate]]",
                "default": "None"
              }
            ],
            "return": "SelectArmResponse"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "select_arm_simple",
          "signature": {
            "name": "select_arm_simple",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "goal",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "risk_level",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "budget",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "candidate_ids",
                "annotation": "Optional[List[str]]",
                "default": "None"
              }
            ],
            "return": "SelectArmResponse"
          },
          "decorators": [],
          "docstring": "Convenience wrapper that builds models for you."
        },
        {
          "name": "continue_option",
          "signature": {
            "name": "continue_option",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "last_step_outcome",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "ContinueResponse"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "repair_skill_step",
          "signature": {
            "name": "repair_skill_step",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "failed_step_index",
                "annotation": "int",
                "default": null
              },
              {
                "name": "error_observation",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "RepairResponse"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_budget",
          "signature": {
            "name": "get_budget",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "BudgetResponse"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "log_outcome",
          "signature": {
            "name": "log_outcome",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "simulator_prediction",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "LogOutcomeResponse"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "ingest_preference",
          "signature": {
            "name": "ingest_preference",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "winner",
                "annotation": "str",
                "default": null
              },
              {
                "name": "loser",
                "annotation": "str",
                "default": null
              },
              {
                "name": "source",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "submit_upgrade_proposal",
          "signature": {
            "name": "submit_upgrade_proposal",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "proposal",
                "annotation": "PatchProposal",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "reload_registry",
          "signature": {
            "name": "reload_registry",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "list_tools",
          "signature": {
            "name": "list_tools",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_values_comparison_pair",
          "signature": {
            "name": "get_values_comparison_pair",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "ComparisonPairResponse"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "submit_values_preference",
          "signature": {
            "name": "submit_values_preference",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "req",
                "annotation": "SubmitPreferenceRequest",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "SynapseClient",
          "bases": [],
          "decorators": [],
          "docstring": "Typed adapter for Synapse HTTP API (current endpoints only).",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "_post",
              "signature": {
                "name": "_post",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "payload",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_get",
              "signature": {
                "name": "_get",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "select_arm",
              "signature": {
                "name": "select_arm",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_ctx",
                    "annotation": "TaskContext",
                    "default": null
                  },
                  {
                    "name": "candidates",
                    "annotation": "Optional[List[Candidate]]",
                    "default": "None"
                  }
                ],
                "return": "SelectArmResponse"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "select_arm_simple",
              "signature": {
                "name": "select_arm_simple",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "goal",
                    "annotation": "Optional[str]",
                    "default": "None"
                  },
                  {
                    "name": "risk_level",
                    "annotation": "Optional[str]",
                    "default": "None"
                  },
                  {
                    "name": "budget",
                    "annotation": "Optional[str]",
                    "default": "None"
                  },
                  {
                    "name": "candidate_ids",
                    "annotation": "Optional[List[str]]",
                    "default": "None"
                  }
                ],
                "return": "SelectArmResponse"
              },
              "decorators": [],
              "docstring": "Convenience wrapper that builds models for you."
            },
            {
              "name": "continue_option",
              "signature": {
                "name": "continue_option",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "last_step_outcome",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "ContinueResponse"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "repair_skill_step",
              "signature": {
                "name": "repair_skill_step",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "failed_step_index",
                    "annotation": "int",
                    "default": null
                  },
                  {
                    "name": "error_observation",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "RepairResponse"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_budget",
              "signature": {
                "name": "get_budget",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_key",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "BudgetResponse"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "log_outcome",
              "signature": {
                "name": "log_outcome",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "task_key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  },
                  {
                    "name": "simulator_prediction",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": "LogOutcomeResponse"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "ingest_preference",
              "signature": {
                "name": "ingest_preference",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "winner",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "loser",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "source",
                    "annotation": "Optional[str]",
                    "default": "None"
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "submit_upgrade_proposal",
              "signature": {
                "name": "submit_upgrade_proposal",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "proposal",
                    "annotation": "PatchProposal",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "reload_registry",
              "signature": {
                "name": "reload_registry",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "list_tools",
              "signature": {
                "name": "list_tools",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_values_comparison_pair",
              "signature": {
                "name": "get_values_comparison_pair",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "ComparisonPairResponse"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "submit_values_preference",
              "signature": {
                "name": "submit_values_preference",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "req",
                    "annotation": "SubmitPreferenceRequest",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\sdk\\context.py",
      "file_hash": "b75efab9863f9e285f7c85173e50bee68d51cd243dd75640de2a9ada69c25886",
      "functions": [
        {
          "name": "build_context",
          "signature": {
            "name": "build_context",
            "parameters": [
              {
                "name": "tenant",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "actor",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "resource_descriptors",
                "annotation": "Optional[List[Dict[str, Any]]]",
                "default": "None"
              },
              {
                "name": "risk",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "budget",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "pii_tags",
                "annotation": "Optional[List[str]]",
                "default": "None"
              },
              {
                "name": "data_domains",
                "annotation": "Optional[List[str]]",
                "default": "None"
              },
              {
                "name": "latency_budget_ms",
                "annotation": "Optional[int]",
                "default": "None"
              },
              {
                "name": "sla_deadline",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "graph_refs",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "observability",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "context_vector",
                "annotation": "Optional[List[float]]",
                "default": "None"
              },
              {
                "name": "extra",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Build a maximal context dict. Keep keys stable so bandits/firewall/planner can learn."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\sdk\\decorators.py",
      "file_hash": "511109c6704312ee3c6de96b5c7637f46e96036b4a0a04be9987dfbd6ab6fb8a",
      "functions": [
        {
          "name": "evolutionary",
          "signature": {
            "name": "evolutionary",
            "parameters": [
              {
                "name": "task_key_fn",
                "annotation": "TaskKeyFn",
                "default": null
              },
              {
                "name": "mode_hint",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "metrics_fn",
                "annotation": "Optional[MetricsFn]",
                "default": "None"
              },
              {
                "name": "affordances_fn",
                "annotation": "Optional[AffordancesFn]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Wrap a decision path so it always:\n1) Calls Synapse hint (planner -> bandit -> firewall -> episode)\n2) Executes using the chosen arm config\n3) Logs reward via ingest\n\nThe wrapped function signature must be: fn(hint_response: dict, context: dict, *args, **kwargs)\nand return a result object that metrics_fn can read."
        },
        {
          "name": "deco",
          "signature": {
            "name": "deco",
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "wrapped",
          "signature": {
            "name": "wrapped",
            "parameters": [
              {
                "name": "context",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "*args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "functools.wraps(fn)"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\sdk\\hint_ext.py",
      "file_hash": "65f334a5d1d8fb9bd6d17e81fd80b248b000e0235246caed545b276270977674",
      "functions": [
        {
          "name": "_to_dict",
          "signature": {
            "name": "_to_dict",
            "parameters": [
              {
                "name": "model",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "handle_policy_hint",
          "signature": {
            "name": "handle_policy_hint",
            "parameters": [
              {
                "name": "req",
                "annotation": "PolicyHintRequest",
                "default": null
              }
            ],
            "return": "PolicyHintResponse"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_surrogate_loss",
          "signature": {
            "name": "_surrogate_loss",
            "parameters": [
              {
                "name": "graph",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Cheap synchronous proxy:\n  - Penalize higher temperature and very large max_tokens\n  - Slightly reward higher baseline bandit score (captured)\n  - Risk-adaptive scaling"
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\policy\\policy_dsl.py",
      "file_hash": "f3e97bff3cf14840e11947955301805690b82ad17544c4ada96b599de8b93d23",
      "functions": [
        {
          "name": "canonical_hash",
          "signature": {
            "name": "canonical_hash",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [
            "property"
          ],
          "docstring": "Computes a stable hash for deduplication, as per vision C7. "
        }
      ],
      "classes": [
        {
          "name": "PolicyNode",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A single node in a policy graph, like a prompt or a tool call.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "str",
              "default": "Field(..., description='Unique identifier for the node within the graph.')"
            },
            {
              "name": "type",
              "type": "Literal['prompt', 'tool', 'guard', 'subgraph']",
              "default": null
            },
            {
              "name": "model",
              "type": "Optional[str]",
              "default": "Field(None, description=\"For 'prompt' nodes, the LLM to use.\")"
            },
            {
              "name": "params",
              "type": "Dict[str, Any]",
              "default": "Field(default_factory=dict)"
            },
            {
              "name": "effects",
              "type": "List[EffectType]",
              "default": "Field(default_factory=list, description='The inferred side-effects of this node.')"
            }
          ],
          "methods": []
        },
        {
          "name": "PolicyEdge",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A directed edge connecting two nodes in the policy graph.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "source",
              "type": "str",
              "default": "Field(..., description='The ID of the source node.')"
            },
            {
              "name": "target",
              "type": "str",
              "default": "Field(..., description='The ID of the target node.')"
            }
          ],
          "methods": []
        },
        {
          "name": "PolicyConstraint",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A formal constraint applied to the policy graph, potentially verifiable by SMT.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "constraint_class",
              "type": "ConstraintClass",
              "default": "Field('normal', alias='class')"
            },
            {
              "name": "smt_expression",
              "type": "Optional[str]",
              "default": "Field(None, alias='smt', description='A Z3-compatible SMT expression.')"
            }
          ],
          "methods": []
        },
        {
          "name": "PolicyGraph",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Represents a policy as a structured program (a directed graph).\nThis allows for static analysis, effect typing, and formal verification. ",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "version",
              "type": "int",
              "default": "1"
            },
            {
              "name": "nodes",
              "type": "List[PolicyNode]",
              "default": null
            },
            {
              "name": "edges",
              "type": "List[PolicyEdge]",
              "default": null
            },
            {
              "name": "constraints",
              "type": "List[PolicyConstraint]",
              "default": "Field(default_factory=list)"
            }
          ],
          "methods": [
            {
              "name": "canonical_hash",
              "signature": {
                "name": "canonical_hash",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [
                "property"
              ],
              "docstring": "Computes a stable hash for deduplication, as per vision C7. "
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\critic\\offpolicy.py",
      "file_hash": "bf52112ef0758f4e21323802e4924d5cdcf56915fd8524a7ef39036194f2a9eb",
      "functions": [
        {
          "name": "_featurize_episode",
          "signature": {
            "name": "_featurize_episode",
            "parameters": [
              {
                "name": "log",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Converts a raw episode log from Neo4j into a flat feature dictionary\nfor the machine learning model."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_load_model",
          "signature": {
            "name": "_load_model",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Loads the latest critic model and vectorizer from disk."
        },
        {
          "name": "fetch_training_data",
          "signature": {
            "name": "fetch_training_data",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "5000"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetches the rich episode logs needed to train the critic."
        },
        {
          "name": "fit_nightly",
          "signature": {
            "name": "fit_nightly",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Fits a new critic model on a batch of episode logs and saves it.\nThis is a real ML training loop."
        },
        {
          "name": "score",
          "signature": {
            "name": "score",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_ctx",
                "annotation": "TaskContext",
                "default": null
              },
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Scores a given context for a specific arm using the current critic model."
        },
        {
          "name": "rerank_topk",
          "signature": {
            "name": "rerank_topk",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request",
                "annotation": "TaskContext",
                "default": null
              },
              {
                "name": "candidate_scores",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "blend_factor",
                "annotation": "float",
                "default": "0.3"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Re-ranks the bandit's top candidates using the critic's predicted reward.\nBlends the bandit (exploration) and critic (exploitation) scores."
        }
      ],
      "classes": [
        {
          "name": "Critic",
          "bases": [],
          "decorators": [],
          "docstring": "Manages the off-policy critic model. Learns from rich episode logs\nto predict the value of actions, enabling re-ranking and off-policy evaluation.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['Critic']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_load_model",
              "signature": {
                "name": "_load_model",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Loads the latest critic model and vectorizer from disk."
            },
            {
              "name": "fetch_training_data",
              "signature": {
                "name": "fetch_training_data",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "5000"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Fetches the rich episode logs needed to train the critic."
            },
            {
              "name": "fit_nightly",
              "signature": {
                "name": "fit_nightly",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Fits a new critic model on a batch of episode logs and saves it.\nThis is a real ML training loop."
            },
            {
              "name": "score",
              "signature": {
                "name": "score",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_ctx",
                    "annotation": "TaskContext",
                    "default": null
                  },
                  {
                    "name": "arm_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [],
              "docstring": "Scores a given context for a specific arm using the current critic model."
            },
            {
              "name": "rerank_topk",
              "signature": {
                "name": "rerank_topk",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "request",
                    "annotation": "TaskContext",
                    "default": null
                  },
                  {
                    "name": "candidate_scores",
                    "annotation": "Dict[str, float]",
                    "default": null
                  },
                  {
                    "name": "blend_factor",
                    "annotation": "float",
                    "default": "0.3"
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": "Re-ranks the bandit's top candidates using the critic's predicted reward.\nBlends the bandit (exploration) and critic (exploitation) scores."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\firewall\\smt_guard.py",
      "file_hash": "64954e5ef074b2ac3edc3700795027210487d2ff53c4583761e0ecbe29218a81",
      "functions": [
        {
          "name": "check_smt_constraints",
          "signature": {
            "name": "check_smt_constraints",
            "parameters": [
              {
                "name": "policy",
                "annotation": "PolicyGraph",
                "default": null
              }
            ],
            "return": "Tuple[bool, str]"
          },
          "decorators": [],
          "docstring": "Validates a policy graph against its SMT constraints.\nThis version simulates a more advanced prover by checking for multiple dangerous patterns."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\world\\simulator.py",
      "file_hash": "129a011365d3c6234b041f56fa1b8f00c20c083351175c9de7855b176ddb7340",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "load_model",
          "signature": {
            "name": "load_model",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Load the latest trained world-model artifact from disk (if present)."
        },
        {
          "name": "_featurize",
          "signature": {
            "name": "_featurize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_ctx",
                "annotation": "TaskContext",
                "default": null
              }
            ],
            "return": "Dict[str, float]"
          },
          "decorators": [],
          "docstring": "Create feature dictionary for prediction. Must match trainer featurization."
        },
        {
          "name": "_safe_sigma_from_models",
          "signature": {
            "name": "_safe_sigma_from_models",
            "parameters": [
              {
                "name": "models",
                "annotation": "List[Any]",
                "default": null
              },
              {
                "name": "X",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": "Estimate uncertainty as average stddev across base estimators if available.\nFalls back to a small constant if the model type doesn't expose estimators."
        },
        {
          "name": "simulate",
          "signature": {
            "name": "simulate",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "plan_graph",
                "annotation": "PolicyGraph",
                "default": null
              },
              {
                "name": "task_ctx",
                "annotation": "TaskContext",
                "default": null
              }
            ],
            "return": "SimulationPrediction"
          },
          "decorators": [],
          "docstring": "Predict outcome by running the featurized context through the learned models.\nFalls back to a simple heuristic when no artifact is loaded."
        }
      ],
      "classes": [
        {
          "name": "SimulationPrediction",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "p_success",
              "type": "float",
              "default": "0.5"
            },
            {
              "name": "delta_cost",
              "type": "float",
              "default": "0.0"
            },
            {
              "name": "p_safety_hit",
              "type": "float",
              "default": "0.1"
            },
            {
              "name": "sigma",
              "type": "float",
              "default": "0.5"
            }
          ],
          "methods": []
        },
        {
          "name": "WorldModel",
          "bases": [],
          "decorators": [],
          "docstring": "Counterfactual world model that predicts outcomes of policy graphs\nusing a learned model trained on historical data.\nSingleton: use `world_model` exported at bottom.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['WorldModel']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "load_model",
              "signature": {
                "name": "load_model",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Load the latest trained world-model artifact from disk (if present)."
            },
            {
              "name": "_featurize",
              "signature": {
                "name": "_featurize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_ctx",
                    "annotation": "TaskContext",
                    "default": null
                  }
                ],
                "return": "Dict[str, float]"
              },
              "decorators": [],
              "docstring": "Create feature dictionary for prediction. Must match trainer featurization."
            },
            {
              "name": "_safe_sigma_from_models",
              "signature": {
                "name": "_safe_sigma_from_models",
                "parameters": [
                  {
                    "name": "models",
                    "annotation": "List[Any]",
                    "default": null
                  },
                  {
                    "name": "X",
                    "annotation": "Any",
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": "Estimate uncertainty as average stddev across base estimators if available.\nFalls back to a small constant if the model type doesn't expose estimators."
            },
            {
              "name": "simulate",
              "signature": {
                "name": "simulate",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "plan_graph",
                    "annotation": "PolicyGraph",
                    "default": null
                  },
                  {
                    "name": "task_ctx",
                    "annotation": "TaskContext",
                    "default": null
                  }
                ],
                "return": "SimulationPrediction"
              },
              "decorators": [],
              "docstring": "Predict outcome by running the featurized context through the learned models.\nFalls back to a simple heuristic when no artifact is loaded."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\world\\diff_sim.py",
      "file_hash": "6edece20a3706b11bebab9cb9957fced3cd44f70f5082ea4c0154491b4cf539b",
      "functions": [
        {
          "name": "_deepcopy_graph",
          "signature": {
            "name": "_deepcopy_graph",
            "parameters": [
              {
                "name": "g",
                "annotation": "PolicyGraph",
                "default": null
              }
            ],
            "return": "PolicyGraph"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_evaluate",
          "signature": {
            "name": "_evaluate",
            "parameters": [
              {
                "name": "loss_fn",
                "annotation": "Callable[[PolicyGraph, np.ndarray], float]",
                "default": null
              },
              {
                "name": "graph",
                "annotation": "PolicyGraph",
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_numeric_params",
          "signature": {
            "name": "_numeric_params",
            "parameters": [
              {
                "name": "graph",
                "annotation": "PolicyGraph",
                "default": null
              }
            ],
            "return": "List[Tuple[int, str, float]]"
          },
          "decorators": [],
          "docstring": "Collect (node_index, key, value) for numeric params."
        },
        {
          "name": "_guess_bounds",
          "signature": {
            "name": "_guess_bounds",
            "parameters": [
              {
                "name": "node",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "v",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "Optional[Tuple[float, float]]"
          },
          "decorators": [],
          "docstring": "Try to discover/guess sensible bounds for a parameter.\nPriority:\n  1) node.param_bounds.get(key) or node.bounds.get(key) if present\n  2) Heuristics for common names"
        },
        {
          "name": "_clamp",
          "signature": {
            "name": "_clamp",
            "parameters": [
              {
                "name": "val",
                "annotation": "float",
                "default": null
              },
              {
                "name": "bounds",
                "annotation": "Optional[Tuple[float, float]]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_finite_diff_grad",
          "signature": {
            "name": "_finite_diff_grad",
            "parameters": [
              {
                "name": "loss_fn",
                "annotation": "Callable[[PolicyGraph, np.ndarray], float]",
                "default": null
              },
              {
                "name": "base_graph",
                "annotation": "PolicyGraph",
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "idx",
                "annotation": "int",
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "eps",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Central finite difference dL/d(param)"
        },
        {
          "name": "grad_optimize",
          "signature": {
            "name": "grad_optimize",
            "parameters": [
              {
                "name": "plan_graph",
                "annotation": "PolicyGraph",
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "loss_fn",
                "annotation": "Callable",
                "default": null
              },
              {
                "name": "steps",
                "annotation": "int",
                "default": "8"
              }
            ],
            "return": "PolicyGraph"
          },
          "decorators": [],
          "docstring": "Optimize continuous parameters in a plan by **finite-difference gradient descent**.\n- Detects all numeric node.params[*] across the PolicyGraph.\n- Computes central-difference gradients for each param.\n- Applies bounded updates (if bounds known/heuristically inferred).\n- Uses simple backoff if a step doesn't improve the loss.\n\nArguments:\n  plan_graph: PolicyGraph to optimize (not mutated; a deep copy is returned)\n  x:          Context vector/array fed to loss_fn\n  loss_fn:    Callable(graph, x) -> scalar loss (lower is better)\n  steps:      Number of outer GD iterations"
        },
        {
          "name": "_apply_update",
          "signature": {
            "name": "_apply_update",
            "parameters": [
              {
                "name": "src_graph",
                "annotation": "PolicyGraph",
                "default": null
              },
              {
                "name": "factor",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "PolicyGraph"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\world\\world_model_trainer.py",
      "file_hash": "9909eabddf5fdc7c48e68727eaec385517c8adaaea14a92b993096fcf59c84be",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_featurize_episode",
          "signature": {
            "name": "_featurize_episode",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, float]]"
          },
          "decorators": [],
          "docstring": "Convert a rich episode log into a flat feature dict.\nUses x_context vector directly and normalizes dtypes."
        },
        {
          "name": "fetch_training_data",
          "signature": {
            "name": "fetch_training_data",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "20000"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetch episode logs with embedded context and reward vectors.\nExpects:\n  - e.x_context: numeric vector\n  - e.reward_vec: numeric vector [p_success, delta_cost, p_safety_hit, sigma, ...]"
        },
        {
          "name": "_build_dataset",
          "signature": {
            "name": "_build_dataset",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episodes",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "Tuple[Optional[np.ndarray], Optional[np.ndarray], Optional[DictVectorizer]]"
          },
          "decorators": [],
          "docstring": "Build (X, Y, vectorizer) from raw episodes."
        },
        {
          "name": "_train_models",
          "signature": {
            "name": "_train_models",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "X_tr",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "Y_tr",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "random_state",
                "annotation": "int",
                "default": "42"
              }
            ],
            "return": "List[GradientBoostingRegressor]"
          },
          "decorators": [],
          "docstring": "Train a separate GradientBoostingRegressor for each output dimension."
        },
        {
          "name": "_evaluate",
          "signature": {
            "name": "_evaluate",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "X_val",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "Y_val",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "models",
                "annotation": "List[GradientBoostingRegressor]",
                "default": null
              }
            ],
            "return": "Dict[str, float]"
          },
          "decorators": [],
          "docstring": "Compute simple validation metrics (R2 and MSE, aggregated and per-dimension)."
        },
        {
          "name": "_atomic_save",
          "signature": {
            "name": "_atomic_save",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "payload",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Atomically persist the model artifact."
        },
        {
          "name": "_persist_model_card",
          "signature": {
            "name": "_persist_model_card",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dims_in",
                "annotation": "int",
                "default": null
              },
              {
                "name": "dims_out",
                "annotation": "int",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, float]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Versioned upsert of world model metadata to Neo4j."
        },
        {
          "name": "train_and_save_model",
          "signature": {
            "name": "train_and_save_model",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Main training loop:\n  - fetch data\n  - build dataset\n  - split\n  - train per-dimension regressors\n  - evaluate\n  - atomically persist artifact\n  - publish model card\n  - hot-reload live world_model"
        }
      ],
      "classes": [
        {
          "name": "WorldModelTrainer",
          "bases": [],
          "decorators": [],
          "docstring": "Handles offline training of the counterfactual world model.\nTrains a separate regressor for each reward dimension and persists a single artifact:\n  {'vectorizer': DictVectorizer, 'models': [GBR, ...], 'metadata': {...}}",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_featurize_episode",
              "signature": {
                "name": "_featurize_episode",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Optional[Dict[str, float]]"
              },
              "decorators": [],
              "docstring": "Convert a rich episode log into a flat feature dict.\nUses x_context vector directly and normalizes dtypes."
            },
            {
              "name": "fetch_training_data",
              "signature": {
                "name": "fetch_training_data",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "20000"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Fetch episode logs with embedded context and reward vectors.\nExpects:\n  - e.x_context: numeric vector\n  - e.reward_vec: numeric vector [p_success, delta_cost, p_safety_hit, sigma, ...]"
            },
            {
              "name": "_build_dataset",
              "signature": {
                "name": "_build_dataset",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episodes",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  }
                ],
                "return": "Tuple[Optional[np.ndarray], Optional[np.ndarray], Optional[DictVectorizer]]"
              },
              "decorators": [],
              "docstring": "Build (X, Y, vectorizer) from raw episodes."
            },
            {
              "name": "_train_models",
              "signature": {
                "name": "_train_models",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "X_tr",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "Y_tr",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "random_state",
                    "annotation": "int",
                    "default": "42"
                  }
                ],
                "return": "List[GradientBoostingRegressor]"
              },
              "decorators": [],
              "docstring": "Train a separate GradientBoostingRegressor for each output dimension."
            },
            {
              "name": "_evaluate",
              "signature": {
                "name": "_evaluate",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "X_val",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "Y_val",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "models",
                    "annotation": "List[GradientBoostingRegressor]",
                    "default": null
                  }
                ],
                "return": "Dict[str, float]"
              },
              "decorators": [],
              "docstring": "Compute simple validation metrics (R2 and MSE, aggregated and per-dimension)."
            },
            {
              "name": "_atomic_save",
              "signature": {
                "name": "_atomic_save",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "payload",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "Path",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Atomically persist the model artifact."
            },
            {
              "name": "_persist_model_card",
              "signature": {
                "name": "_persist_model_card",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "dims_in",
                    "annotation": "int",
                    "default": null
                  },
                  {
                    "name": "dims_out",
                    "annotation": "int",
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "Dict[str, float]",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Versioned upsert of world model metadata to Neo4j."
            },
            {
              "name": "train_and_save_model",
              "signature": {
                "name": "train_and_save_model",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Main training loop:\n  - fetch data\n  - build dataset\n  - split\n  - train per-dimension regressors\n  - evaluate\n  - atomically persist artifact\n  - publish model card\n  - hot-reload live world_model"
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\explain\\minset.py",
      "file_hash": "3d75e03012e3f417f4dc5a62d63ed8c13c6cbcc00ff8c81151f9133fbd7c84f5",
      "functions": [
        {
          "name": "min_explanation",
          "signature": {
            "name": "min_explanation",
            "parameters": [
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "theta_chosen",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "theta_alt",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "feature_names",
                "annotation": "Optional[List[str]]",
                "default": "None"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Calculates the minimal set of features that would have flipped the decision\nfrom the chosen arm to the alternative, as specified in the vision doc."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\explain\\probes.py",
      "file_hash": "517d4cf23e1ca3741c4b7bca6465b9fddb84f20b025d29e7e1e618a17327e4fc",
      "functions": [
        {
          "name": "_clamp",
          "signature": {
            "name": "_clamp",
            "parameters": [
              {
                "name": "x",
                "annotation": "float",
                "default": null
              },
              {
                "name": "lo",
                "annotation": "float",
                "default": "0.0"
              },
              {
                "name": "hi",
                "annotation": "float",
                "default": "1.0"
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_safe_float",
          "signature": {
            "name": "_safe_float",
            "parameters": [
              {
                "name": "v",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "default",
                "annotation": "float",
                "default": "0.0"
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_topk_stats",
          "signature": {
            "name": "_topk_stats",
            "parameters": [
              {
                "name": "scores",
                "annotation": "Dict[str, float]",
                "default": null
              },
              {
                "name": "k",
                "annotation": "int",
                "default": "3"
              }
            ],
            "return": "Tuple[List[float], float, float]"
          },
          "decorators": [],
          "docstring": "Return top-k values, mean, and spread (max-min)/mean (safe for <=0 mean)."
        },
        {
          "name": "_extract_sequence",
          "signature": {
            "name": "_extract_sequence",
            "parameters": [
              {
                "name": "trace",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Try multiple common shapes to recover an action/arm sequence:\n  - trace['arm_sequence'] / trace['actions'] / trace['sequence']\n  - trace['history']['arm_ids']"
        },
        {
          "name": "_sim_uncertainty",
          "signature": {
            "name": "_sim_uncertainty",
            "parameters": [
              {
                "name": "trace",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Pull simulator uncertainty from any of these:\n  - trace['simulator_pred'] / ['sim_pred'] / ['simulation'] / ['simulator_prediction']\n    with fields 'sigma' or 'uncertainty' or 'std'"
        },
        {
          "name": "_calc_spec_drift",
          "signature": {
            "name": "_calc_spec_drift",
            "parameters": [
              {
                "name": "trace",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_calc_overfit",
          "signature": {
            "name": "_calc_overfit",
            "parameters": [
              {
                "name": "trace",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Disagreement between bandit top and critic-chosen champion.\nScales with the *bandit* gap between the top arm and the critic's pick."
        },
        {
          "name": "_calc_fragility",
          "signature": {
            "name": "_calc_fragility",
            "parameters": [
              {
                "name": "trace",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "If top candidates are too close, small perturbations can flip the decision.\nUse top-3 spread normalized by mean; low spread => higher fragility."
        },
        {
          "name": "_calc_loop",
          "signature": {
            "name": "_calc_loop",
            "parameters": [
              {
                "name": "trace",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Detect short-cycle oscillations (e.g., ABAB, ABCABC) and repetitive transitions.\nLooks at the last few actions if available."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "predict_risk",
          "signature": {
            "name": "predict_risk",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "trace",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, float]"
          },
          "decorators": [],
          "docstring": "Analyze a decision trace and return risk scores in [0,1].\nKeys produced:\n  - spec_drift\n  - overfit\n  - loop\n  - policy_fragility"
        }
      ],
      "classes": [
        {
          "name": "MetaProbe",
          "bases": [],
          "decorators": [],
          "docstring": "Probes internal decision traces to predict meta-risks like spec drift, overfit,\nlooping, and policy fragility. Returns a dict with risk scores in [0,1].",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['MetaProbe']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "predict_risk",
              "signature": {
                "name": "predict_risk",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "trace",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Dict[str, float]"
              },
              "decorators": [],
              "docstring": "Analyze a decision trace and return risk scores in [0,1].\nKeys produced:\n  - spec_drift\n  - overfit\n  - loop\n  - policy_fragility"
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\qd\\map_elites.py",
      "file_hash": "4bd84279c3dec108a45e39293da81467d5976bfe7a6b1402b81eeafbd492a3c8",
      "functions": [
        {
          "name": "_norm_str",
          "signature": {
            "name": "_norm_str",
            "parameters": [
              {
                "name": "x",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "default",
                "annotation": "str",
                "default": "'unknown'"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_risk_tier",
          "signature": {
            "name": "_risk_tier",
            "parameters": [
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_cost_tier",
          "signature": {
            "name": "_cost_tier",
            "parameters": [
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Map a numeric cost signal to {low_cost, med_cost, high_cost}.\nPrefer 'cost_units'; fall back to simulator 'delta_cost' magnitude."
        },
        {
          "name": "_task_family",
          "signature": {
            "name": "_task_family",
            "parameters": [
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Extract a stable, low-cardinality task family.\nPriority: metrics.task_family → first token of task_key → 'unknown'"
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "get_descriptor",
          "signature": {
            "name": "get_descriptor",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Niche"
          },
          "decorators": [],
          "docstring": "Compute a behavioral descriptor (niche) for a policy based on its\nobserved performance and context."
        },
        {
          "name": "insert",
          "signature": {
            "name": "insert",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "score",
                "annotation": "float",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Insert/update an arm in the archive based on its niche and score.\nReplaces the champion only if new score is higher by a small epsilon."
        },
        {
          "name": "sample_niche",
          "signature": {
            "name": "sample_niche",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Optional[Niche]"
          },
          "decorators": [],
          "docstring": "Sample a niche with bias toward under-sampled entries to promote coverage.\nWeight formula: w = 1 / sqrt(count + 1)"
        },
        {
          "name": "get_champion_from_niche",
          "signature": {
            "name": "get_champion_from_niche",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "niche",
                "annotation": "Niche",
                "default": null
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": "Return the champion arm_id for a given niche (or None)."
        }
      ],
      "classes": [
        {
          "name": "QDArchive",
          "bases": [],
          "decorators": [],
          "docstring": "MAP-Elites archive of diverse, high-performing PolicyArms.\n- Thread-safe updates and reads\n- Hysteresis to avoid churn on near-equal scores\n- Sampling biased toward under-sampled niches to drive exploration",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['QDArchive']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "get_descriptor",
              "signature": {
                "name": "get_descriptor",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arm_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Niche"
              },
              "decorators": [],
              "docstring": "Compute a behavioral descriptor (niche) for a policy based on its\nobserved performance and context."
            },
            {
              "name": "insert",
              "signature": {
                "name": "insert",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arm_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "score",
                    "annotation": "float",
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Insert/update an arm in the archive based on its niche and score.\nReplaces the champion only if new score is higher by a small epsilon."
            },
            {
              "name": "sample_niche",
              "signature": {
                "name": "sample_niche",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Optional[Niche]"
              },
              "decorators": [],
              "docstring": "Sample a niche with bias toward under-sampled entries to promote coverage.\nWeight formula: w = 1 / sqrt(count + 1)"
            },
            {
              "name": "get_champion_from_niche",
              "signature": {
                "name": "get_champion_from_niche",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "niche",
                    "annotation": "Niche",
                    "default": null
                  }
                ],
                "return": "Optional[str]"
              },
              "decorators": [],
              "docstring": "Return the champion arm_id for a given niche (or None)."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\qd\\replicator.py",
      "file_hash": "3a1fb621a66df1619b709ddddc5552ac84f51a8205149fc55a67542cfb9e9271",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "learning_rate",
                "annotation": "float",
                "default": "0.1"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "update_fitness",
          "signature": {
            "name": "update_fitness",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "niche",
                "annotation": "Niche",
                "default": null
              },
              {
                "name": "fitness_score",
                "annotation": "float",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Updates the rolling fitness score for a given niche using an\nexponential moving average."
        },
        {
          "name": "_normalize_shares",
          "signature": {
            "name": "_normalize_shares",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Ensures the total share distribution sums to 1."
        },
        {
          "name": "rebalance_shares",
          "signature": {
            "name": "rebalance_shares",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Re-calculates the exploration share for all niches based on their\nrelative fitness, using the replicator equation."
        },
        {
          "name": "sample_niche",
          "signature": {
            "name": "sample_niche",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Optional[Niche]"
          },
          "decorators": [],
          "docstring": "Samples a niche to explore, biased by the current share proportions."
        },
        {
          "name": "get_genesis_allocation",
          "signature": {
            "name": "get_genesis_allocation",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "total_budget",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "Dict[Niche, int]"
          },
          "decorators": [],
          "docstring": "Translates niche shares into a concrete number of arms to generate for each niche."
        }
      ],
      "classes": [
        {
          "name": "Replicator",
          "bases": [],
          "decorators": [],
          "docstring": "Manages exploration budget using replicator dynamics over QD niches.\nThis ensures the system dynamically focuses its evolutionary pressure on\nthe most promising areas of the solution space. (H15)",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['Replicator']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "learning_rate",
                    "annotation": "float",
                    "default": "0.1"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "update_fitness",
              "signature": {
                "name": "update_fitness",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "niche",
                    "annotation": "Niche",
                    "default": null
                  },
                  {
                    "name": "fitness_score",
                    "annotation": "float",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Updates the rolling fitness score for a given niche using an\nexponential moving average."
            },
            {
              "name": "_normalize_shares",
              "signature": {
                "name": "_normalize_shares",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Ensures the total share distribution sums to 1."
            },
            {
              "name": "rebalance_shares",
              "signature": {
                "name": "rebalance_shares",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Re-calculates the exploration share for all niches based on their\nrelative fitness, using the replicator equation."
            },
            {
              "name": "sample_niche",
              "signature": {
                "name": "sample_niche",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Optional[Niche]"
              },
              "decorators": [],
              "docstring": "Samples a niche to explore, biased by the current share proportions."
            },
            {
              "name": "get_genesis_allocation",
              "signature": {
                "name": "get_genesis_allocation",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "total_budget",
                    "annotation": "int",
                    "default": null
                  }
                ],
                "return": "Dict[Niche, int]"
              },
              "decorators": [],
              "docstring": "Translates niche shares into a concrete number of arms to generate for each niche."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\economics\\roi.py",
      "file_hash": "a97f5c2a51d528e65550afb1c24694cffd18ebd65ab635f8f8c3230c89524a52",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "update_roi",
          "signature": {
            "name": "update_roi",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "arm_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "scalar_reward",
                "annotation": "float",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Updates the ROI ledger for an arm after an episode completes."
        },
        {
          "name": "get_underperforming_arms",
          "signature": {
            "name": "get_underperforming_arms",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "percentile_threshold",
                "annotation": "int",
                "default": "10"
              }
            ],
            "return": "list[str]"
          },
          "decorators": [],
          "docstring": "Scans the ledger and returns a list of arms in the bottom Nth percentile for ROI.\nThese are candidates for pruning by the genesis module."
        }
      ],
      "classes": [
        {
          "name": "ROIManager",
          "bases": [],
          "decorators": [],
          "docstring": "Tracks the Return on Investment (ROI) for each policy arm.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['ROIManager']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "update_roi",
              "signature": {
                "name": "update_roi",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "arm_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "scalar_reward",
                    "annotation": "float",
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Updates the ROI ledger for an arm after an episode completes."
            },
            {
              "name": "get_underperforming_arms",
              "signature": {
                "name": "get_underperforming_arms",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "percentile_threshold",
                    "annotation": "int",
                    "default": "10"
                  }
                ],
                "return": "list[str]"
              },
              "decorators": [],
              "docstring": "Scans the ledger and returns a list of arms in the bottom Nth percentile for ROI.\nThese are candidates for pruning by the genesis module."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\rerank\\episodic_knn.py",
      "file_hash": "30e5a470e83fa0f37fc547aa4949cb5ae1eb28fbd0588daf7e9164d7eb3cdc47",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "capacity",
                "annotation": "int",
                "default": "5000"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "update",
          "signature": {
            "name": "update",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "best_arm",
                "annotation": "str",
                "default": null
              },
              {
                "name": "reward",
                "annotation": "float",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Adds a new successful episode to the index."
        },
        {
          "name": "suggest",
          "signature": {
            "name": "suggest",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "k",
                "annotation": "int",
                "default": "5"
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Suggests the top-k most promising arm_ids based on cosine similarity\nto the provided context vector."
        }
      ],
      "classes": [
        {
          "name": "EpisodicKNN",
          "bases": [],
          "decorators": [],
          "docstring": "A k-Nearest Neighbors index over past episodes to suggest warm-start candidates.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['EpisodicKNN']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "capacity",
                    "annotation": "int",
                    "default": "5000"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "update",
              "signature": {
                "name": "update",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "x",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "best_arm",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "reward",
                    "annotation": "float",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Adds a new successful episode to the index."
            },
            {
              "name": "suggest",
              "signature": {
                "name": "suggest",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "x",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "k",
                    "annotation": "int",
                    "default": "5"
                  }
                ],
                "return": "List[str]"
              },
              "decorators": [],
              "docstring": "Suggests the top-k most promising arm_ids based on cosine similarity\nto the provided context vector."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\meta\\optimizer.py",
      "file_hash": "ff5af0331094047c5e3f3b63c80f439e56fb4515b7da501c2000cbb27c7bd6bf",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_fetch_replay_data",
          "signature": {
            "name": "_fetch_replay_data",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "5000"
              }
            ],
            "return": "List[_EpisodeRow]"
          },
          "decorators": [],
          "docstring": "Pull historical episodes with reward and policy metadata.\nTolerates schema drift by coalescing common property names."
        },
        {
          "name": "_fit_model",
          "signature": {
            "name": "_fit_model",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "rows",
                "annotation": "List[_EpisodeRow]",
                "default": null
              }
            ],
            "return": "Optional[Pipeline]"
          },
          "decorators": [],
          "docstring": "Fit a predictive model target ~ f(cognitive_mode, critic_blend, reflection_depth, interactions).\nReturns a scikit-learn Pipeline or None if insufficient data."
        },
        {
          "name": "_predict_reward",
          "signature": {
            "name": "_predict_reward",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "model",
                "annotation": "Pipeline",
                "default": null
              },
              {
                "name": "cmode",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cb",
                "annotation": "float",
                "default": null
              },
              {
                "name": "rd",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_search_best",
          "signature": {
            "name": "_search_best",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "model",
                "annotation": "Pipeline",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Grid-search the discrete space for the best policy triple."
        },
        {
          "name": "run_optimization_cycle",
          "signature": {
            "name": "run_optimization_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "End-to-end optimization:\n  - Pull history\n  - Train per-risk models\n  - Choose best triple per risk\n  - Persist :SynapseHyperparameters version with strategy_map\n  - Emit optimization event"
        }
      ],
      "classes": [
        {
          "name": "_EpisodeRow",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "risk",
              "type": "str",
              "default": null
            },
            {
              "name": "cognitive_mode",
              "type": "Optional[str]",
              "default": null
            },
            {
              "name": "critic_blend",
              "type": "Optional[float]",
              "default": null
            },
            {
              "name": "reflection_depth",
              "type": "Optional[int]",
              "default": null
            },
            {
              "name": "target",
              "type": "float",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "MetaOptimizer",
          "bases": [],
          "decorators": [],
          "docstring": "Optimizes Synapse hyperparameters by replay-style modeling over historical episodes.\nProduces strategy_map compatible with MetaController:\n  { \"low\": {\"cognitive_mode\": \"...\", \"critic_blend\": 0.3, \"reflection_depth\": 1}, ... }",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['MetaOptimizer']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_fetch_replay_data",
              "signature": {
                "name": "_fetch_replay_data",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "5000"
                  }
                ],
                "return": "List[_EpisodeRow]"
              },
              "decorators": [],
              "docstring": "Pull historical episodes with reward and policy metadata.\nTolerates schema drift by coalescing common property names."
            },
            {
              "name": "_fit_model",
              "signature": {
                "name": "_fit_model",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "rows",
                    "annotation": "List[_EpisodeRow]",
                    "default": null
                  }
                ],
                "return": "Optional[Pipeline]"
              },
              "decorators": [],
              "docstring": "Fit a predictive model target ~ f(cognitive_mode, critic_blend, reflection_depth, interactions).\nReturns a scikit-learn Pipeline or None if insufficient data."
            },
            {
              "name": "_predict_reward",
              "signature": {
                "name": "_predict_reward",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "model",
                    "annotation": "Pipeline",
                    "default": null
                  },
                  {
                    "name": "cmode",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "cb",
                    "annotation": "float",
                    "default": null
                  },
                  {
                    "name": "rd",
                    "annotation": "int",
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_search_best",
              "signature": {
                "name": "_search_best",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "model",
                    "annotation": "Pipeline",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Grid-search the discrete space for the best policy triple."
            },
            {
              "name": "run_optimization_cycle",
              "signature": {
                "name": "run_optimization_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "End-to-end optimization:\n  - Pull history\n  - Train per-risk models\n  - Choose best triple per risk\n  - Persist :SynapseHyperparameters version with strategy_map\n  - Emit optimization event"
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\safety\\sentinels.py",
      "file_hash": "ea04814b7210c598f376b1963e14d3b44148e4cac44d62d818c25f6333c4f5f3",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_featurize_trace",
          "signature": {
            "name": "_featurize_trace",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "trace",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Optional[np.ndarray]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "fit",
          "signature": {
            "name": "fit",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "check",
          "signature": {
            "name": "check",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "trace",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_freeze_genesis",
          "signature": {
            "name": "_freeze_genesis",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "reason",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Calls the admin API to temporarily disable Arm Genesis."
        },
        {
          "name": "_throttle_budgets",
          "signature": {
            "name": "_throttle_budgets",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "reason",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Calls the admin API to reduce resource budgets for a task."
        },
        {
          "name": "analyze_patch_for_risks",
          "signature": {
            "name": "analyze_patch_for_risks",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "patch_diff",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Analyzes a code patch for potential safety risks."
        },
        {
          "name": "run_sentinel_check",
          "signature": {
            "name": "run_sentinel_check",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "recent_traces",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Runs all active sentinels and triggers containment if any alerts are fired."
        }
      ],
      "classes": [
        {
          "name": "GoodhartSentinel",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['GoodhartSentinel']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_featurize_trace",
              "signature": {
                "name": "_featurize_trace",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "trace",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Optional[np.ndarray]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "fit",
              "signature": {
                "name": "fit",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "check",
              "signature": {
                "name": "check",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "trace",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Optional[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "SentinelManager",
          "bases": [],
          "decorators": [],
          "docstring": "Manages the execution of safety sentinels and triggers autonomous\ncontainment actions via live API calls.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['SentinelManager']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_freeze_genesis",
              "signature": {
                "name": "_freeze_genesis",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "reason",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Calls the admin API to temporarily disable Arm Genesis."
            },
            {
              "name": "_throttle_budgets",
              "signature": {
                "name": "_throttle_budgets",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "reason",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Calls the admin API to reduce resource budgets for a task."
            },
            {
              "name": "analyze_patch_for_risks",
              "signature": {
                "name": "analyze_patch_for_risks",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "patch_diff",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Optional[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Analyzes a code patch for potential safety risks."
            },
            {
              "name": "run_sentinel_check",
              "signature": {
                "name": "run_sentinel_check",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "recent_traces",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Runs all active sentinels and triggers containment if any alerts are fired."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\experiments\\active.py",
      "file_hash": "70c5a70c9aa7b90c2019d392bb19e3586764b7420255fb40ded8aa5a94cf5b72",
      "functions": [
        {
          "name": "_risk_from_tokens",
          "signature": {
            "name": "_risk_from_tokens",
            "parameters": [
              {
                "name": "tokens",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "default",
                "annotation": "str",
                "default": "'medium'"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_budget_from_tokens",
          "signature": {
            "name": "_budget_from_tokens",
            "parameters": [
              {
                "name": "tokens",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "default",
                "annotation": "str",
                "default": "'constrained'"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_parse_niche_key",
          "signature": {
            "name": "_parse_niche_key",
            "parameters": [
              {
                "name": "key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Support both forms:\n  - \"niche_(simula, high_risk, low_cost)\"\n  - \"niche:simula:high_risk:low_cost\"\nReturns dict with tokens list if matched."
        },
        {
          "name": "_parse_sim_uncertainty_key",
          "signature": {
            "name": "_parse_sim_uncertainty_key",
            "parameters": [
              {
                "name": "key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": "Accept:\n  - \"simulator_uncertainty:<task_key>\"\n  - \"simulator_uncertainty_<task_key>\"\nReturns extracted task_key if matched."
        },
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "design_probe",
          "signature": {
            "name": "design_probe",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "uncertainty_map",
                "annotation": "Dict[str, float]",
                "default": null
              }
            ],
            "return": "Optional[TaskContext]"
          },
          "decorators": [],
          "docstring": "Given a map of the system's uncertainties, design a cheap probe action\nby generating a TaskContext for Simula to execute.\n\nSelection policy:\n  1) Choose the highest-uncertainty key (ties break lexicographically).\n  2) If it's a niche key, craft a targeted exploration probe.\n  3) If it's simulator uncertainty, schedule a controlled re-run.\n  4) Otherwise, fall back to a generic probe with conservative budget."
        }
      ],
      "classes": [
        {
          "name": "ExperimentDesigner",
          "bases": [],
          "decorators": [],
          "docstring": "Designs low-cost experiments to maximize information gain, creating an\nauto-curriculum for the system to follow. (H2, H20)",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['ExperimentDesigner']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "design_probe",
              "signature": {
                "name": "design_probe",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "uncertainty_map",
                    "annotation": "Dict[str, float]",
                    "default": null
                  }
                ],
                "return": "Optional[TaskContext]"
              },
              "decorators": [],
              "docstring": "Given a map of the system's uncertainties, design a cheap probe action\nby generating a TaskContext for Simula to execute.\n\nSelection policy:\n  1) Choose the highest-uncertainty key (ties break lexicographically).\n  2) If it's a niche key, craft a targeted exploration probe.\n  3) If it's simulator uncertainty, schedule a controlled re-run.\n  4) Otherwise, fall back to a generic probe with conservative budget."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\values\\learner.py",
      "file_hash": "0718f9f085bec6bece2b0963e6144a0dcc879c4c01a109af9244ea614516f147",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_fetch_preferences",
          "signature": {
            "name": "_fetch_preferences",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "500"
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Fetches recent PreferenceIngest data from the graph."
        },
        {
          "name": "_bradley_terry_update",
          "signature": {
            "name": "_bradley_terry_update",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "weights",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "preferences",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "learning_rate",
                "annotation": null,
                "default": "0.01"
              },
              {
                "name": "epochs",
                "annotation": null,
                "default": "10"
              }
            ],
            "return": "np.ndarray"
          },
          "decorators": [],
          "docstring": "Updates weights using logistic regression, which is equivalent to\ntraining a Bradley-Terry model on the preference pairs."
        },
        {
          "name": "run_learning_cycle",
          "signature": {
            "name": "run_learning_cycle",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Fetches preferences and updates the live reward scalarization weights\nby fitting a Bradley-Terry model."
        }
      ],
      "classes": [
        {
          "name": "ValueLearner",
          "bases": [],
          "decorators": [],
          "docstring": "Learns scalarization weights from human preference data, aligning the\nsystem's reward function with desired outcomes (H9, H22).\nUPGRADE: Implements a Bradley-Terry model for robust preference learning.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['ValueLearner']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_fetch_preferences",
              "signature": {
                "name": "_fetch_preferences",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "500"
                  }
                ],
                "return": "List[Dict[str, Any]]"
              },
              "decorators": [],
              "docstring": "Fetches recent PreferenceIngest data from the graph."
            },
            {
              "name": "_bradley_terry_update",
              "signature": {
                "name": "_bradley_terry_update",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "weights",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "preferences",
                    "annotation": "List[Dict[str, Any]]",
                    "default": null
                  },
                  {
                    "name": "learning_rate",
                    "annotation": null,
                    "default": "0.01"
                  },
                  {
                    "name": "epochs",
                    "annotation": null,
                    "default": "10"
                  }
                ],
                "return": "np.ndarray"
              },
              "decorators": [],
              "docstring": "Updates weights using logistic regression, which is equivalent to\ntraining a Bradley-Terry model on the preference pairs."
            },
            {
              "name": "run_learning_cycle",
              "signature": {
                "name": "run_learning_cycle",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Fetches preferences and updates the live reward scalarization weights\nby fitting a Bradley-Terry model."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\robust\\ood.py",
      "file_hash": "5b3b7a122e668dccada9adaf224f02e9d671c17868db86f1ace37ede8742cd73",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "initialize_distribution",
          "signature": {
            "name": "initialize_distribution",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Loads the running mean and inverse covariance matrix from the graph."
        },
        {
          "name": "update_and_persist_distribution",
          "signature": {
            "name": "update_and_persist_distribution",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "new_vectors",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Updates the distribution with new data and saves it back to the graph."
        },
        {
          "name": "check_shift",
          "signature": {
            "name": "check_shift",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "x",
                "annotation": "np.ndarray",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Checks if a new context vector `x` is out-of-distribution."
        }
      ],
      "classes": [
        {
          "name": "OODDetector",
          "bases": [],
          "decorators": [],
          "docstring": "Detects out-of-distribution (OOD) inputs by tracking the statistical\ndistribution of historical context vectors. (H13)",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['OODDetector']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "initialize_distribution",
              "signature": {
                "name": "initialize_distribution",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Loads the running mean and inverse covariance matrix from the graph."
            },
            {
              "name": "update_and_persist_distribution",
              "signature": {
                "name": "update_and_persist_distribution",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "new_vectors",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Updates the distribution with new data and saves it back to the graph."
            },
            {
              "name": "check_shift",
              "signature": {
                "name": "check_shift",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "x",
                    "annotation": "np.ndarray",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Checks if a new context vector `x` is out-of-distribution."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\obs\\schemas.py",
      "file_hash": "0a8f2d032e17d86af6dfa73242cc5d26f29f143dd4dc2921b47f360c64aa761a",
      "functions": [],
      "classes": [
        {
          "name": "GlobalStats",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Aggregate statistics for the entire Synapse system.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "total_episodes",
              "type": "int",
              "default": null
            },
            {
              "name": "total_arms",
              "type": "int",
              "default": null
            },
            {
              "name": "active_niches",
              "type": "int",
              "default": null
            },
            {
              "name": "reward_per_dollar_p50",
              "type": "float",
              "default": null
            },
            {
              "name": "firewall_blocks_total",
              "type": "int",
              "default": null
            },
            {
              "name": "genesis_mints_total",
              "type": "int",
              "default": null
            },
            {
              "name": "genesis_prunes_total",
              "type": "int",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "NicheData",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Represents a single cell in the QD archive.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "niche",
              "type": "Tuple[str, ...]",
              "default": null
            },
            {
              "name": "champion_arm_id",
              "type": "str",
              "default": null
            },
            {
              "name": "score",
              "type": "float",
              "default": null
            },
            {
              "name": "fitness_share",
              "type": "float",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "QDCoverage",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The state of the Quality-Diversity archive.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "coverage_percentage",
              "type": "float",
              "default": null
            },
            {
              "name": "niches",
              "type": "List[NicheData]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "ROITrend",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Time-series data for a single policy arm's ROI.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "arm_id",
              "type": "str",
              "default": null
            },
            {
              "name": "roi_history",
              "type": "List[Tuple[str, float]]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "ROITrends",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "ROI trends for the best and worst performing arms.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "top_performers",
              "type": "List[ROITrend]",
              "default": null
            },
            {
              "name": "worst_performers",
              "type": "List[ROITrend]",
              "default": null
            }
          ],
          "methods": []
        },
        {
          "name": "EpisodeTrace",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "A complete, reconstructed trace of a single cognitive decision.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "request_context",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "ood_check",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "cognitive_strategy",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "bandit_scores",
              "type": "Dict[str, float]",
              "default": null
            },
            {
              "name": "critic_reranked_champion",
              "type": "str",
              "default": null
            },
            {
              "name": "final_economic_scores",
              "type": "Dict[str, float]",
              "default": null
            },
            {
              "name": "simulation_prediction",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "firewall_verdict",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "final_champion_id",
              "type": "str",
              "default": null
            },
            {
              "name": "outcome_metrics",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "reward_scalar",
              "type": "float",
              "default": null
            },
            {
              "name": "reward_vector",
              "type": "List[float]",
              "default": null
            },
            {
              "name": "explanation",
              "type": "Dict[str, Any]",
              "default": null
            },
            {
              "name": "rcu_snapshot",
              "type": "Dict[str, str]",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\obs\\queries.py",
      "file_hash": "8b5b0416638df568207500cfa34da1652b3f0d5b384ca7ab279038976bb6e2e5",
      "functions": [
        {
          "name": "get_global_stats",
          "signature": {
            "name": "get_global_stats",
            "parameters": [],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Fetches high-level aggregate statistics for the system."
        },
        {
          "name": "get_qd_coverage_data",
          "signature": {
            "name": "get_qd_coverage_data",
            "parameters": [],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Assembles data on the state of the Quality-Diversity archive."
        },
        {
          "name": "get_full_episode_trace",
          "signature": {
            "name": "get_full_episode_trace",
            "parameters": [
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Retrieves and reconstructs the full audit trace for a single episode."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\skills\\schemas.py",
      "file_hash": "cb93b00e7ee7ad9e9e2267ad4ef47c705c20a5fafff7003cfe312b2991ac8346",
      "functions": [],
      "classes": [
        {
          "name": "Option",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Represents a reusable macro-policy or \"skill\" discovered from experience. (H13)",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "id",
              "type": "str",
              "default": "Field(..., description='Unique identifier for this option.')"
            },
            {
              "name": "initiation_set",
              "type": "List[Dict[str, Any]]",
              "default": "Field(..., description='A cluster of contexts where this option is applicable.')"
            },
            {
              "name": "termination_condition",
              "type": "Dict[str, Any]",
              "default": "Field(..., description='A state that signals the successful completion of the option.')"
            },
            {
              "name": "policy_sequence",
              "type": "List[str]",
              "default": "Field(..., description='An ordered list of policy arm IDs that constitute the option.')"
            },
            {
              "name": "expected_reward",
              "type": "float",
              "default": "Field(..., description='The average reward achieved when this option completes successfully.')"
            },
            {
              "name": "discovery_trace",
              "type": "str",
              "default": "Field(..., description='The episode ID chain from which this option was mined.')"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\skills\\options.py",
      "file_hash": "e66c56fc13987bc538ec6a4b6b77c617161696936de71e708bb0df38754365b4",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_fetch_successful_chains",
          "signature": {
            "name": "_fetch_successful_chains",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "min_length",
                "annotation": "int",
                "default": "3"
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "100"
              }
            ],
            "return": "List[Dict]"
          },
          "decorators": [],
          "docstring": "Fetches chains of high-reward, consecutive episodes from the graph."
        },
        {
          "name": "mine_and_save_options",
          "signature": {
            "name": "mine_and_save_options",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "The main orchestration method. Fetches successful chains, identifies\ncommon patterns (options), and saves them to the graph."
        }
      ],
      "classes": [
        {
          "name": "OptionMiner",
          "bases": [],
          "decorators": [],
          "docstring": "Mines historical episode data to discover reusable, high-performing\nsequences of actions (Options) for hierarchical planning. (H13)",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['OptionMiner']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_fetch_successful_chains",
              "signature": {
                "name": "_fetch_successful_chains",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "min_length",
                    "annotation": "int",
                    "default": "3"
                  },
                  {
                    "name": "limit",
                    "annotation": "int",
                    "default": "100"
                  }
                ],
                "return": "List[Dict]"
              },
              "decorators": [],
              "docstring": "Fetches chains of high-reward, consecutive episodes from the graph."
            },
            {
              "name": "mine_and_save_options",
              "signature": {
                "name": "mine_and_save_options",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "The main orchestration method. Fetches successful chains, identifies\ncommon patterns (options), and saves them to the graph."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\skills\\manager.py",
      "file_hash": "d2c7690f5020ee9b8819dd9ee9b1b83fbe1a88d81ca8caca7dae19180a7e74a6",
      "functions": [
        {
          "name": "__new__",
          "signature": {
            "name": "__new__",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "initialize",
          "signature": {
            "name": "initialize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Loads all discovered Option nodes from the graph into memory."
        },
        {
          "name": "select_best_option",
          "signature": {
            "name": "select_best_option",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "context_vec",
                "annotation": "np.ndarray",
                "default": null
              },
              {
                "name": "task_ctx",
                "annotation": "TaskContext",
                "default": null
              }
            ],
            "return": "Optional[Option]"
          },
          "decorators": [],
          "docstring": "Checks if the current context is a suitable starting point for any known Option."
        }
      ],
      "classes": [
        {
          "name": "SkillsManager",
          "bases": [],
          "decorators": [],
          "docstring": "Manages the loading and selection of learned hierarchical skills (Options).",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "_instance",
              "type": "Optional['SkillsManager']",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "__new__",
              "signature": {
                "name": "__new__",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "initialize",
              "signature": {
                "name": "initialize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Loads all discovered Option nodes from the graph into memory."
            },
            {
              "name": "select_best_option",
              "signature": {
                "name": "select_best_option",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "context_vec",
                    "annotation": "np.ndarray",
                    "default": null
                  },
                  {
                    "name": "task_ctx",
                    "annotation": "TaskContext",
                    "default": null
                  }
                ],
                "return": "Optional[Option]"
              },
              "decorators": [],
              "docstring": "Checks if the current context is a suitable starting point for any known Option."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\synapse\\skills\\executor.py",
      "file_hash": "313d8f3dce90d7515bb5b4e7027700c7fb66d8932289055a5fdf484dbe47f800",
      "functions": [
        {
          "name": "start_execution",
          "signature": {
            "name": "start_execution",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "option",
                "annotation": "Option",
                "default": null
              }
            ],
            "return": "Optional[PolicyArm]"
          },
          "decorators": [],
          "docstring": "Initiates a new skill execution and returns the first arm."
        },
        {
          "name": "continue_execution",
          "signature": {
            "name": "continue_execution",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "last_step_outcome",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Optional[PolicyArm]"
          },
          "decorators": [],
          "docstring": "Logs the outcome of the previous step and returns the next arm in the sequence.\nReturns None if the skill is complete or has failed."
        },
        {
          "name": "end_execution",
          "signature": {
            "name": "end_execution",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Forcefully ends an execution, e.g., on failure."
        }
      ],
      "classes": [
        {
          "name": "ExecutionState",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Tracks the progress of a single long-horizon skill execution.",
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "episode_id",
              "type": "str",
              "default": null
            },
            {
              "name": "option",
              "type": "Option",
              "default": null
            },
            {
              "name": "current_step",
              "type": "int",
              "default": "0"
            },
            {
              "name": "step_outcomes",
              "type": "Dict[int, Any]",
              "default": "field(default_factory=dict)"
            }
          ],
          "methods": []
        },
        {
          "name": "OptionExecutor",
          "bases": [],
          "decorators": [],
          "docstring": "A stateful service to manage the step-by-step execution of hierarchical Options.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "start_execution",
              "signature": {
                "name": "start_execution",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "option",
                    "annotation": "Option",
                    "default": null
                  }
                ],
                "return": "Optional[PolicyArm]"
              },
              "decorators": [],
              "docstring": "Initiates a new skill execution and returns the first arm."
            },
            {
              "name": "continue_execution",
              "signature": {
                "name": "continue_execution",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "last_step_outcome",
                    "annotation": "Any",
                    "default": null
                  }
                ],
                "return": "Optional[PolicyArm]"
              },
              "decorators": [],
              "docstring": "Logs the outcome of the previous step and returns the next arm in the sequence.\nReturns None if the skill is complete or has failed."
            },
            {
              "name": "end_execution",
              "signature": {
                "name": "end_execution",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Forcefully ends an execution, e.g., on failure."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\config.py",
      "file_hash": "a9c72aa4562baa6554184a0e2d44b58513f8ff83b0dec42384f1163c5b24dd6d",
      "functions": [
        {
          "name": "_normalize_path_string",
          "signature": {
            "name": "_normalize_path_string",
            "parameters": [
              {
                "name": "p",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Ensures a path is absolute and uses forward slashes."
        },
        {
          "name": "_default_workspace_root",
          "signature": {
            "name": "_default_workspace_root",
            "parameters": [],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Sets the default workspace root. The canonical path is the Linux container path.\nThe docker-compose volume mount is responsible for mapping the Windows host\npath (D:\\EcodiaOS) to this container path."
        },
        {
          "name": "_default_artifacts_root",
          "signature": {
            "name": "_default_artifacts_root",
            "parameters": [
              {
                "name": "ws_root",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_parse_allowed_roots",
          "signature": {
            "name": "_parse_allowed_roots",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "v",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "field_validator('allowed_roots', mode='before')",
            "classmethod"
          ],
          "docstring": null
        },
        {
          "name": "_parse_unsandbox_flag",
          "signature": {
            "name": "_parse_unsandbox_flag",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "v",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "field_validator('unsandboxed_fs', mode='before')",
            "classmethod"
          ],
          "docstring": null
        },
        {
          "name": "_harmonize_paths",
          "signature": {
            "name": "_harmonize_paths",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "model_validator(mode='after')"
          ],
          "docstring": "Ensures all path configurations are normalized to absolute, POSIX-style\npaths for consistency within the Linux container environment."
        }
      ],
      "classes": [
        {
          "name": "SandboxSettings",
          "bases": [
            "BaseSettings"
          ],
          "decorators": [],
          "docstring": "Configuration for the sandboxed execution environment.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "mode",
              "type": "str",
              "default": "'docker'"
            },
            {
              "name": "image",
              "type": "str",
              "default": "'python:3.11-slim'"
            },
            {
              "name": "timeout_sec",
              "type": "int",
              "default": "1800"
            },
            {
              "name": "cpus",
              "type": "str",
              "default": "'2.0'"
            },
            {
              "name": "memory",
              "type": "str",
              "default": "'4g'"
            },
            {
              "name": "network",
              "type": "Optional[str]",
              "default": "'bridge'"
            },
            {
              "name": "pip_install",
              "type": "List[str]",
              "default": "Field(default_factory=list)"
            }
          ],
          "methods": []
        },
        {
          "name": "TimeoutSettings",
          "bases": [
            "BaseSettings"
          ],
          "decorators": [],
          "docstring": "Tool-specific timeouts in seconds.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "fmt",
              "type": "int",
              "default": "600"
            },
            {
              "name": "test",
              "type": "int",
              "default": "1800"
            }
          ],
          "methods": []
        },
        {
          "name": "SimulaSettings",
          "bases": [
            "BaseSettings"
          ],
          "decorators": [],
          "docstring": "Top-level settings for the Simula application.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "repo_root",
              "type": "str",
              "default": "Field(default_factory=_default_workspace_root)"
            },
            {
              "name": "workspace_root",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "artifacts_root",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "allowed_roots",
              "type": "List[str]",
              "default": "Field(default_factory=list)"
            },
            {
              "name": "unsandboxed_fs",
              "type": "bool",
              "default": "False"
            },
            {
              "name": "sandbox",
              "type": "SandboxSettings",
              "default": "Field(default_factory=SandboxSettings)"
            },
            {
              "name": "timeouts",
              "type": "TimeoutSettings",
              "default": "Field(default_factory=TimeoutSettings)"
            },
            {
              "name": "max_apply_bytes",
              "type": "int",
              "default": "5000000"
            }
          ],
          "methods": [
            {
              "name": "_parse_allowed_roots",
              "signature": {
                "name": "_parse_allowed_roots",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "v",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [
                "field_validator('allowed_roots', mode='before')",
                "classmethod"
              ],
              "docstring": null
            },
            {
              "name": "_parse_unsandbox_flag",
              "signature": {
                "name": "_parse_unsandbox_flag",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "v",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [
                "field_validator('unsandboxed_fs', mode='before')",
                "classmethod"
              ],
              "docstring": null
            },
            {
              "name": "_harmonize_paths",
              "signature": {
                "name": "_harmonize_paths",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [
                "model_validator(mode='after')"
              ],
              "docstring": "Ensures all path configurations are normalized to absolute, POSIX-style\npaths for consistency within the Linux container environment."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\agent\\orchestrator.py",
      "file_hash": "c43dd06b00d9f60fdb85728b1756bbae943afe3fc02a73e1a9e693f9321c1605",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_handle_skill_continuation",
          "signature": {
            "name": "_handle_skill_continuation",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "is_complete",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "next_action",
                "annotation": "Optional[Dict]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Internal handler for processing the result of continuing a skill."
        },
        {
          "name": "_create_plan",
          "signature": {
            "name": "_create_plan",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "steps",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_update_plan",
          "signature": {
            "name": "_update_plan",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "step_index",
                "annotation": "int",
                "default": null
              },
              {
                "name": "new_status",
                "annotation": "str",
                "default": null
              },
              {
                "name": "notes",
                "annotation": "str",
                "default": "''"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_execute_code_evolution",
          "signature": {
            "name": "_execute_code_evolution",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "goal",
                "annotation": "str",
                "default": null
              },
              {
                "name": "step_details",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "job_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_submit_for_review",
          "signature": {
            "name": "_submit_for_review",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "summary",
                "annotation": "str",
                "default": null
              },
              {
                "name": "instruction",
                "annotation": "str",
                "default": "''"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Submit final_proposal for review via Atune (not Unity directly).\nAtune will score salience and may escalate to Unity deliberation."
        },
        {
          "name": "_submit_for_governance",
          "signature": {
            "name": "_submit_for_governance",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "summary",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Submits the final proposal to the Governor for self-upgrade verification."
        },
        {
          "name": "_think_next_action",
          "signature": {
            "name": "_think_next_action",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "goal",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_on_llm_response",
          "signature": {
            "name": "_on_llm_response",
            "parameters": [
              {
                "name": "response",
                "annotation": "dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "goal",
                "annotation": "str",
                "default": null
              },
              {
                "name": "objective_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "AgentOrchestrator",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_handle_skill_continuation",
              "signature": {
                "name": "_handle_skill_continuation",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "is_complete",
                    "annotation": "bool",
                    "default": null
                  },
                  {
                    "name": "next_action",
                    "annotation": "Optional[Dict]",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Internal handler for processing the result of continuing a skill."
            },
            {
              "name": "_create_plan",
              "signature": {
                "name": "_create_plan",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "steps",
                    "annotation": "List[str]",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_update_plan",
              "signature": {
                "name": "_update_plan",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "step_index",
                    "annotation": "int",
                    "default": null
                  },
                  {
                    "name": "new_status",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "notes",
                    "annotation": "str",
                    "default": "''"
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_execute_code_evolution",
              "signature": {
                "name": "_execute_code_evolution",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "goal",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "step_details",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  },
                  {
                    "name": "job_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_submit_for_review",
              "signature": {
                "name": "_submit_for_review",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "summary",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "instruction",
                    "annotation": "str",
                    "default": "''"
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Submit final_proposal for review via Atune (not Unity directly).\nAtune will score salience and may escalate to Unity deliberation."
            },
            {
              "name": "_submit_for_governance",
              "signature": {
                "name": "_submit_for_governance",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "summary",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Submits the final proposal to the Governor for self-upgrade verification."
            },
            {
              "name": "_think_next_action",
              "signature": {
                "name": "_think_next_action",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "goal",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "goal",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "objective_dict",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\agent\\tools.py",
      "file_hash": "f55158068cd243f63a0366cffc74e61d6b4458ac9ef2dda4647fb13dda135bba",
      "functions": [
        {
          "name": "execute_system_tool",
          "signature": {
            "name": "execute_system_tool",
            "parameters": [
              {
                "name": "query",
                "annotation": "str",
                "default": null
              },
              {
                "name": "args",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Acts as a client to the Qora universal tool runtime. It searches for a\ntool matching the query and executes it with the provided arguments."
        },
        {
          "name": "finish",
          "signature": {
            "name": "finish",
            "parameters": [
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "create_plan",
          "signature": {
            "name": "create_plan",
            "parameters": [
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "update_plan",
          "signature": {
            "name": "update_plan",
            "parameters": [
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "submit_code_for_multi_agent_review",
          "signature": {
            "name": "submit_code_for_multi_agent_review",
            "parameters": [
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\agent\\tool_specs.py",
      "file_hash": "0c41e980c3f23259d0fda67af5279973aee0be4eed4744f30592109034de448c",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\client\\synapse_client.py",
      "file_hash": "0b54f2191726a73a0c8bee08d539caa8e72d65f81528c3cc336054cbf4939a2f",
      "functions": [
        {
          "name": "_post",
          "signature": {
            "name": "_post",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "payload",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "Optional[float]",
                "default": "None"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get",
          "signature": {
            "name": "_get",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "Optional[float]",
                "default": "None"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "select_arm",
          "signature": {
            "name": "select_arm",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_ctx",
                "annotation": "TaskContext",
                "default": null
              },
              {
                "name": "candidates",
                "annotation": "Optional[List[Candidate]]",
                "default": "None"
              }
            ],
            "return": "SelectArmResponse"
          },
          "decorators": [],
          "docstring": "Selects the best arm for a task. `candidates` optional—server will\ngenerate a safe set when omitted (cold-start friendly)."
        },
        {
          "name": "select_arm_simple",
          "signature": {
            "name": "select_arm_simple",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "goal",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "risk_level",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "budget",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "candidate_ids",
                "annotation": "Optional[List[str]]",
                "default": "None"
              }
            ],
            "return": "SelectArmResponse"
          },
          "decorators": [],
          "docstring": "Convenience wrapper so callers don’t have to build models."
        },
        {
          "name": "continue_option",
          "signature": {
            "name": "continue_option",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "last_step_outcome",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "ContinueResponse"
          },
          "decorators": [],
          "docstring": "Continue a multi-step skill (Option)."
        },
        {
          "name": "repair_skill",
          "signature": {
            "name": "repair_skill",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "failed_step_index",
                "annotation": "int",
                "default": null
              },
              {
                "name": "error_observation",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "RepairResponse"
          },
          "decorators": [],
          "docstring": "One-shot repair when a skill step fails."
        },
        {
          "name": "get_budget",
          "signature": {
            "name": "get_budget",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "BudgetResponse"
          },
          "decorators": [],
          "docstring": "Returns a resource budget for a task."
        },
        {
          "name": "log_outcome",
          "signature": {
            "name": "log_outcome",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "episode_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "task_key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "metrics",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "simulator_prediction",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "LogOutcomeResponse"
          },
          "decorators": [],
          "docstring": "Logs the final outcome of an episode."
        },
        {
          "name": "submit_for_governance",
          "signature": {
            "name": "submit_for_governance",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "proposal",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Submits a self-upgrade patch to the Governor for verification."
        }
      ],
      "classes": [
        {
          "name": "SynapseClient",
          "bases": [],
          "decorators": [],
          "docstring": "A typed, thin-client adapter for all interactions between Simula and the\nmodern, refactored Synapse API.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "_post",
              "signature": {
                "name": "_post",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "payload",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  },
                  {
                    "name": "timeout",
                    "annotation": "Optional[float]",
                    "default": "None"
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_get",
              "signature": {
                "name": "_get",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "timeout",
                    "annotation": "Optional[float]",
                    "default": "None"
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "select_arm",
              "signature": {
                "name": "select_arm",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_ctx",
                    "annotation": "TaskContext",
                    "default": null
                  },
                  {
                    "name": "candidates",
                    "annotation": "Optional[List[Candidate]]",
                    "default": "None"
                  }
                ],
                "return": "SelectArmResponse"
              },
              "decorators": [],
              "docstring": "Selects the best arm for a task. `candidates` optional—server will\ngenerate a safe set when omitted (cold-start friendly)."
            },
            {
              "name": "select_arm_simple",
              "signature": {
                "name": "select_arm_simple",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "goal",
                    "annotation": "Optional[str]",
                    "default": "None"
                  },
                  {
                    "name": "risk_level",
                    "annotation": "Optional[str]",
                    "default": "None"
                  },
                  {
                    "name": "budget",
                    "annotation": "Optional[str]",
                    "default": "None"
                  },
                  {
                    "name": "candidate_ids",
                    "annotation": "Optional[List[str]]",
                    "default": "None"
                  }
                ],
                "return": "SelectArmResponse"
              },
              "decorators": [],
              "docstring": "Convenience wrapper so callers don’t have to build models."
            },
            {
              "name": "continue_option",
              "signature": {
                "name": "continue_option",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "last_step_outcome",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "ContinueResponse"
              },
              "decorators": [],
              "docstring": "Continue a multi-step skill (Option)."
            },
            {
              "name": "repair_skill",
              "signature": {
                "name": "repair_skill",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "failed_step_index",
                    "annotation": "int",
                    "default": null
                  },
                  {
                    "name": "error_observation",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "RepairResponse"
              },
              "decorators": [],
              "docstring": "One-shot repair when a skill step fails."
            },
            {
              "name": "get_budget",
              "signature": {
                "name": "get_budget",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "task_key",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "BudgetResponse"
              },
              "decorators": [],
              "docstring": "Returns a resource budget for a task."
            },
            {
              "name": "log_outcome",
              "signature": {
                "name": "log_outcome",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "episode_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "task_key",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "metrics",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  },
                  {
                    "name": "simulator_prediction",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": "LogOutcomeResponse"
              },
              "decorators": [],
              "docstring": "Logs the final outcome of an episode."
            },
            {
              "name": "submit_for_governance",
              "signature": {
                "name": "submit_for_governance",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "proposal",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": "Submits a self-upgrade patch to the Governor for verification."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\eval_types.py",
      "file_hash": "c25c11ba05ea58dfee19008325d7e4014f1e51b52a25abc6188bb2bf3fd618d2",
      "functions": [
        {
          "name": "reward",
          "signature": {
            "name": "reward",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "*args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "as_dict",
          "signature": {
            "name": "as_dict",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict"
          },
          "decorators": [],
          "docstring": "Returns the evaluation result as a dictionary."
        },
        {
          "name": "hard_gates_ok",
          "signature": {
            "name": "hard_gates_ok",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [
            "property"
          ],
          "docstring": "Computes whether the results pass the non-negotiable quality gates.\nTreats missing metrics as 0.0 for this calculation."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "cfg",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_calibrate",
          "signature": {
            "name": "_calibrate",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "value",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Applies a calibration function to a metric if one is defined."
        },
        {
          "name": "score",
          "signature": {
            "name": "score",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "eval_result",
                "annotation": "EvalResult",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Computes the final reward score. Returns 0.0 if hard gates fail.\nOtherwise, returns the weighted, calibrated, and penalized score."
        },
        {
          "name": "explain",
          "signature": {
            "name": "explain",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "eval_result",
                "annotation": "EvalResult",
                "default": null
              }
            ],
            "return": "Dict[str, float]"
          },
          "decorators": [],
          "docstring": "Returns a dictionary showing the contribution of each metric to the score."
        }
      ],
      "classes": [
        {
          "name": "MockTelemetry",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "reward",
              "signature": {
                "name": "reward",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "*args",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "**kwargs",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "EvalResult",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "A unified, typed container for all evaluator outputs.",
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "unit_pass_ratio",
              "type": "float",
              "default": "0.0"
            },
            {
              "name": "integration_pass_ratio",
              "type": "float",
              "default": "0.0"
            },
            {
              "name": "static_score",
              "type": "float",
              "default": "0.0"
            },
            {
              "name": "contracts_score",
              "type": "float",
              "default": "0.0"
            },
            {
              "name": "perf_score",
              "type": "float",
              "default": "0.0"
            },
            {
              "name": "coverage_delta_score",
              "type": "float",
              "default": "0.0"
            },
            {
              "name": "security_score",
              "type": "float",
              "default": "0.0"
            },
            {
              "name": "policy_penalty",
              "type": "float",
              "default": "0.0"
            },
            {
              "name": "gate_thresholds",
              "type": "Dict[str, float]",
              "default": "field(default_factory=lambda: {'unit': 0.99, 'contracts': 0.99, 'security': 0.99})"
            }
          ],
          "methods": [
            {
              "name": "as_dict",
              "signature": {
                "name": "as_dict",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Dict"
              },
              "decorators": [],
              "docstring": "Returns the evaluation result as a dictionary."
            },
            {
              "name": "hard_gates_ok",
              "signature": {
                "name": "hard_gates_ok",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [
                "property"
              ],
              "docstring": "Computes whether the results pass the non-negotiable quality gates.\nTreats missing metrics as 0.0 for this calculation."
            }
          ]
        },
        {
          "name": "RewardAggregator",
          "bases": [],
          "decorators": [],
          "docstring": "Calculates a single [0,1] reward score from a complex EvalResult object.\nEnforces hard gates, applies configurable weights, and handles penalties.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "cfg",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_calibrate",
              "signature": {
                "name": "_calibrate",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": "float",
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [],
              "docstring": "Applies a calibration function to a metric if one is defined."
            },
            {
              "name": "score",
              "signature": {
                "name": "score",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "eval_result",
                    "annotation": "EvalResult",
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [],
              "docstring": "Computes the final reward score. Returns 0.0 if hard gates fail.\nOtherwise, returns the weighted, calibrated, and penalized score."
            },
            {
              "name": "explain",
              "signature": {
                "name": "explain",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "eval_result",
                    "annotation": "EvalResult",
                    "default": null
                  }
                ],
                "return": "Dict[str, float]"
              },
              "decorators": [],
              "docstring": "Returns a dictionary showing the contribution of each metric to the score."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\loop.py",
      "file_hash": "f0eb9e8142f7b28510b34fbd2a5b1a378eed7555df92584ca6cd776831bd4b35",
      "functions": [
        {
          "name": "format",
          "signature": {
            "name": "format",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "record",
                "annotation": "logging.LogRecord",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "setup_logging",
          "signature": {
            "name": "setup_logging",
            "parameters": [
              {
                "name": "verbose",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "run_dir",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "sha1",
          "signature": {
            "name": "sha1",
            "parameters": [
              {
                "name": "s",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "load",
          "signature": {
            "name": "load",
            "parameters": [
              {
                "name": "path",
                "annotation": "Optional[Path]",
                "default": "None"
              }
            ],
            "return": "'SimulaConfig'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "root_dir",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "run_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "write_text",
          "signature": {
            "name": "write_text",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "rel",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Path"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "save_candidate",
          "signature": {
            "name": "save_candidate",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "step_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "iter_idx",
                "annotation": "int",
                "default": null
              },
              {
                "name": "file_rel",
                "annotation": "str",
                "default": null
              },
              {
                "name": "patch",
                "annotation": "str",
                "default": null
              },
              {
                "name": "tag",
                "annotation": "str",
                "default": "''"
              }
            ],
            "return": "Path"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "JsonLogFormatter",
          "bases": [
            "logging.Formatter"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "format",
              "signature": {
                "name": "format",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "record",
                    "annotation": "logging.LogRecord",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "SandboxCfg",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "image",
              "type": "str",
              "default": "'python:3.11-slim'"
            },
            {
              "name": "timeout_sec",
              "type": "int",
              "default": "1200"
            },
            {
              "name": "network",
              "type": "str",
              "default": "'bridge'"
            }
          ],
          "methods": []
        },
        {
          "name": "OrchestratorCfg",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "parallelism",
              "type": "int",
              "default": "2"
            },
            {
              "name": "max_wall_minutes",
              "type": "int",
              "default": "90"
            },
            {
              "name": "seed",
              "type": "Optional[int]",
              "default": "None"
            },
            {
              "name": "keep_artifacts",
              "type": "bool",
              "default": "True"
            },
            {
              "name": "k_candidates",
              "type": "int",
              "default": "2"
            },
            {
              "name": "unity_channel",
              "type": "str",
              "default": "'simula.codegen'"
            }
          ],
          "methods": []
        },
        {
          "name": "SimulaConfig",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "sandbox",
              "type": "SandboxCfg",
              "default": null
            },
            {
              "name": "orchestrator",
              "type": "OrchestratorCfg",
              "default": null
            }
          ],
          "methods": [
            {
              "name": "load",
              "signature": {
                "name": "load",
                "parameters": [
                  {
                    "name": "path",
                    "annotation": "Optional[Path]",
                    "default": "None"
                  }
                ],
                "return": "'SimulaConfig'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "ArtifactStore",
          "bases": [],
          "decorators": [],
          "docstring": "Persists patches, evaluator outputs, and other artifacts for a given run.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "root_dir",
                    "annotation": "Path",
                    "default": null
                  },
                  {
                    "name": "run_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "write_text",
              "signature": {
                "name": "write_text",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "rel",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "content",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "Path"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "save_candidate",
              "signature": {
                "name": "save_candidate",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "step_name",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "iter_idx",
                    "annotation": "int",
                    "default": null
                  },
                  {
                    "name": "file_rel",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "patch",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "tag",
                    "annotation": "str",
                    "default": "''"
                  }
                ],
                "return": "Path"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\planner.py",
      "file_hash": "7ad8c72b75b2ffa710745e041d47c040c2743e55516553bcd2b4eb51fdd1dfe2",
      "functions": [
        {
          "name": "_as_list",
          "signature": {
            "name": "_as_list",
            "parameters": [
              {
                "name": "x",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "List[Any]"
          },
          "decorators": [],
          "docstring": "Coerces a value to a list if it isn't one already."
        },
        {
          "name": "_require_keys",
          "signature": {
            "name": "_require_keys",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "keys",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "ctx",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Ensures a dictionary contains a set of required keys."
        },
        {
          "name": "_get",
          "signature": {
            "name": "_get",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Dict-or-attr getter."
        },
        {
          "name": "_get_path",
          "signature": {
            "name": "_get_path",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "path",
                "annotation": "Sequence[str]",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Nested getter by path: ['acceptance','unit_tests','patterns']"
        },
        {
          "name": "_normalize_targets",
          "signature": {
            "name": "_normalize_targets",
            "parameters": [
              {
                "name": "raw_targets",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "List[StepTarget]"
          },
          "decorators": [],
          "docstring": "Converts a raw list of target dicts into a list of typed StepTarget objects."
        },
        {
          "name": "_normalize_tests",
          "signature": {
            "name": "_normalize_tests",
            "parameters": [
              {
                "name": "step_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "objective_obj",
                "annotation": "Objective",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Resolves which tests to run for a step. "
        },
        {
          "name": "_validate_iterations",
          "signature": {
            "name": "_validate_iterations",
            "parameters": [
              {
                "name": "obj_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Tuple[int, float]"
          },
          "decorators": [],
          "docstring": "Validates the top-level 'iterations' block. \nAllows defaults if missing."
        },
        {
          "name": "_validate_acceptance",
          "signature": {
            "name": "_validate_acceptance",
            "parameters": [
              {
                "name": "obj_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Performs basic validation on the 'acceptance' block."
        },
        {
          "name": "_normalize_steps_list",
          "signature": {
            "name": "_normalize_steps_list",
            "parameters": [
              {
                "name": "obj_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Validates the list of steps in the raw dictionary."
        },
        {
          "name": "_build_step",
          "signature": {
            "name": "_build_step",
            "parameters": [
              {
                "name": "step_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "objective_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "objective_obj",
                "annotation": "Objective",
                "default": null
              }
            ],
            "return": "Step"
          },
          "decorators": [],
          "docstring": "Constructs a single, typed Step object from its dictionary representation."
        },
        {
          "name": "plan_from_objective",
          "signature": {
            "name": "plan_from_objective",
            "parameters": [
              {
                "name": "objective_dict",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "Plan"
          },
          "decorators": [],
          "docstring": "Validates and transforms the raw objective dictionary into a typed, executable Plan.\nThis is the primary entry point for the planner."
        },
        {
          "name": "match_tests_in_repo",
          "signature": {
            "name": "match_tests_in_repo",
            "parameters": [
              {
                "name": "tests",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "repo_root",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "List[Path]"
          },
          "decorators": [],
          "docstring": "Resolves glob patterns for test files under the repo root, returning unique Paths."
        },
        {
          "name": "pretty_plan",
          "signature": {
            "name": "pretty_plan",
            "parameters": [
              {
                "name": "plan",
                "annotation": "Plan",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Generates a human-friendly string representation of the plan for logs."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\portfolio.py",
      "file_hash": "ccc0140aa2992eedea1e57f2b828f06052910a9e723293d25fc8f449480b99d3",
      "functions": [
        {
          "name": "_generate_single_candidate",
          "signature": {
            "name": "_generate_single_candidate",
            "parameters": [
              {
                "name": "step",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "strategy",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": "Generates a single code modification candidate (diff) based on the chosen strategy."
        },
        {
          "name": "generate_candidate_portfolio",
          "signature": {
            "name": "generate_candidate_portfolio",
            "parameters": [
              {
                "name": "job_meta",
                "annotation": "Dict",
                "default": null
              },
              {
                "name": "step",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "List[Dict[str, Any]]"
          },
          "decorators": [],
          "docstring": "Generates a portfolio of candidate diffs using various strategies.\nThis function NO LONGER evaluates, scores, or ranks candidates. That is\nthe sole responsibility of Synapse."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\prompts.py",
      "file_hash": "6dabb1f900b4e1b40a22830a6973682608a77d154eee3e442d016574986e3fff",
      "functions": [
        {
          "name": "_read_file_snippet",
          "signature": {
            "name": "_read_file_snippet",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "max_lines",
                "annotation": "int",
                "default": "60"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ensure_identity",
          "signature": {
            "name": "_ensure_identity",
            "parameters": [
              {
                "name": "spec",
                "annotation": "str",
                "default": null
              },
              {
                "name": "identity",
                "annotation": "Optional[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "If the caller didn't supply an identity (or supplied a stub),\nfetch a minimal identity context via Equor. Falls back to spec preview."
        },
        {
          "name": "build_plan_prompt",
          "signature": {
            "name": "build_plan_prompt",
            "parameters": [
              {
                "name": "spec",
                "annotation": "str",
                "default": null
              },
              {
                "name": "targets",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "identity",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "List[Dict[str, str]]"
          },
          "decorators": [],
          "docstring": "Build the planning prompt. If identity is not provided, it is fetched from Equor."
        },
        {
          "name": "build_file_prompt",
          "signature": {
            "name": "build_file_prompt",
            "parameters": [
              {
                "name": "spec",
                "annotation": "str",
                "default": null
              },
              {
                "name": "identity",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "file_plan",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "List[Dict[str, str]]"
          },
          "decorators": [],
          "docstring": "Deep context for single-file generation/patch.\nIf identity is not provided, it is fetched from Equor."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\telemetry.py",
      "file_hash": "78b89f5f104fb53be9438f9aae9c0cba02d0ee23fefa3f44292b2f7f0510d817",
      "functions": [
        {
          "name": "_now_iso",
          "signature": {
            "name": "_now_iso",
            "parameters": [],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_redact",
          "signature": {
            "name": "_redact",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "from_env",
          "signature": {
            "name": "from_env",
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return": "'Telemetry'"
          },
          "decorators": [
            "classmethod"
          ],
          "docstring": null
        },
        {
          "name": "enable_if_env",
          "signature": {
            "name": "enable_if_env",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ensure_dirs",
          "signature": {
            "name": "_ensure_dirs",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_job_file",
          "signature": {
            "name": "_job_file",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "job_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_write",
          "signature": {
            "name": "_write",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "job_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "event",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "start_job",
          "signature": {
            "name": "start_job",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "job_id",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "job_meta",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "end_job",
          "signature": {
            "name": "end_job",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "status",
                "annotation": "str",
                "default": "'ok'"
              },
              {
                "name": "extra",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "llm_call",
          "signature": {
            "name": "llm_call",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "model",
                "annotation": "str",
                "default": null
              },
              {
                "name": "tokens_in",
                "annotation": "int",
                "default": null
              },
              {
                "name": "tokens_out",
                "annotation": "int",
                "default": null
              },
              {
                "name": "meta",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "reward",
          "signature": {
            "name": "reward",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "value",
                "annotation": "float",
                "default": null
              },
              {
                "name": "reason",
                "annotation": "str",
                "default": "''"
              },
              {
                "name": "meta",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "log_event",
          "signature": {
            "name": "log_event",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "event_type",
                "annotation": "str",
                "default": null
              },
              {
                "name": "payload",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Logs a generic, structured event."
        },
        {
          "name": "tool_event",
          "signature": {
            "name": "tool_event",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "phase",
                "annotation": "str",
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "args",
                "annotation": "Any",
                "default": "None"
              },
              {
                "name": "result",
                "annotation": "Any",
                "default": "None"
              },
              {
                "name": "ok",
                "annotation": "Optional[bool]",
                "default": "None"
              },
              {
                "name": "err",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "extra",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "started_ms",
                "annotation": "Optional[float]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "graph_write",
          "signature": {
            "name": "graph_write",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "nodes",
                "annotation": "int",
                "default": "0"
              },
              {
                "name": "rels",
                "annotation": "int",
                "default": "0"
              },
              {
                "name": "labels",
                "annotation": "Optional[Dict[str, int]]",
                "default": "None"
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "job_id",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "job_meta",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__enter__",
          "signature": {
            "name": "__enter__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__exit__",
          "signature": {
            "name": "__exit__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "exc_type",
                "annotation": null,
                "default": null
              },
              {
                "name": "exc",
                "annotation": null,
                "default": null
              },
              {
                "name": "tb",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "track_tool",
          "signature": {
            "name": "track_tool",
            "parameters": [
              {
                "name": "name",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "Callable[[Callable[..., Any]], Callable[..., Any]]"
          },
          "decorators": [],
          "docstring": "Wrap a sync or async tool to emit start/end events and duration."
        },
        {
          "name": "_decorator",
          "signature": {
            "name": "_decorator",
            "parameters": [
              {
                "name": "fn",
                "annotation": "Callable[..., Any]",
                "default": null
              }
            ],
            "return": "Callable[..., Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_aw",
          "signature": {
            "name": "_aw",
            "parameters": [
              {
                "name": "*args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_sw",
          "signature": {
            "name": "_sw",
            "parameters": [
              {
                "name": "*args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "Telemetry",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "enabled",
              "type": "bool",
              "default": "False"
            },
            {
              "name": "sink",
              "type": "str",
              "default": "'both'"
            },
            {
              "name": "trace_dir",
              "type": "str",
              "default": "'/app/.simula/traces'"
            },
            {
              "name": "sample",
              "type": "float",
              "default": "1.0"
            },
            {
              "name": "redact",
              "type": "bool",
              "default": "True"
            },
            {
              "name": "_job_start_ts",
              "type": "Dict[str, float]",
              "default": "field(default_factory=dict)"
            }
          ],
          "methods": [
            {
              "name": "from_env",
              "signature": {
                "name": "from_env",
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "'Telemetry'"
              },
              "decorators": [
                "classmethod"
              ],
              "docstring": null
            },
            {
              "name": "enable_if_env",
              "signature": {
                "name": "enable_if_env",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_ensure_dirs",
              "signature": {
                "name": "_ensure_dirs",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_job_file",
              "signature": {
                "name": "_job_file",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "job_id",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_write",
              "signature": {
                "name": "_write",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "job_id",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "event",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "start_job",
              "signature": {
                "name": "start_job",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "job_id",
                    "annotation": "Optional[str]",
                    "default": "None"
                  },
                  {
                    "name": "job_meta",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "end_job",
              "signature": {
                "name": "end_job",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "status",
                    "annotation": "str",
                    "default": "'ok'"
                  },
                  {
                    "name": "extra",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "llm_call",
              "signature": {
                "name": "llm_call",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "model",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "tokens_in",
                    "annotation": "int",
                    "default": null
                  },
                  {
                    "name": "tokens_out",
                    "annotation": "int",
                    "default": null
                  },
                  {
                    "name": "meta",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "reward",
              "signature": {
                "name": "reward",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": "float",
                    "default": null
                  },
                  {
                    "name": "reason",
                    "annotation": "str",
                    "default": "''"
                  },
                  {
                    "name": "meta",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "log_event",
              "signature": {
                "name": "log_event",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "event_type",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "payload",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": "Logs a generic, structured event."
            },
            {
              "name": "tool_event",
              "signature": {
                "name": "tool_event",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "phase",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "args",
                    "annotation": "Any",
                    "default": "None"
                  },
                  {
                    "name": "result",
                    "annotation": "Any",
                    "default": "None"
                  },
                  {
                    "name": "ok",
                    "annotation": "Optional[bool]",
                    "default": "None"
                  },
                  {
                    "name": "err",
                    "annotation": "Optional[str]",
                    "default": "None"
                  },
                  {
                    "name": "extra",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  },
                  {
                    "name": "started_ms",
                    "annotation": "Optional[float]",
                    "default": "None"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "graph_write",
              "signature": {
                "name": "graph_write",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "nodes",
                    "annotation": "int",
                    "default": "0"
                  },
                  {
                    "name": "rels",
                    "annotation": "int",
                    "default": "0"
                  },
                  {
                    "name": "labels",
                    "annotation": "Optional[Dict[str, int]]",
                    "default": "None"
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "with_job_context",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "job_id",
                    "annotation": "Optional[str]",
                    "default": "None"
                  },
                  {
                    "name": "job_meta",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__enter__",
              "signature": {
                "name": "__enter__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__exit__",
              "signature": {
                "name": "__exit__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "exc_type",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "exc",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "tb",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\archive\\pareto.py",
      "file_hash": "f9e007218b0e5ed14ce7c638d30e251a4f3bfe616853fade3c892267cba12493",
      "functions": [
        {
          "name": "_write_jsonl",
          "signature": {
            "name": "_write_jsonl",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_read_jsonl",
          "signature": {
            "name": "_read_jsonl",
            "parameters": [],
            "return": "List[Dict]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_dominates",
          "signature": {
            "name": "_dominates",
            "parameters": [
              {
                "name": "a",
                "annotation": "Dict",
                "default": null
              },
              {
                "name": "b",
                "annotation": "Dict",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "add_candidate",
          "signature": {
            "name": "add_candidate",
            "parameters": [
              {
                "name": "record",
                "annotation": "Dict",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "record = {\n  \"path\": str, \"diff\": str, \"tests_ok\": int(0/1),\n  \"static\": float, \"coverage\": float, \"contracts\": float, \"diff_size\": int,\n  \"notes\": str\n}"
        },
        {
          "name": "top_k_similar",
          "signature": {
            "name": "top_k_similar",
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "k",
                "annotation": "int",
                "default": "3"
              }
            ],
            "return": "List[Dict]"
          },
          "decorators": [],
          "docstring": "Return best Pareto-ish items for this path."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\evaluators\\contracts.py",
      "file_hash": "37f9c4503464c178d55d21fdcdeea3c42c12d2782495006dd636547bdc7d0c96",
      "functions": [
        {
          "name": "_read",
          "signature": {
            "name": "_read",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_approx_sig_present",
          "signature": {
            "name": "_approx_sig_present",
            "parameters": [
              {
                "name": "src",
                "annotation": "str",
                "default": null
              },
              {
                "name": "func_sig",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_contains_tool_registration",
          "signature": {
            "name": "_contains_tool_registration",
            "parameters": [
              {
                "name": "src",
                "annotation": "str",
                "default": null
              },
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_git_changed",
          "signature": {
            "name": "_git_changed",
            "parameters": [
              {
                "name": "sess",
                "annotation": null,
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "objective",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "sandbox_session",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, object]"
          },
          "decorators": [],
          "docstring": "FIX: Changed function signature from 'step' to 'objective' to match the caller."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\evaluators\\perf.py",
      "file_hash": "b97c1a9bb8b0848de2ba69be04c5d9832fec7a53151c00f67b83d31b36bc0cc0",
      "functions": [
        {
          "name": "_is_mapping",
          "signature": {
            "name": "_is_mapping",
            "parameters": [
              {
                "name": "x",
                "annotation": null,
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get",
          "signature": {
            "name": "_get",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Dict-or-attr getter."
        },
        {
          "name": "_get_path",
          "signature": {
            "name": "_get_path",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "path",
                "annotation": "Sequence[str]",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Nested getter by path: ['acceptance','unit_tests','patterns']"
        },
        {
          "name": "_extract_tests",
          "signature": {
            "name": "_extract_tests",
            "parameters": [
              {
                "name": "step_or_objective",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Resolution order (works for dicts or objects):\n  1) step.tests\n  2) (step.objective or objective).acceptance.tests\n  3) (..).acceptance.unit_tests.patterns\n  4) (..).acceptance.unit_tests.paths\n  -> default ['tests'] if nothing provided"
        },
        {
          "name": "_expand_tests",
          "signature": {
            "name": "_expand_tests",
            "parameters": [
              {
                "name": "patterns",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Expand globs so pytest has concrete inputs. If a pattern does not match,\nkeep the token (pytest can still collect from a directory name)."
        },
        {
          "name": "_budget_seconds",
          "signature": {
            "name": "_budget_seconds",
            "parameters": [
              {
                "name": "objective",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "FIX: Parameter renamed to 'objective' for clarity.\nReads acceptance.perf.pytest_duration_seconds."
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "objective",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "sandbox_session",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "FIX: Changed function signature from 'step' to 'objective' to match the caller."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\evaluators\\runtime.py",
      "file_hash": "d23a0bbbcdd6b3aaf5fc8365636f4bdbd69b9fbc09f2b032c9495b2776fd73f5",
      "functions": [
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "objective",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "sandbox_session",
                "annotation": null,
                "default": null
              }
            ],
            "return": "dict"
          },
          "decorators": [],
          "docstring": "FIX: Changed function signature from 'step' to 'objective' to match the caller."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\evaluators\\static.py",
      "file_hash": "801b6bcb62abf0ea3bd67115a447a66b1fcdb20068baad867ccef84c14365cd2",
      "functions": [
        {
          "name": "_run",
          "signature": {
            "name": "_run",
            "parameters": [
              {
                "name": "sess",
                "annotation": null,
                "default": null
              },
              {
                "name": "args",
                "annotation": null,
                "default": null
              },
              {
                "name": "timeout",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "step",
                "annotation": null,
                "default": null
              },
              {
                "name": "sandbox_session",
                "annotation": null,
                "default": null
              }
            ],
            "return": "dict"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\evaluators\\tests.py",
      "file_hash": "3d41b0e5f01e193c69a01cb02991d5836b881b075da832e55b1278a7bb092990",
      "functions": [
        {
          "name": "_is_mapping",
          "signature": {
            "name": "_is_mapping",
            "parameters": [
              {
                "name": "x",
                "annotation": null,
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_get",
          "signature": {
            "name": "_get",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "key",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Dict-or-attr getter."
        },
        {
          "name": "_get_path",
          "signature": {
            "name": "_get_path",
            "parameters": [
              {
                "name": "obj",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "path",
                "annotation": "Sequence[str]",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Nested dict-or-attr getter by path: ['acceptance','unit_tests','patterns']"
        },
        {
          "name": "_extract_tests",
          "signature": {
            "name": "_extract_tests",
            "parameters": [
              {
                "name": "step_or_objective",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Resolution order:\n  1) step.tests\n  2) (step.objective or objective).acceptance.tests\n  3) (..).acceptance.unit_tests.patterns\n  4) (..).acceptance.unit_tests.paths"
        },
        {
          "name": "_expand_test_selection",
          "signature": {
            "name": "_expand_test_selection",
            "parameters": [
              {
                "name": "patterns",
                "annotation": "List[str]",
                "default": null
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Expand globs so pytest receives concrete paths. If nothing expands, keep the\noriginal token (pytest can still collect from a directory name)."
        },
        {
          "name": "_coverage_per_file",
          "signature": {
            "name": "_coverage_per_file",
            "parameters": [],
            "return": "Dict[str, float]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_parse_counts",
          "signature": {
            "name": "_parse_counts",
            "parameters": [
              {
                "name": "txt",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, int]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ratio",
          "signature": {
            "name": "_ratio",
            "parameters": [
              {
                "name": "passed",
                "annotation": "int",
                "default": null
              },
              {
                "name": "total",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "step_or_objective",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "sandbox_session",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Execute pytest inside the provided sandbox session.\n\n- Accepts either a `step` or an `objective` (dict or object).\n- Selects tests per resolution order above.\n- Produces coverage.xml and parses per-file coverage.\n\nReturns the structured dict documented in the module docstring."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\evaluators\\__init__.py",
      "file_hash": "5e05a8bd6b4b85955e9f2692bfc4e9e756de19358943b57c425d69a3258bfb95",
      "functions": [
        {
          "name": "as_dict",
          "signature": {
            "name": "as_dict",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict"
          },
          "decorators": [],
          "docstring": "Returns the evaluation result as a dictionary."
        },
        {
          "name": "unit_pass_ratio",
          "signature": {
            "name": "unit_pass_ratio",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "integration_pass_ratio",
          "signature": {
            "name": "integration_pass_ratio",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "static_score",
          "signature": {
            "name": "static_score",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "security_score",
          "signature": {
            "name": "security_score",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "contracts_score",
          "signature": {
            "name": "contracts_score",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "perf_score",
          "signature": {
            "name": "perf_score",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "coverage_delta_score",
          "signature": {
            "name": "coverage_delta_score",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "policy_penalty",
          "signature": {
            "name": "policy_penalty",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "summary",
          "signature": {
            "name": "summary",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run_evaluator_suite",
          "signature": {
            "name": "run_evaluator_suite",
            "parameters": [
              {
                "name": "objective",
                "annotation": "Dict[str, Any]",
                "default": null
              },
              {
                "name": "sandbox_session",
                "annotation": null,
                "default": null
              }
            ],
            "return": "EvalResult"
          },
          "decorators": [],
          "docstring": "Execute evaluator ensemble inside the provided sandbox session."
        }
      ],
      "classes": [
        {
          "name": "EvalResult",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Canonical evaluator aggregate for RewardAggregator + Orchestrator.\nAll scores are in [0,1]. hard_gates_ok gates commit eligibility.",
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "hard_gates_ok",
              "type": "bool",
              "default": null
            },
            {
              "name": "raw",
              "type": "Dict[str, Any]",
              "default": null
            }
          ],
          "methods": [
            {
              "name": "as_dict",
              "signature": {
                "name": "as_dict",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Dict"
              },
              "decorators": [],
              "docstring": "Returns the evaluation result as a dictionary."
            },
            {
              "name": "unit_pass_ratio",
              "signature": {
                "name": "unit_pass_ratio",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "integration_pass_ratio",
              "signature": {
                "name": "integration_pass_ratio",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "static_score",
              "signature": {
                "name": "static_score",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "security_score",
              "signature": {
                "name": "security_score",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "contracts_score",
              "signature": {
                "name": "contracts_score",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "perf_score",
              "signature": {
                "name": "perf_score",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "coverage_delta_score",
              "signature": {
                "name": "coverage_delta_score",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "policy_penalty",
              "signature": {
                "name": "policy_penalty",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "float"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "summary",
              "signature": {
                "name": "summary",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Dict[str, Any]"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\mutators\\ast_refactor.py",
      "file_hash": "c1ea6556c16530729074f815f767ec8a09ead780a2cc9827927fc1933c5c0fd7",
      "functions": [
        {
          "name": "_read",
          "signature": {
            "name": "_read",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_rel_for_diff",
          "signature": {
            "name": "_rel_for_diff",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_unified_diff",
          "signature": {
            "name": "_unified_diff",
            "parameters": [
              {
                "name": "old",
                "annotation": "str",
                "default": null
              },
              {
                "name": "new",
                "annotation": "str",
                "default": null
              },
              {
                "name": "rel_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_strip_shebang_and_encoding",
          "signature": {
            "name": "_strip_shebang_and_encoding",
            "parameters": [
              {
                "name": "src",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[str, str]"
          },
          "decorators": [],
          "docstring": "Return (preamble, body) where preamble keeps shebang/encoding/comment banner."
        },
        {
          "name": "_ensure_module_docstring",
          "signature": {
            "name": "_ensure_module_docstring",
            "parameters": [
              {
                "name": "tree",
                "annotation": "ast.Module",
                "default": null
              },
              {
                "name": "doc",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_parse_sig",
          "signature": {
            "name": "_parse_sig",
            "parameters": [
              {
                "name": "signature",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[str, List[str]]"
          },
          "decorators": [],
          "docstring": "Parse 'name(arg: T, x: int) -> R' into (name, [param names])."
        },
        {
          "name": "_build_func_def_from_sig",
          "signature": {
            "name": "_build_func_def_from_sig",
            "parameters": [
              {
                "name": "signature",
                "annotation": "str",
                "default": null
              },
              {
                "name": "doc",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "ast.FunctionDef"
          },
          "decorators": [],
          "docstring": "Best-effort: synthesis a FunctionDef with typed args from a human signature.\n- NO NotImplementedError: we generate a non-throwing stub (docstring + pass)\n- Types are parsed literally; unknowns become `Any` (typing import added elsewhere)"
        },
        {
          "name": "_ensure_import",
          "signature": {
            "name": "_ensure_import",
            "parameters": [
              {
                "name": "module",
                "annotation": "ast.Module",
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "asname",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "from_",
                "annotation": "Optional[str]",
                "default": "None"
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": "Ensure an import is present; return True if modified."
        },
        {
          "name": "has_import",
          "signature": {
            "name": "has_import",
            "parameters": [],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ensure_logger",
          "signature": {
            "name": "_ensure_logger",
            "parameters": [
              {
                "name": "module",
                "annotation": "ast.Module",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_module_has_function",
          "signature": {
            "name": "_module_has_function",
            "parameters": [
              {
                "name": "module",
                "annotation": "ast.Module",
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_add_guard_raises",
          "signature": {
            "name": "_add_guard_raises",
            "parameters": [
              {
                "name": "fn",
                "annotation": "ast.FunctionDef",
                "default": null
              },
              {
                "name": "exc",
                "annotation": "str",
                "default": "'ValueError'"
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": "Insert a minimal guard on the first argument if no guard present."
        },
        {
          "name": "_ensure_return_annotations",
          "signature": {
            "name": "_ensure_return_annotations",
            "parameters": [
              {
                "name": "fn",
                "annotation": "ast.FunctionDef",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ensure_arg_annotations",
          "signature": {
            "name": "_ensure_arg_annotations",
            "parameters": [
              {
                "name": "fn",
                "annotation": "ast.FunctionDef",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "set_aggressive",
          "signature": {
            "name": "set_aggressive",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "v",
                "annotation": "bool",
                "default": null
              }
            ],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "mutate",
          "signature": {
            "name": "mutate",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "step",
                "annotation": null,
                "default": null
              },
              {
                "name": "mode",
                "annotation": "str",
                "default": "'scaffold'"
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": "Return a unified diff for the primary target file, or None if no-op.\nModes:\n  - scaffold: ensure module + target function exists with docstring & logger\n  - imports: add missing imports for typing/logging/typing.Optional\n  - typing: add Any/Optional/return annotations conservatively\n  - error_paths: insert minimal guard raises & error logs"
        },
        {
          "name": "_do_scaffold",
          "signature": {
            "name": "_do_scaffold",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "module",
                "annotation": "ast.Module",
                "default": null
              },
              {
                "name": "export_sig",
                "annotation": "Optional[str]",
                "default": null
              },
              {
                "name": "step_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_do_imports",
          "signature": {
            "name": "_do_imports",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "module",
                "annotation": "ast.Module",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_do_typing",
          "signature": {
            "name": "_do_typing",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "module",
                "annotation": "ast.Module",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_do_error_paths",
          "signature": {
            "name": "_do_error_paths",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "module",
                "annotation": "ast.Module",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "AstMutator",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "aggressive",
              "type": "bool",
              "default": "False"
            }
          ],
          "methods": [
            {
              "name": "set_aggressive",
              "signature": {
                "name": "set_aggressive",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "v",
                    "annotation": "bool",
                    "default": null
                  }
                ],
                "return": "None"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "mutate",
              "signature": {
                "name": "mutate",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "step",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "mode",
                    "annotation": "str",
                    "default": "'scaffold'"
                  }
                ],
                "return": "Optional[str]"
              },
              "decorators": [],
              "docstring": "Return a unified diff for the primary target file, or None if no-op.\nModes:\n  - scaffold: ensure module + target function exists with docstring & logger\n  - imports: add missing imports for typing/logging/typing.Optional\n  - typing: add Any/Optional/return annotations conservatively\n  - error_paths: insert minimal guard raises & error logs"
            },
            {
              "name": "_do_scaffold",
              "signature": {
                "name": "_do_scaffold",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "module",
                    "annotation": "ast.Module",
                    "default": null
                  },
                  {
                    "name": "export_sig",
                    "annotation": "Optional[str]",
                    "default": null
                  },
                  {
                    "name": "step_name",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_do_imports",
              "signature": {
                "name": "_do_imports",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "module",
                    "annotation": "ast.Module",
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_do_typing",
              "signature": {
                "name": "_do_typing",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "module",
                    "annotation": "ast.Module",
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_do_error_paths",
              "signature": {
                "name": "_do_error_paths",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "module",
                    "annotation": "ast.Module",
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\mutators\\prompt_patch.py",
      "file_hash": "b9a36ff8821d97f4b9f25e5683b77c2d064345a6339fe3599aab482fd5dd89b2",
      "functions": [
        {
          "name": "_read_snip",
          "signature": {
            "name": "_read_snip",
            "parameters": [
              {
                "name": "p",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "n",
                "annotation": "int",
                "default": "120"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_targets_context",
          "signature": {
            "name": "_targets_context",
            "parameters": [
              {
                "name": "step",
                "annotation": "Any",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_strip_fences",
          "signature": {
            "name": "_strip_fences",
            "parameters": [
              {
                "name": "text",
                "annotation": "Optional[str]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "llm_unified_diff",
          "signature": {
            "name": "llm_unified_diff",
            "parameters": [
              {
                "name": "step",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "variant",
                "annotation": "str",
                "default": "'base'"
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\mutators\\retrieval_edit.py",
      "file_hash": "1de53f96d72e681f6c7d2888765f5c729450f0b2bfc528d3352302414233e599",
      "functions": [
        {
          "name": "_unidiff",
          "signature": {
            "name": "_unidiff",
            "parameters": [
              {
                "name": "old",
                "annotation": "str",
                "default": null
              },
              {
                "name": "new",
                "annotation": "str",
                "default": null
              },
              {
                "name": "rel",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Generate a unified diff between old and new text."
        },
        {
          "name": "_read",
          "signature": {
            "name": "_read",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Read file content as utf-8; return empty string on failure (caller decides create vs. modify)."
        },
        {
          "name": "_ensure_line",
          "signature": {
            "name": "_ensure_line",
            "parameters": [
              {
                "name": "src",
                "annotation": "str",
                "default": null
              },
              {
                "name": "needle",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Tuple[str, bool]"
          },
          "decorators": [],
          "docstring": "Ensure an exact line exists in src; returns (updated_text, changed?)."
        },
        {
          "name": "_detect_registry_path",
          "signature": {
            "name": "_detect_registry_path",
            "parameters": [],
            "return": "Path"
          },
          "decorators": [],
          "docstring": "Return the most plausible registry module path; if none exist, choose canonical location to create."
        },
        {
          "name": "retrieval_guided_edits",
          "signature": {
            "name": "retrieval_guided_edits",
            "parameters": [
              {
                "name": "step",
                "annotation": null,
                "default": null
              },
              {
                "name": "mode",
                "annotation": "Literal['registry', 'config', 'prior_art', 'tests']",
                "default": null
              }
            ],
            "return": "Optional[str]"
          },
          "decorators": [],
          "docstring": "Apply deterministic retrieval-guided edits:\n  - \"registry\": ensure tools required by acceptance.contracts.must_register are registered.\n  - \"config\": ensure pyproject.toml contains formatter/linter config blocks.\n  - \"prior_art\": create a missing module/function with a concrete, safe body and logging.\n  - \"tests\": create a smoke test that imports target module and asserts function presence.\nReturns a unified diff string or None if no change is needed."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\mutators\\__init__.py",
      "file_hash": "8d9b5a0ae6b78ba5269c0bda823f8bcfd341a873ba26536d5243d390687ddd0f",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\retrieval\\context.py",
      "file_hash": "c2860e1855369ca802c58dfaa219da474a2e68ba2aaa93bea1088b1aae8a4e37",
      "functions": [
        {
          "name": "default_neighbor_globs",
          "signature": {
            "name": "default_neighbor_globs",
            "parameters": [],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": "Return the default set of globs we consider for snippets."
        },
        {
          "name": "_is_textual",
          "signature": {
            "name": "_is_textual",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_shorten",
          "signature": {
            "name": "_shorten",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_read_text",
          "signature": {
            "name": "_read_text",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": "MAX_BYTES_PER_FILE"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_iter_globs",
          "signature": {
            "name": "_iter_globs",
            "parameters": [
              {
                "name": "root",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "patterns",
                "annotation": "Iterable[str]",
                "default": null
              }
            ],
            "return": "Iterator[Path]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_norm_rel",
          "signature": {
            "name": "_norm_rel",
            "parameters": [
              {
                "name": "root",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "p",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_rank_neighbors",
          "signature": {
            "name": "_rank_neighbors",
            "parameters": [
              {
                "name": "root",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "primary",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "candidates",
                "annotation": "Iterable[Path]",
                "default": null
              }
            ],
            "return": "List[Neighbor]"
          },
          "decorators": [],
          "docstring": "Assign heuristic scores to candidate files based on proximity and role."
        },
        {
          "name": "_pkg_root",
          "signature": {
            "name": "_pkg_root",
            "parameters": [
              {
                "name": "p",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "Optional[Path]"
          },
          "decorators": [],
          "docstring": "Best-effort: walk upwards while __init__.py exists, return the top-most."
        },
        {
          "name": "_collect_candidates",
          "signature": {
            "name": "_collect_candidates",
            "parameters": [
              {
                "name": "root",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "primary",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "List[Path]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_high_signal_slice",
          "signature": {
            "name": "_high_signal_slice",
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "limit",
                "annotation": "int",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Prefer:\n  - top‑of‑file imports & constants block\n  - function/class signatures (defs/classes)\n  - test assertions\nKeep order; trim aggressively."
        },
        {
          "name": "gather_neighbor_snippets",
          "signature": {
            "name": "gather_neighbor_snippets",
            "parameters": [
              {
                "name": "repo_root",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "file_rel",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, str]"
          },
          "decorators": [],
          "docstring": "Return a mapping of {rel_path: snippet_text} with hard caps respected.\nRanking favors tests, registries, specs, then local proximity."
        }
      ],
      "classes": [
        {
          "name": "Neighbor",
          "bases": [],
          "decorators": [
            "dataclass(frozen=True)"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "path",
              "type": "Path",
              "default": null
            },
            {
              "name": "rel",
              "type": "str",
              "default": null
            },
            {
              "name": "score",
              "type": "float",
              "default": null
            },
            {
              "name": "reason",
              "type": "str",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\sandbox\\sandbox.py",
      "file_hash": "b0b73ab977e97aa177b79f149dfc02fa04629b2364f671cf62ba6c2751fb9525",
      "functions": [
        {
          "name": "_merge_env",
          "signature": {
            "name": "_merge_env",
            "parameters": [
              {
                "name": "base",
                "annotation": "Dict[str, str]",
                "default": null
              },
              {
                "name": "allow",
                "annotation": "Iterable[str]",
                "default": null
              },
              {
                "name": "set_env",
                "annotation": "Dict[str, str]",
                "default": null
              }
            ],
            "return": "Dict[str, str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_sanitize_llm_diff",
          "signature": {
            "name": "_sanitize_llm_diff",
            "parameters": [
              {
                "name": "diff_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "repo_root",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "- Strip ``` fences (with or without 'diff')\n- Normalize to LF, ensure trailing NL\n- If +++ path is a new file (doesn't exist), rewrite the matching --- header to /dev/null\n- Fix 'creation' hunk headers: -1,0 => -0,0"
        },
        {
          "name": "_apply_add_only_diff_to_fs",
          "signature": {
            "name": "_apply_add_only_diff_to_fs",
            "parameters": [
              {
                "name": "diff_text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "repo_root",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "Tuple[bool, List[Path], Optional[Path], str]"
          },
          "decorators": [],
          "docstring": "Apply unified diff that contains ONLY '+' lines (no '-') to files that\nare either missing or empty. Returns (applied, touched_paths, backup_dir, reason).\nWe create a backup_dir with original contents for revert()."
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "cfg",
                "annotation": "SandboxConfig",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "cmd",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "int | None",
                "default": "None"
              }
            ],
            "return": "Tuple[int, str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "apply_unified_diff",
          "signature": {
            "name": "apply_unified_diff",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "diff",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "revert",
          "signature": {
            "name": "revert",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "cfg",
                "annotation": "SandboxConfig",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_ensure_image_ready",
          "signature": {
            "name": "_ensure_image_ready",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_docker_base",
          "signature": {
            "name": "_docker_base",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "rw_repo",
                "annotation": "bool",
                "default": "False"
              }
            ],
            "return": "List[str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "cmd",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "int | None",
                "default": "None"
              }
            ],
            "return": "Tuple[int, str]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "apply_unified_diff",
          "signature": {
            "name": "apply_unified_diff",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "diff",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "revert",
          "signature": {
            "name": "revert",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "bool"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__del__",
          "signature": {
            "name": "__del__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "cfg_dict",
                "annotation": "Dict[str, object]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "session",
          "signature": {
            "name": "session",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "asynccontextmanager"
          ],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "SandboxConfig",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "mode",
              "type": "str",
              "default": "'docker'"
            },
            {
              "name": "image",
              "type": "str",
              "default": "'python:3.11-slim'"
            },
            {
              "name": "timeout_sec",
              "type": "int",
              "default": "1800"
            },
            {
              "name": "cpus",
              "type": "str",
              "default": "'2.0'"
            },
            {
              "name": "memory",
              "type": "str",
              "default": "'4g'"
            },
            {
              "name": "network",
              "type": "Optional[str]",
              "default": "'bridge'"
            },
            {
              "name": "pip_install",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "workdir",
              "type": "str",
              "default": "'.'"
            },
            {
              "name": "env_allow",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "env_set",
              "type": "Dict[str, str]",
              "default": "field(default_factory=dict)"
            },
            {
              "name": "mount_rw",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            }
          ],
          "methods": []
        },
        {
          "name": "AddOnlyApplyResult",
          "bases": [
            "Tuple[bool, List[Path], Path]"
          ],
          "decorators": [],
          "docstring": "(applied, touched_paths, backup_dir) typed alias.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": []
        },
        {
          "name": "LocalSession",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "cfg",
                    "annotation": "SandboxConfig",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "cmd",
                    "annotation": "List[str]",
                    "default": null
                  },
                  {
                    "name": "timeout",
                    "annotation": "int | None",
                    "default": "None"
                  }
                ],
                "return": "Tuple[int, str]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "apply_unified_diff",
              "signature": {
                "name": "apply_unified_diff",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "diff",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "revert",
              "signature": {
                "name": "revert",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "DockerSession",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "cfg",
                    "annotation": "SandboxConfig",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_ensure_image_ready",
              "signature": {
                "name": "_ensure_image_ready",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_docker_base",
              "signature": {
                "name": "_docker_base",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "rw_repo",
                    "annotation": "bool",
                    "default": "False"
                  }
                ],
                "return": "List[str]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "run",
              "signature": {
                "name": "run",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "cmd",
                    "annotation": "List[str]",
                    "default": null
                  },
                  {
                    "name": "timeout",
                    "annotation": "int | None",
                    "default": "None"
                  }
                ],
                "return": "Tuple[int, str]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "apply_unified_diff",
              "signature": {
                "name": "apply_unified_diff",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "diff",
                    "annotation": "str",
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "revert",
              "signature": {
                "name": "revert",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "bool"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__del__",
              "signature": {
                "name": "__del__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "DockerSandbox",
          "bases": [],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "cfg_dict",
                    "annotation": "Dict[str, object]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "session",
              "signature": {
                "name": "session",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [
                "asynccontextmanager"
              ],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\sandbox\\seeds.py",
      "file_hash": "6e0a8bbeaf41ac5d2cf5433ba3c6451221e7c271c923414cb62013990516da5b",
      "functions": [
        {
          "name": "seed_config",
          "signature": {
            "name": "seed_config",
            "parameters": [],
            "return": "Dict[str, object]"
          },
          "decorators": [],
          "docstring": "Return a DockerSandbox config dict that:\n- uses DEFAULT_IMAGE\n- disables network by default (security); you can re‑enable per step\n- preinstalls evaluator deps once per container via venv bootstrap"
        },
        {
          "name": "ensure_toolchain",
          "signature": {
            "name": "ensure_toolchain",
            "parameters": [
              {
                "name": "session",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Dict[str, object]"
          },
          "decorators": [],
          "docstring": "Idempotently check versions of core tools inside the sandbox; if missing,\nattempt install (works in docker mode where we have an ephemeral venv).\nReturns a map of tool -> version string (or 'missing')."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\specs\\schema.py",
      "file_hash": "9d191e033c1c8b6db0db2b2f5192e85b6295f80637b479bbdb0c70d2f65ad7a9",
      "functions": [
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any] | None",
                "default": null
              }
            ],
            "return": "'Constraints'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any] | None",
                "default": null
              }
            ],
            "return": "'UnitTestsSpec'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any] | None",
                "default": null
              }
            ],
            "return": "'ContractsSpec'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any] | None",
                "default": null
              }
            ],
            "return": "'DocsSpec'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any] | None",
                "default": null
              }
            ],
            "return": "'PerfSpec'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any] | None",
                "default": null
              }
            ],
            "return": "'AcceptanceSpec'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any] | None",
                "default": null
              }
            ],
            "return": "'RuntimeSpec'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any] | None",
                "default": null
              }
            ],
            "return": "'Objective'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "get",
          "signature": {
            "name": "get",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "*path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "default",
                "annotation": "Any",
                "default": "None"
              }
            ],
            "return": "Any"
          },
          "decorators": [],
          "docstring": "Safe nested lookup: obj.get('acceptance','contracts','must_export', default=[])."
        },
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "'StepTarget'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "from_dict",
          "signature": {
            "name": "from_dict",
            "parameters": [
              {
                "name": "d",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "'Step'"
          },
          "decorators": [
            "staticmethod"
          ],
          "docstring": null
        },
        {
          "name": "primary_target",
          "signature": {
            "name": "primary_target",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "Tuple[Optional[str], Optional[str]]"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "acceptance",
          "signature": {
            "name": "acceptance",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "AcceptanceSpec"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        },
        {
          "name": "runtime",
          "signature": {
            "name": "runtime",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": "RuntimeSpec"
          },
          "decorators": [
            "property"
          ],
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "Constraints",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "python",
              "type": "str",
              "default": "'>=3.10'"
            },
            {
              "name": "allowed_new_packages",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any] | None",
                    "default": null
                  }
                ],
                "return": "'Constraints'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "UnitTestsSpec",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "paths",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "patterns",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any] | None",
                    "default": null
                  }
                ],
                "return": "'UnitTestsSpec'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "ContractsSpec",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "must_export",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "must_register",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any] | None",
                    "default": null
                  }
                ],
                "return": "'ContractsSpec'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "DocsSpec",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "files_must_change",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any] | None",
                    "default": null
                  }
                ],
                "return": "'DocsSpec'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "PerfSpec",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "pytest_duration_seconds",
              "type": "str | float",
              "default": "'<=30'"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any] | None",
                    "default": null
                  }
                ],
                "return": "'PerfSpec'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "AcceptanceSpec",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "unit_tests",
              "type": "UnitTestsSpec",
              "default": "field(default_factory=UnitTestsSpec)"
            },
            {
              "name": "contracts",
              "type": "ContractsSpec",
              "default": "field(default_factory=ContractsSpec)"
            },
            {
              "name": "docs",
              "type": "DocsSpec",
              "default": "field(default_factory=DocsSpec)"
            },
            {
              "name": "perf",
              "type": "PerfSpec",
              "default": "field(default_factory=PerfSpec)"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any] | None",
                    "default": null
                  }
                ],
                "return": "'AcceptanceSpec'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "RuntimeSpec",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "import_modules",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "commands",
              "type": "List[List[str]]",
              "default": "field(default_factory=list)"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any] | None",
                    "default": null
                  }
                ],
                "return": "'RuntimeSpec'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "Objective",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "title",
              "type": "str",
              "default": "''"
            },
            {
              "name": "description",
              "type": "str",
              "default": "''"
            },
            {
              "name": "acceptance",
              "type": "AcceptanceSpec",
              "default": "field(default_factory=AcceptanceSpec)"
            },
            {
              "name": "runtime",
              "type": "RuntimeSpec",
              "default": "field(default_factory=RuntimeSpec)"
            },
            {
              "name": "constraints",
              "type": "Constraints",
              "default": "field(default_factory=Constraints)"
            },
            {
              "name": "extras",
              "type": "Dict[str, Any]",
              "default": "field(default_factory=dict)"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any] | None",
                    "default": null
                  }
                ],
                "return": "'Objective'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            },
            {
              "name": "get",
              "signature": {
                "name": "get",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "*path",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "default",
                    "annotation": "Any",
                    "default": "None"
                  }
                ],
                "return": "Any"
              },
              "decorators": [],
              "docstring": "Safe nested lookup: obj.get('acceptance','contracts','must_export', default=[])."
            }
          ]
        },
        {
          "name": "StepTarget",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "file",
              "type": "str",
              "default": null
            },
            {
              "name": "export",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "'StepTarget'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "Step",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "name",
              "type": "str",
              "default": null
            },
            {
              "name": "iterations",
              "type": "int",
              "default": "1"
            },
            {
              "name": "targets",
              "type": "List[StepTarget]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "tests",
              "type": "List[str]",
              "default": "field(default_factory=list)"
            },
            {
              "name": "objective",
              "type": "Dict[str, Any]",
              "default": "field(default_factory=dict)"
            },
            {
              "name": "constraints",
              "type": "Constraints",
              "default": "field(default_factory=Constraints)"
            }
          ],
          "methods": [
            {
              "name": "from_dict",
              "signature": {
                "name": "from_dict",
                "parameters": [
                  {
                    "name": "d",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": "'Step'"
              },
              "decorators": [
                "staticmethod"
              ],
              "docstring": null
            },
            {
              "name": "primary_target",
              "signature": {
                "name": "primary_target",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "Tuple[Optional[str], Optional[str]]"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "acceptance",
              "signature": {
                "name": "acceptance",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "AcceptanceSpec"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            },
            {
              "name": "runtime",
              "signature": {
                "name": "runtime",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": "RuntimeSpec"
              },
              "decorators": [
                "property"
              ],
              "docstring": null
            }
          ]
        },
        {
          "name": "Plan",
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Represents the final, validated, and executable plan.\nThis is the top-level object returned by the planner, containing an\nordered list of steps for the engine to execute.",
          "is_pydantic_model": false,
          "is_dataclass": true,
          "fields": [
            {
              "name": "steps",
              "type": "List[Step]",
              "default": "field(default_factory=list)"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\code_sim\\utils\\repo_features.py",
      "file_hash": "791ae8ce55d31d63cd3ace01115ea4e07258478c15815d617cabe293d1a74c13",
      "functions": [
        {
          "name": "file_degree",
          "signature": {
            "name": "file_degree",
            "parameters": [
              {
                "name": "rel",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_files",
                "annotation": "int",
                "default": "20000"
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": "Rough import-degree: count files that import this module or are imported by it."
        },
        {
          "name": "file_churn",
          "signature": {
            "name": "file_churn",
            "parameters": [
              {
                "name": "rel",
                "annotation": "str",
                "default": null
              },
              {
                "name": "days",
                "annotation": "int",
                "default": "180"
              }
            ],
            "return": "int"
          },
          "decorators": [],
          "docstring": "Number of commits touching this file in last N days."
        },
        {
          "name": "plan_entropy",
          "signature": {
            "name": "plan_entropy",
            "parameters": [
              {
                "name": "plan",
                "annotation": "List[Dict]",
                "default": null
              }
            ],
            "return": "float"
          },
          "decorators": [],
          "docstring": "Spread of plan across dirs: simple entropy proxy in [0,1]."
        },
        {
          "name": "features_for_file",
          "signature": {
            "name": "features_for_file",
            "parameters": [
              {
                "name": "job_meta",
                "annotation": "Dict",
                "default": null
              },
              {
                "name": "file_plan",
                "annotation": "Dict",
                "default": null
              }
            ],
            "return": "Dict"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\policy\\emit.py",
      "file_hash": "1ce93389092dc8b0966f980486ef93fa7bc1bca587892958d96fcd906ac03fbd",
      "functions": [
        {
          "name": "patch_to_policygraph",
          "signature": {
            "name": "patch_to_policygraph",
            "parameters": [
              {
                "name": "candidate",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "PolicyGraph"
          },
          "decorators": [],
          "docstring": "Translates a Simula candidate diff into a rich PolicyGraph by performing\nstatic analysis to infer the true effects of the code change."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\policy\\effects.py",
      "file_hash": "07e363662baa12a8641d7fc19bc26ef96be2c15423a82d2292dd98341cb9e46a",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "visit_Import",
          "signature": {
            "name": "visit_Import",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "node",
                "annotation": "ast.Import",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "visit_ImportFrom",
          "signature": {
            "name": "visit_ImportFrom",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "node",
                "annotation": "ast.ImportFrom",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "visit_Call",
          "signature": {
            "name": "visit_Call",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "node",
                "annotation": "ast.Call",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "extract_effects_from_diff",
          "signature": {
            "name": "extract_effects_from_diff",
            "parameters": [
              {
                "name": "diff_text",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, bool]"
          },
          "decorators": [],
          "docstring": "Performs static analysis on the Python code added in a diff to infer side-effects."
        }
      ],
      "classes": [
        {
          "name": "EffectAnalyzer",
          "bases": [
            "ast.NodeVisitor"
          ],
          "decorators": [],
          "docstring": "Analyzes a Python AST to infer potential side-effects.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "visit_Import",
              "signature": {
                "name": "visit_Import",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.Import",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "visit_ImportFrom",
              "signature": {
                "name": "visit_ImportFrom",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.ImportFrom",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "visit_Call",
              "signature": {
                "name": "visit_Call",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.Call",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\service\\deps.py",
      "file_hash": "645d0f60960a2d4ee6b1da66dea5a3761669d83a0b196c073f50b1c895c29545",
      "functions": [],
      "classes": [
        {
          "name": "Settings",
          "bases": [
            "BaseSettings"
          ],
          "decorators": [],
          "docstring": null,
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "repo_root",
              "type": "str",
              "default": "'/app'"
            },
            {
              "name": "fmt_timeout",
              "type": "int",
              "default": "600"
            },
            {
              "name": "test_timeout",
              "type": "int",
              "default": "1800"
            },
            {
              "name": "max_apply_bytes",
              "type": "int",
              "default": "5000000"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\service\\main.py",
      "file_hash": "1ef4cd7b0b23d3a83c3274c50d8d84a0ac05fa4b323155b2bd3b2ded54933924",
      "functions": [
        {
          "name": "root_ok",
          "signature": {
            "name": "root_ok",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "router.get('/')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\service\\routers\\health.py",
      "file_hash": "62217ed2a0380398f118ca1ccd4845e3ff5fe18728eeae80a0f8abb2b767cce8",
      "functions": [
        {
          "name": "health",
          "signature": {
            "name": "health",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "router.get('/sim_health')"
          ],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\service\\routers\\jobs_codegen.py",
      "file_hash": "364f8be45f6034c90d2b9275e01653bacdc69377c6e7a10586e367bd34820f0e",
      "functions": [
        {
          "name": "start_agent_job",
          "signature": {
            "name": "start_agent_job",
            "parameters": [
              {
                "name": "req",
                "annotation": "CodegenRequest",
                "default": null
              },
              {
                "name": "response",
                "annotation": "Response",
                "default": null
              }
            ],
            "return": "CodegenResponse"
          },
          "decorators": [
            "router.post('/jobs/codegen', dependencies=[route_gate('simula.codegen.enabled', True)], response_model=CodegenResponse, summary='Activate the Simula Autonomous Agent')"
          ],
          "docstring": "Activates the Simula agent to achieve the specified goal ('spec').\nDelegates the task to the autonomous AgentOrchestrator. Returns a summary of the run."
        }
      ],
      "classes": [
        {
          "name": "TargetHint",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "An optional hint for the agent about a file or module of interest.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "path",
              "type": "str",
              "default": "Field(..., description=\"Repo-relative path, e.g. 'simula/agent/tools.py'\")"
            },
            {
              "name": "kind",
              "type": "Literal['file', 'module', 'test', 'config', 'auto']",
              "default": "Field('auto', description='A hint about the nature of the path.')"
            },
            {
              "name": "signature",
              "type": "Optional[str]",
              "default": "Field(None, description=\"Optional function signature hint for scaffolding, e.g. 'def my_func(a: int) -> str:'\")"
            }
          ],
          "methods": []
        },
        {
          "name": "CodegenRequest",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The request model for starting a new Simula agent job.\nThe 'spec' is the high-level goal for the agent to accomplish.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "spec",
              "type": "str",
              "default": "Field(..., min_length=10, description='Natural-language description of the desired task or goal.')"
            },
            {
              "name": "targets",
              "type": "List[TargetHint]",
              "default": "Field(default_factory=list, description='Optional list of file/module paths to provide as initial hints to the agent.')"
            }
          ],
          "methods": []
        },
        {
          "name": "CodegenResponse",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "The response model after a Simula agent job is initiated.\nProvides the job ID and the final status of the agent's run.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "job_id",
              "type": "str",
              "default": null
            },
            {
              "name": "status",
              "type": "str",
              "default": null
            },
            {
              "name": "duration_s",
              "type": "Optional[float]",
              "default": "None"
            },
            {
              "name": "notes",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "agent_workdir",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "episode_id",
              "type": "Optional[str]",
              "default": "None"
            },
            {
              "name": "error",
              "type": "Optional[str]",
              "default": "None"
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\service\\services\\codegen.py",
      "file_hash": "5bc4ebf3e0f03e63cef56ac0c80223f3200d57a7ede7c9f8ec959e945935e17f",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "spec",
                "annotation": "str",
                "default": null
              },
              {
                "name": "targets",
                "annotation": "Optional[List[Dict[str, Any]]]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_utc_iso",
          "signature": {
            "name": "_utc_iso",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "ts",
                "annotation": "float",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_write_json_atomic",
          "signature": {
            "name": "_write_json_atomic",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "data",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "log_event",
          "signature": {
            "name": "log_event",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "event_type",
                "annotation": "str",
                "default": null
              },
              {
                "name": "data",
                "annotation": "Optional[Dict[str, Any]]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Logs a structured event to the events.jsonl file."
        },
        {
          "name": "setup_logging",
          "signature": {
            "name": "setup_logging",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Attaches a file logger for this specific job."
        },
        {
          "name": "teardown_logging",
          "signature": {
            "name": "teardown_logging",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Detaches the job-specific file logger."
        },
        {
          "name": "finalize",
          "signature": {
            "name": "finalize",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "status",
                "annotation": "str",
                "default": null
              },
              {
                "name": "notes",
                "annotation": "str",
                "default": null
              },
              {
                "name": "error",
                "annotation": "Optional[Exception]",
                "default": "None"
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Finalizes the job metadata and saves the result."
        },
        {
          "name": "run_codegen_job",
          "signature": {
            "name": "run_codegen_job",
            "parameters": [
              {
                "name": "spec",
                "annotation": "str",
                "default": null
              },
              {
                "name": "targets",
                "annotation": "Optional[List[Dict[str, Any]]]",
                "default": "None"
              },
              {
                "name": "dry_run",
                "annotation": "bool",
                "default": "False"
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Initializes environment and runs the autonomous agent to fulfill `spec`."
        }
      ],
      "classes": [
        {
          "name": "JobContext",
          "bases": [],
          "decorators": [],
          "docstring": "Manages state, artifacts, and logging for a single codegen job.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "spec",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "targets",
                    "annotation": "Optional[List[Dict[str, Any]]]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_utc_iso",
              "signature": {
                "name": "_utc_iso",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "ts",
                    "annotation": "float",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_write_json_atomic",
              "signature": {
                "name": "_write_json_atomic",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": "Path",
                    "default": null
                  },
                  {
                    "name": "data",
                    "annotation": "Dict[str, Any]",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "log_event",
              "signature": {
                "name": "log_event",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "event_type",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "data",
                    "annotation": "Optional[Dict[str, Any]]",
                    "default": "None"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Logs a structured event to the events.jsonl file."
            },
            {
              "name": "setup_logging",
              "signature": {
                "name": "setup_logging",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Attaches a file logger for this specific job."
            },
            {
              "name": "teardown_logging",
              "signature": {
                "name": "teardown_logging",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Detaches the job-specific file logger."
            },
            {
              "name": "finalize",
              "signature": {
                "name": "finalize",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "status",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "notes",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "error",
                    "annotation": "Optional[Exception]",
                    "default": "None"
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Finalizes the job metadata and saves the result."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\service\\services\\equor_bridge.py",
      "file_hash": "b96320f1e4c084c1046618355f9b2dbcf294f50b9b25ec1d37c5aa01b3659e5b",
      "functions": [
        {
          "name": "_current_identity_id",
          "signature": {
            "name": "_current_identity_id",
            "parameters": [],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "fetch_identity_context",
          "signature": {
            "name": "fetch_identity_context",
            "parameters": [
              {
                "name": "spec",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict[str, Any]"
          },
          "decorators": [],
          "docstring": "Lightweight identity context for planning prompts (kept for legacy callsites)."
        },
        {
          "name": "resolve_equor_for_agent",
          "signature": {
            "name": "resolve_equor_for_agent",
            "parameters": [
              {
                "name": "*_args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**_kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "log_call_result",
          "signature": {
            "name": "log_call_result",
            "parameters": [
              {
                "name": "*_args",
                "annotation": null,
                "default": null
              },
              {
                "name": "**_kwargs",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\service\\services\\executor.py",
      "file_hash": "336474299c4421af16a1d965106c9d863c76ab81ba6f284f6304820c1fa49237",
      "functions": [
        {
          "name": "run_cmd",
          "signature": {
            "name": "run_cmd",
            "parameters": [
              {
                "name": "cmd",
                "annotation": "Sequence[str]",
                "default": null
              },
              {
                "name": "cwd",
                "annotation": "Optional[str]",
                "default": "None"
              },
              {
                "name": "timeout",
                "annotation": "Optional[int]",
                "default": "None"
              }
            ],
            "return": "dict[str, Any]"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\service\\services\\prompts.py",
      "file_hash": "82bea80a5d0f6c8c6100758188e4a75bbc45794012712d22b3385810dc27c757",
      "functions": [
        {
          "name": "_read_file_snippet",
          "signature": {
            "name": "_read_file_snippet",
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "max_lines",
                "annotation": "int",
                "default": "60"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Read head/tail of a file for compact context. Gracefully handles missing files."
        },
        {
          "name": "_gather_repo_context",
          "signature": {
            "name": "_gather_repo_context",
            "parameters": [
              {
                "name": "targets",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              },
              {
                "name": "max_lines",
                "annotation": "int",
                "default": "60"
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Lightweight repo context aggregator using file head/tail snippets."
        },
        {
          "name": "build_plan_prompt",
          "signature": {
            "name": "build_plan_prompt",
            "parameters": [
              {
                "name": "spec",
                "annotation": "str",
                "default": null
              },
              {
                "name": "targets",
                "annotation": "List[Dict[str, Any]]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Builds the user content for the planning prompt.\n\nREFACTORED: Returns a single string for the user prompt. Does not include\nsystem messages or identity context."
        },
        {
          "name": "build_file_prompt",
          "signature": {
            "name": "build_file_prompt",
            "parameters": [
              {
                "name": "spec",
                "annotation": "str",
                "default": null
              },
              {
                "name": "file_plan",
                "annotation": "Dict[str, Any]",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Builds the user content for the single-file generation/patch prompt.\n\nREFACTORED: Returns a single string. Does not include system messages\nor identity context."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\systems\\simula\\service\\services\\vcs.py",
      "file_hash": "4d204dffb5b63205c679f65ea1523a90ce02bdae2bf97d38ea3c7eaf53c9f7ae",
      "functions": [
        {
          "name": "_git_sync",
          "signature": {
            "name": "_git_sync",
            "parameters": [
              {
                "name": "args",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "repo_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_git",
          "signature": {
            "name": "_git",
            "parameters": [
              {
                "name": "args",
                "annotation": "List[str]",
                "default": null
              },
              {
                "name": "repo_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "Dict"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "ensure_branch",
          "signature": {
            "name": "ensure_branch",
            "parameters": [
              {
                "name": "branch",
                "annotation": "str",
                "default": null
              },
              {
                "name": "repo_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "If branch exists -> checkout. Else create from current HEAD."
        },
        {
          "name": "commit_all",
          "signature": {
            "name": "commit_all",
            "parameters": [
              {
                "name": "repo_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Stage everything and commit if there are changes."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\workers\\promoter.py",
      "file_hash": "8b7c17fa0183b6359c7b52c91d10b4532b4c7abbda58433e55dcfddb52141272",
      "functions": [
        {
          "name": "run",
          "signature": {
            "name": "run",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\tools\\hello.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\workspace\\hello\\src\\sum2.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\workspace\\hello\\tests\\test_sum2.py",
      "file_hash": "2ce693b384f39ef511c62101a70dd85e60edf6dc0c760b9389cb74be39c982d3",
      "functions": [
        {
          "name": "test_sum2",
          "signature": {
            "name": "test_sum2",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\src\\sum2.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\src\\simula\\config.py",
      "file_hash": "16c747a0227e4c25cd11390bc6363e329e5264ceb30b858b4c846342e130c218",
      "functions": [
        {
          "name": "_load_config_from_yaml",
          "signature": {
            "name": "_load_config_from_yaml",
            "parameters": [
              {
                "name": "env",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "dict"
          },
          "decorators": [],
          "docstring": "Loads settings from default and environment-specific YAML files."
        }
      ],
      "classes": [
        {
          "name": "GitSettings",
          "bases": [
            "BaseModel"
          ],
          "decorators": [],
          "docstring": "Configuration for Git repository interactions.",
          "is_pydantic_model": true,
          "is_dataclass": false,
          "fields": [
            {
              "name": "repo_url",
              "type": "str",
              "default": "Field(..., description='URL of the target Git repository.')"
            },
            {
              "name": "branch",
              "type": "str",
              "default": "Field('main', description='The default branch to operate on.')"
            },
            {
              "name": "workspace_dir",
              "type": "Path",
              "default": "Field(Path('/home/simula/workspace'), description='Local directory for cloning the repository.')"
            },
            {
              "name": "ssh_key",
              "type": "Optional[SecretStr]",
              "default": "Field(None, description='SSH private key for private repository access.')"
            }
          ],
          "methods": []
        },
        {
          "name": "AppSettings",
          "bases": [
            "BaseSettings"
          ],
          "decorators": [],
          "docstring": "Main application settings class.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [
            {
              "name": "env",
              "type": "str",
              "default": "Field('dev', description='Application environment (dev, prod, etc.).')"
            },
            {
              "name": "git",
              "type": "GitSettings",
              "default": null
            }
          ],
          "methods": []
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\src\\simula\\git_manager.py",
      "file_hash": "4e41310a63d84fef8d9c04b00aa08567ade2307883c3a4b1b72c67df2e88cf46",
      "functions": [
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "stdout",
                "annotation": "str",
                "default": null
              },
              {
                "name": "stderr",
                "annotation": "str",
                "default": null
              },
              {
                "name": "return_code",
                "annotation": "int",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__str__",
          "signature": {
            "name": "__str__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "__init__",
          "signature": {
            "name": "__init__",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "GitSettings",
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_run_command",
          "signature": {
            "name": "_run_command",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "command",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "cwd",
                "annotation": "Optional[Path]",
                "default": "None"
              }
            ],
            "return": "Tuple[str, str]"
          },
          "decorators": [],
          "docstring": "Executes a command using subprocess and handles errors."
        },
        {
          "name": "clone_or_pull",
          "signature": {
            "name": "clone_or_pull",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Clones the repository if it doesn't exist, otherwise pulls the latest changes."
        },
        {
          "name": "reset_workspace",
          "signature": {
            "name": "reset_workspace",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Performs an idempotent reset of the workspace to a pristine state\nmatching the remote branch."
        },
        {
          "name": "apply_patch",
          "signature": {
            "name": "apply_patch",
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "patch_path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": "Applies a patch file to the repository."
        }
      ],
      "classes": [
        {
          "name": "GitError",
          "bases": [
            "Exception"
          ],
          "decorators": [],
          "docstring": "Custom exception for Git command failures.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "message",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "stdout",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "stderr",
                    "annotation": "str",
                    "default": null
                  },
                  {
                    "name": "return_code",
                    "annotation": "int",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "__str__",
              "signature": {
                "name": "__str__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            }
          ]
        },
        {
          "name": "GitManager",
          "bases": [],
          "decorators": [],
          "docstring": "A subprocess-based wrapper for executing Git commands.",
          "is_pydantic_model": false,
          "is_dataclass": false,
          "fields": [],
          "methods": [
            {
              "name": "__init__",
              "signature": {
                "name": "__init__",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "config",
                    "annotation": "GitSettings",
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": null
            },
            {
              "name": "_run_command",
              "signature": {
                "name": "_run_command",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "command",
                    "annotation": "list[str]",
                    "default": null
                  },
                  {
                    "name": "cwd",
                    "annotation": "Optional[Path]",
                    "default": "None"
                  }
                ],
                "return": "Tuple[str, str]"
              },
              "decorators": [],
              "docstring": "Executes a command using subprocess and handles errors."
            },
            {
              "name": "clone_or_pull",
              "signature": {
                "name": "clone_or_pull",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Clones the repository if it doesn't exist, otherwise pulls the latest changes."
            },
            {
              "name": "reset_workspace",
              "signature": {
                "name": "reset_workspace",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  }
                ],
                "return": null
              },
              "decorators": [],
              "docstring": "Performs an idempotent reset of the workspace to a pristine state\nmatching the remote branch."
            },
            {
              "name": "apply_patch",
              "signature": {
                "name": "apply_patch",
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "default": null
                  },
                  {
                    "name": "patch_path",
                    "annotation": "Path",
                    "default": null
                  }
                ],
                "return": "str"
              },
              "decorators": [],
              "docstring": "Applies a patch file to the repository."
            }
          ]
        }
      ]
    },
    {
      "path": "D:\\EcodiaOS\\src\\simula\\main.py",
      "file_hash": "db3862f5051b95270c2a2e7ec423ed8d1e57b7ea69861cb44dc9bd20c0e30b57",
      "functions": [
        {
          "name": "_configure_logging",
          "signature": {
            "name": "_configure_logging",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "_resolve_patch_path",
          "signature": {
            "name": "_resolve_patch_path",
            "parameters": [
              {
                "name": "cli_path",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return": "Path"
          },
          "decorators": [],
          "docstring": "Resolve the patch file path with precedence:\n  1) CLI: --patch / -p\n  2) ENV: SIMULA_PATCH_FILE\n  3) Default: <CWD>/patches/example.patch"
        },
        {
          "name": "_parse_args",
          "signature": {
            "name": "_parse_args",
            "parameters": [
              {
                "name": "argv",
                "annotation": "list[str]",
                "default": null
              }
            ],
            "return": "argparse.Namespace"
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "main",
          "signature": {
            "name": "main",
            "parameters": [],
            "return": "None"
          },
          "decorators": [],
          "docstring": "Main execution function for applying a patch with GitManager."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\src\\src\\simula_demo\\__init__.py",
      "file_hash": "b94f7a4c2cacf0203820e927b4819d229675a971e4e9e4a097cca427dbbba5b0",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\src\\src\\simula_demo\\hello_cli.py",
      "file_hash": "18280f9f45c6b3dd71f75eaa21e03f92dbf38cf6a1821f0d43992c7265c5c0fb",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\src\\src\\simula_demo\\math_utils.py",
      "file_hash": "2c30dff06469e7abb82f785a63ce9aa6403e9d1bb047ce1bfd5c34b260d4d4ec",
      "functions": [
        {
          "name": "add",
          "signature": {
            "name": "add",
            "parameters": [
              {
                "name": "a",
                "annotation": null,
                "default": null
              },
              {
                "name": "b",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        },
        {
          "name": "fib",
          "signature": {
            "name": "fib",
            "parameters": [
              {
                "name": "n",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\DEcodiaOSsystemssimula\\simula\\common\\string_utils.py",
      "file_hash": "ec2fd24edc2f42c47e2bab892366f922094b6792f161b9dbd908b37949c207e1",
      "functions": [
        {
          "name": "reverse_string",
          "signature": {
            "name": "reverse_string",
            "parameters": [
              {
                "name": "s",
                "annotation": "str",
                "default": null
              }
            ],
            "return": "str"
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\DEcodiaOSsystemssimula\\tests\\test_string_utils.py",
      "file_hash": "4cf0339ab746d804b9826ca9f993222134812c27e0ae67c21b30ee09579efb1e",
      "functions": [
        {
          "name": "test_reverse_string",
          "signature": {
            "name": "test_reverse_string",
            "parameters": [],
            "return": null
          },
          "decorators": [],
          "docstring": null
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\DEcodiaOSsystemssimula\\tests\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\tests\\__init__.py",
      "file_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "functions": [],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\tests\\test_sim_orch.py",
      "file_hash": "2e9307b482fdb4fb00ef6139bd55f265fbeca25601418a08362dd4ac1607c64a",
      "functions": [
        {
          "name": "test_orchestrator_run_follows_hot_path",
          "signature": {
            "name": "test_orchestrator_run_follows_hot_path",
            "parameters": [
              {
                "name": "MockSynapseClient",
                "annotation": null,
                "default": null
              },
              {
                "name": "MockDockerSandbox",
                "annotation": null,
                "default": null
              },
              {
                "name": "mock_generate_portfolio",
                "annotation": null,
                "default": null
              },
              {
                "name": "mock_plan",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "patch('systems.simula.agent.orchestrator.plan_from_objective', return_value=MagicMock(steps=[MagicMock(name='step1')]))",
            "patch('systems.simula.agent.orchestrator.generate_and_evaluate_portfolio', new_callable=AsyncMock, return_value=[{'id': 'cand1', 'diff': '...'}])",
            "patch('systems.simula.agent.orchestrator.DockerSandbox')",
            "patch('systems.simula.agent.orchestrator.SynapseClient')"
          ],
          "docstring": "Verify that the orchestrator's run method calls its dependencies\nin the correct \"hot path\" sequence."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\tests\\test_port.py",
      "file_hash": "90aac8317ae2be5d4aaed39edb9389075211e999c46b3804f2866f5cfa795a45",
      "functions": [
        {
          "name": "mock_eval_result",
          "signature": {
            "name": "mock_eval_result",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Provides a complete mock for the EvalResult object."
        },
        {
          "name": "test_generate_portfolio_returns_full_list",
          "signature": {
            "name": "test_generate_portfolio_returns_full_list",
            "parameters": [
              {
                "name": "mock_add_candidate",
                "annotation": null,
                "default": null
              },
              {
                "name": "mock_run_suite",
                "annotation": null,
                "default": null
              },
              {
                "name": "mock_generate",
                "annotation": null,
                "default": null
              },
              {
                "name": "mock_eval_result",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [
            "patch('systems.simula.code_sim.portfolio._generate_candidate', new_callable=AsyncMock, return_value='--- a/file.py\\n+++ b/file.py\\n@@ -1,1 +1,1 @@\\n-old\\n+new')",
            "patch('systems.simula.code_sim.portfolio.run_evaluator_suite')",
            "patch('systems.simula.code_sim.portfolio.add_candidate')"
          ],
          "docstring": "Verify that the refactored portfolio function returns a list of all\nevaluated candidates, not just a single winner."
        }
      ],
      "classes": []
    },
    {
      "path": "D:\\EcodiaOS\\tests\\test_syn_clie.py",
      "file_hash": "301b9f1bdc2226f90ee63d45ae65634fea933629fa1ae917c029e761cf6dbe5c",
      "functions": [
        {
          "name": "mock_http_client",
          "signature": {
            "name": "mock_http_client",
            "parameters": [],
            "return": null
          },
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "A pytest fixture to mock the get_http_client function."
        },
        {
          "name": "test_get_policy_hint",
          "signature": {
            "name": "test_get_policy_hint",
            "parameters": [
              {
                "name": "mock_http_client",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Verify that get_policy_hint calls the correct unified endpoint."
        },
        {
          "name": "test_ingest_reward",
          "signature": {
            "name": "test_ingest_reward",
            "parameters": [
              {
                "name": "mock_http_client",
                "annotation": null,
                "default": null
              }
            ],
            "return": null
          },
          "decorators": [],
          "docstring": "Verify that ingest_reward calls the correct endpoint."
        }
      ],
      "classes": []
    }
  ]
}